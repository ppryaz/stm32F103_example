
DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005368  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08005478  08005478  00006478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005878  08005878  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005878  08005878  00006878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005880  08005880  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005880  08005880  00006880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005884  08005884  00006884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005888  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001d4  08005a5c  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08005a5c  0000738c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007062  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016bc  00000000  00000000  0000e25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0000f920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000570  00000000  00000000  00010058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ccc  00000000  00000000  000105c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000091b3  00000000  00000000  00028294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083bfc  00000000  00000000  00031447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5043  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c98  00000000  00000000  000b5088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b7d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005460 	.word	0x08005460

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005460 	.word	0x08005460

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <DelayMicro>:
#include "ds18b20.h"
//--------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <DelayMicro+0x34>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <DelayMicro+0x38>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0ddb      	lsrs	r3, r3, #23
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8000f60:	bf00      	nop
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	1e5a      	subs	r2, r3, #1
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1fa      	bne.n	8000f62 <DelayMicro+0x1e>
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	ee9bfab5 	.word	0xee9bfab5

08000f80 <port_init>:
//--------------------------------------------------
void port_init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000f84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f88:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <port_init+0x38>)
 8000f8a:	f000 ff2f 	bl	8001dec <HAL_GPIO_DeInit>
  GPIOB->CRH |= GPIO_CRH_MODE11;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <port_init+0x38>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <port_init+0x38>)
 8000f94:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000f98:	6053      	str	r3, [r2, #4]
  GPIOB->CRH |= GPIO_CRH_CNF11_0;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <port_init+0x38>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4a06      	ldr	r2, [pc, #24]	@ (8000fb8 <port_init+0x38>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa4:	6053      	str	r3, [r2, #4]
  GPIOB->CRH &= ~GPIO_CRH_CNF11_1;
 8000fa6:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <port_init+0x38>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	4a03      	ldr	r2, [pc, #12]	@ (8000fb8 <port_init+0x38>)
 8000fac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000fb0:	6053      	str	r3, [r2, #4]
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <ds18b20_Reset>:
//--------------------------------------------------
uint8_t ds18b20_Reset(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  uint16_t status;
	GPIOB->ODR &= ~GPIO_ODR_ODR11;//������ �������
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <ds18b20_Reset+0x54>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	4a12      	ldr	r2, [pc, #72]	@ (8001010 <ds18b20_Reset+0x54>)
 8000fc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000fcc:	60d3      	str	r3, [r2, #12]
  DelayMicro(1000);//�������� ��� ������� �� 480 �����������
 8000fce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fd2:	f7ff ffb7 	bl	8000f44 <DelayMicro>
  GPIOB->ODR |= GPIO_ODR_ODR11;//������� �������
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <ds18b20_Reset+0x54>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <ds18b20_Reset+0x54>)
 8000fdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fe0:	60d3      	str	r3, [r2, #12]
  DelayMicro(120);//�������� ��� ������� �� 60 �����������
 8000fe2:	2078      	movs	r0, #120	@ 0x78
 8000fe4:	f7ff ffae 	bl	8000f44 <DelayMicro>
  status = GPIOB->IDR & GPIO_IDR_IDR11;//��������� �������
 8000fe8:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <ds18b20_Reset+0x54>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ff2:	80fb      	strh	r3, [r7, #6]
  DelayMicro(1000);//�������� ��� ������� �� 480 �����������
 8000ff4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ff8:	f7ff ffa4 	bl	8000f44 <DelayMicro>
  //(�� ������ ������ ������� ��������, ��� ��� ����� ���� ���������� � ��������)
  return (status ? 1 : 0);//����� ���������
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf14      	ite	ne
 8001002:	2301      	movne	r3, #1
 8001004:	2300      	moveq	r3, #0
 8001006:	b2db      	uxtb	r3, r3
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40010c00 	.word	0x40010c00

08001014 <ds18b20_ReadBit>:
//----------------------------------------------------------
uint8_t ds18b20_ReadBit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  uint8_t bit = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]
  GPIOB->ODR &= ~GPIO_ODR_ODR11;//������ �������
 800101e:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <ds18b20_ReadBit+0x54>)
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	4a11      	ldr	r2, [pc, #68]	@ (8001068 <ds18b20_ReadBit+0x54>)
 8001024:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001028:	60d3      	str	r3, [r2, #12]
  DelayMicro(2);
 800102a:	2002      	movs	r0, #2
 800102c:	f7ff ff8a 	bl	8000f44 <DelayMicro>
	GPIOB->ODR |= GPIO_ODR_ODR11;//������� �������
 8001030:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <ds18b20_ReadBit+0x54>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	4a0c      	ldr	r2, [pc, #48]	@ (8001068 <ds18b20_ReadBit+0x54>)
 8001036:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800103a:	60d3      	str	r3, [r2, #12]
	DelayMicro(13);
 800103c:	200d      	movs	r0, #13
 800103e:	f7ff ff81 	bl	8000f44 <DelayMicro>
	bit = (GPIOB->IDR & GPIO_IDR_IDR11 ? 1 : 0);//��������� �������	
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <ds18b20_ReadBit+0x54>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf14      	ite	ne
 800104e:	2301      	movne	r3, #1
 8001050:	2300      	moveq	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	71fb      	strb	r3, [r7, #7]
	DelayMicro(45);
 8001056:	202d      	movs	r0, #45	@ 0x2d
 8001058:	f7ff ff74 	bl	8000f44 <DelayMicro>
  return bit;
 800105c:	79fb      	ldrb	r3, [r7, #7]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40010c00 	.word	0x40010c00

0800106c <ds18b20_ReadByte>:
//-----------------------------------------------
uint8_t ds18b20_ReadByte(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i <= 7; i++)
 8001076:	2300      	movs	r3, #0
 8001078:	71bb      	strb	r3, [r7, #6]
 800107a:	e00d      	b.n	8001098 <ds18b20_ReadByte+0x2c>
  data += ds18b20_ReadBit() << i;
 800107c:	f7ff ffca 	bl	8001014 <ds18b20_ReadBit>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	b2da      	uxtb	r2, r3
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4413      	add	r3, r2
 8001090:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i <= 7; i++)
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	3301      	adds	r3, #1
 8001096:	71bb      	strb	r3, [r7, #6]
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	2b07      	cmp	r3, #7
 800109c:	d9ee      	bls.n	800107c <ds18b20_ReadByte+0x10>
  return data;
 800109e:	79fb      	ldrb	r3, [r7, #7]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <ds18b20_WriteBit>:
//-----------------------------------------------
void ds18b20_WriteBit(uint8_t bit)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  GPIOB->ODR &= ~GPIO_ODR_ODR11;
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <ds18b20_WriteBit+0x50>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	4a10      	ldr	r2, [pc, #64]	@ (80010f8 <ds18b20_WriteBit+0x50>)
 80010b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80010bc:	60d3      	str	r3, [r2, #12]
  DelayMicro(bit ? 3 : 65);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <ds18b20_WriteBit+0x20>
 80010c4:	2303      	movs	r3, #3
 80010c6:	e000      	b.n	80010ca <ds18b20_WriteBit+0x22>
 80010c8:	2341      	movs	r3, #65	@ 0x41
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff3a 	bl	8000f44 <DelayMicro>
  GPIOB->ODR |= GPIO_ODR_ODR11;
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <ds18b20_WriteBit+0x50>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	4a08      	ldr	r2, [pc, #32]	@ (80010f8 <ds18b20_WriteBit+0x50>)
 80010d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010da:	60d3      	str	r3, [r2, #12]
  DelayMicro(bit ? 65 : 3);
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <ds18b20_WriteBit+0x3e>
 80010e2:	2341      	movs	r3, #65	@ 0x41
 80010e4:	e000      	b.n	80010e8 <ds18b20_WriteBit+0x40>
 80010e6:	2303      	movs	r3, #3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff2b 	bl	8000f44 <DelayMicro>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40010c00 	.word	0x40010c00

080010fc <ds18b20_WriteByte>:
//-----------------------------------------------
void ds18b20_WriteByte(uint8_t dt)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	e010      	b.n	800112e <ds18b20_WriteByte+0x32>
  {
    ds18b20_WriteBit(dt >> i & 1);
 800110c:	79fa      	ldrb	r2, [r7, #7]
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	fa42 f303 	asr.w	r3, r2, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffc3 	bl	80010a8 <ds18b20_WriteBit>
    //Delay Protection
    DelayMicro(5);
 8001122:	2005      	movs	r0, #5
 8001124:	f7ff ff0e 	bl	8000f44 <DelayMicro>
  for (uint8_t i = 0; i < 8; i++)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	3301      	adds	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b07      	cmp	r3, #7
 8001132:	d9eb      	bls.n	800110c <ds18b20_WriteByte+0x10>
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <ds18b20_init>:
//-----------------------------------------------
uint8_t ds18b20_init(uint8_t mode)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
	if(ds18b20_Reset()) return 1;
 8001148:	f7ff ff38 	bl	8000fbc <ds18b20_Reset>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <ds18b20_init+0x18>
 8001152:	2301      	movs	r3, #1
 8001154:	e012      	b.n	800117c <ds18b20_init+0x3e>
  if(mode==SKIP_ROM)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10e      	bne.n	800117a <ds18b20_init+0x3c>
  {
		//SKIP ROM
		ds18b20_WriteByte(0xCC);
 800115c:	20cc      	movs	r0, #204	@ 0xcc
 800115e:	f7ff ffcd 	bl	80010fc <ds18b20_WriteByte>
		//WRITE SCRATCHPAD
		ds18b20_WriteByte(0x4E);
 8001162:	204e      	movs	r0, #78	@ 0x4e
 8001164:	f7ff ffca 	bl	80010fc <ds18b20_WriteByte>
		//TH REGISTER 100 ��������
		ds18b20_WriteByte(0x64);
 8001168:	2064      	movs	r0, #100	@ 0x64
 800116a:	f7ff ffc7 	bl	80010fc <ds18b20_WriteByte>
		//TL REGISTER - 30 ��������
		ds18b20_WriteByte(0x9E);
 800116e:	209e      	movs	r0, #158	@ 0x9e
 8001170:	f7ff ffc4 	bl	80010fc <ds18b20_WriteByte>
		//Resolution 12 bit
		ds18b20_WriteByte(RESOLUTION_12BIT);
 8001174:	207f      	movs	r0, #127	@ 0x7f
 8001176:	f7ff ffc1 	bl	80010fc <ds18b20_WriteByte>
  }
  return 0;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <ds18b20_MeasureTemperCmd>:
//----------------------------------------------------------
void ds18b20_MeasureTemperCmd(uint8_t mode, uint8_t DevNum)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
  ds18b20_Reset();
 8001194:	f7ff ff12 	bl	8000fbc <ds18b20_Reset>
  if(mode==SKIP_ROM)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <ds18b20_MeasureTemperCmd+0x20>
  {
    //SKIP ROM
    ds18b20_WriteByte(0xCC);
 800119e:	20cc      	movs	r0, #204	@ 0xcc
 80011a0:	f7ff ffac 	bl	80010fc <ds18b20_WriteByte>
  }
  //CONVERT T
  ds18b20_WriteByte(0x44);
 80011a4:	2044      	movs	r0, #68	@ 0x44
 80011a6:	f7ff ffa9 	bl	80010fc <ds18b20_WriteByte>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <ds18b20_ReadStratcpad>:
//----------------------------------------------------------
void ds18b20_ReadStratcpad(uint8_t mode, uint8_t *Data, uint8_t DevNum)
{
 80011b2:	b590      	push	{r4, r7, lr}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	6039      	str	r1, [r7, #0]
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	4613      	mov	r3, r2
 80011c0:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  ds18b20_Reset();
 80011c2:	f7ff fefb 	bl	8000fbc <ds18b20_Reset>
  if(mode==SKIP_ROM)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <ds18b20_ReadStratcpad+0x20>
  {
    //SKIP ROM
    ds18b20_WriteByte(0xCC);
 80011cc:	20cc      	movs	r0, #204	@ 0xcc
 80011ce:	f7ff ff95 	bl	80010fc <ds18b20_WriteByte>
  }
  //READ SCRATCHPAD
  ds18b20_WriteByte(0xBE);
 80011d2:	20be      	movs	r0, #190	@ 0xbe
 80011d4:	f7ff ff92 	bl	80010fc <ds18b20_WriteByte>
  for(i=0;i<8;i++)
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e009      	b.n	80011f2 <ds18b20_ReadStratcpad+0x40>
  {
    Data[i] = ds18b20_ReadByte();
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	18d4      	adds	r4, r2, r3
 80011e4:	f7ff ff42 	bl	800106c <ds18b20_ReadByte>
 80011e8:	4603      	mov	r3, r0
 80011ea:	7023      	strb	r3, [r4, #0]
  for(i=0;i<8;i++)
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	3301      	adds	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b07      	cmp	r3, #7
 80011f6:	d9f2      	bls.n	80011de <ds18b20_ReadStratcpad+0x2c>
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}

08001202 <ds18b20_GetSign>:
//----------------------------------------------------------
uint8_t ds18b20_GetSign(uint16_t dt)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	80fb      	strh	r3, [r7, #6]
  //�������� 11-� ���
  if (dt&(1<<11)) return 1;
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <ds18b20_GetSign+0x18>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <ds18b20_GetSign+0x1a>
  else return 0;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <ds18b20_Convert>:
//----------------------------------------------------------
float ds18b20_Convert(uint16_t dt)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	80fb      	strh	r3, [r7, #6]
  float t;
  t = (float) ((dt&0x07FF)>>4); //��������� �������� � ������� ����
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	111b      	asrs	r3, r3, #4
 8001234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fcdf 	bl	8000bfc <__aeabi_i2f>
 800123e:	4603      	mov	r3, r0
 8001240:	60fb      	str	r3, [r7, #12]
  //�������� ������� �����
  t += (float)(dt&0x000F) / 16.0f;
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fcd7 	bl	8000bfc <__aeabi_i2f>
 800124e:	4603      	mov	r3, r0
 8001250:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fdd9 	bl	8000e0c <__aeabi_fdiv>
 800125a:	4603      	mov	r3, r0
 800125c:	4619      	mov	r1, r3
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f7ff fc18 	bl	8000a94 <__addsf3>
 8001264:	4603      	mov	r3, r0
 8001266:	60fb      	str	r3, [r7, #12]
  return t;
 8001268:	68fb      	ldr	r3, [r7, #12]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001276:	b08b      	sub	sp, #44	@ 0x2c
 8001278:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127a:	f000 fac9 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127e:	f000 f865 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001282:	f000 f8d3 	bl	800142c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001286:	f000 f8a7 	bl	80013d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	port_init();
 800128a:	f7ff fe79 	bl	8000f80 <port_init>
	status = ds18b20_init(SKIP_ROM);
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff ff55 	bl	800113e <ds18b20_init>
 8001294:	4603      	mov	r3, r0
 8001296:	73bb      	strb	r3, [r7, #14]
	//sprintf(str1,"Init Status: %d\r\n",status);
	printf("Init Status: %d\r\n",status);
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	4619      	mov	r1, r3
 800129c:	4828      	ldr	r0, [pc, #160]	@ (8001340 <main+0xcc>)
 800129e:	f002 f95f 	bl	8003560 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff ff6d 	bl	8001184 <ds18b20_MeasureTemperCmd>
	  		HAL_Delay(800);
 80012aa:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80012ae:	f000 fb11 	bl	80018d4 <HAL_Delay>
	  		ds18b20_ReadStratcpad(SKIP_ROM, dt, 0);
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff ff7a 	bl	80011b2 <ds18b20_ReadStratcpad>
	  		//sprintf(str1,"STRATHPAD: %02X %02X %02X %02X %02X %02X %02X %02X; ",
	  		//dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7]);
	  		//HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	  		printf("STRATHPAD: %02X %02X %02X %02X %02X %02X %02X %02X; ",
	  		dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7]);
 80012be:	783b      	ldrb	r3, [r7, #0]
	  		printf("STRATHPAD: %02X %02X %02X %02X %02X %02X %02X %02X; ",
 80012c0:	461d      	mov	r5, r3
	  		dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7]);
 80012c2:	787b      	ldrb	r3, [r7, #1]
	  		printf("STRATHPAD: %02X %02X %02X %02X %02X %02X %02X %02X; ",
 80012c4:	461e      	mov	r6, r3
	  		dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7]);
 80012c6:	78bb      	ldrb	r3, [r7, #2]
	  		printf("STRATHPAD: %02X %02X %02X %02X %02X %02X %02X %02X; ",
 80012c8:	469c      	mov	ip, r3
	  		dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7]);
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	793a      	ldrb	r2, [r7, #4]
 80012ce:	7979      	ldrb	r1, [r7, #5]
 80012d0:	79b8      	ldrb	r0, [r7, #6]
 80012d2:	79fc      	ldrb	r4, [r7, #7]
	  		printf("STRATHPAD: %02X %02X %02X %02X %02X %02X %02X %02X; ",
 80012d4:	9404      	str	r4, [sp, #16]
 80012d6:	9003      	str	r0, [sp, #12]
 80012d8:	9102      	str	r1, [sp, #8]
 80012da:	9201      	str	r2, [sp, #4]
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	4663      	mov	r3, ip
 80012e0:	4632      	mov	r2, r6
 80012e2:	4629      	mov	r1, r5
 80012e4:	4817      	ldr	r0, [pc, #92]	@ (8001344 <main+0xd0>)
 80012e6:	f002 f93b 	bl	8003560 <iprintf>
	  		raw_temper = ((uint16_t)dt[1]<<8)|dt[0];
 80012ea:	787b      	ldrb	r3, [r7, #1]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	783b      	ldrb	r3, [r7, #0]
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	81bb      	strh	r3, [r7, #12]
	  		if(ds18b20_GetSign(raw_temper)) c='-';
 80012fa:	89bb      	ldrh	r3, [r7, #12]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff80 	bl	8001202 <ds18b20_GetSign>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <main+0x9a>
 8001308:	232d      	movs	r3, #45	@ 0x2d
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e001      	b.n	8001312 <main+0x9e>
	  		else c='+';
 800130e:	232b      	movs	r3, #43	@ 0x2b
 8001310:	73fb      	strb	r3, [r7, #15]
	  		temper = ds18b20_Convert(raw_temper);
 8001312:	89bb      	ldrh	r3, [r7, #12]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff86 	bl	8001226 <ds18b20_Convert>
 800131a:	60b8      	str	r0, [r7, #8]

	  		printf("Raw t: 0x%04X; t: %c%.2f\r\n", raw_temper, c, temper);
 800131c:	89bc      	ldrh	r4, [r7, #12]
 800131e:	7bfd      	ldrb	r5, [r7, #15]
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f7ff f881 	bl	8000428 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	e9cd 2300 	strd	r2, r3, [sp]
 800132e:	462a      	mov	r2, r5
 8001330:	4621      	mov	r1, r4
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <main+0xd4>)
 8001334:	f002 f914 	bl	8003560 <iprintf>
	  		HAL_Delay(150);
 8001338:	2096      	movs	r0, #150	@ 0x96
 800133a:	f000 facb 	bl	80018d4 <HAL_Delay>
	  ds18b20_MeasureTemperCmd(SKIP_ROM, 0);
 800133e:	e7b0      	b.n	80012a2 <main+0x2e>
 8001340:	08005478 	.word	0x08005478
 8001344:	0800548c 	.word	0x0800548c
 8001348:	080054c4 	.word	0x080054c4

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b090      	sub	sp, #64	@ 0x40
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0318 	add.w	r3, r7, #24
 8001356:	2228      	movs	r2, #40	@ 0x28
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f002 f955 	bl	800360a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001376:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137c:	2301      	movs	r3, #1
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001380:	2302      	movs	r3, #2
 8001382:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001384:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001388:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800138a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800138e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fde5 	bl	8001f64 <HAL_RCC_OscConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013a0:	f000 f89a 	bl	80014d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	230f      	movs	r3, #15
 80013a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a8:	2302      	movs	r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2102      	movs	r1, #2
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 f852 	bl	8002468 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013ca:	f000 f885 	bl	80014d8 <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3740      	adds	r7, #64	@ 0x40
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013dc:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <MX_USART2_UART_Init+0x4c>)
 80013de:	4a12      	ldr	r2, [pc, #72]	@ (8001428 <MX_USART2_UART_Init+0x50>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <MX_USART2_UART_Init+0x4c>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_USART2_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_USART2_UART_Init+0x4c>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <MX_USART2_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	@ (8001424 <MX_USART2_UART_Init+0x4c>)
 8001410:	f001 f9b8 	bl	8002784 <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800141a:	f000 f85d 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200001f0 	.word	0x200001f0
 8001428:	40004400 	.word	0x40004400

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001440:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <MX_GPIO_Init+0x80>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a19      	ldr	r2, [pc, #100]	@ (80014ac <MX_GPIO_Init+0x80>)
 8001446:	f043 0320 	orr.w	r3, r3, #32
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <MX_GPIO_Init+0x80>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_GPIO_Init+0x80>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <MX_GPIO_Init+0x80>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_GPIO_Init+0x80>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_GPIO_Init+0x80>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <MX_GPIO_Init+0x80>)
 8001476:	f043 0308 	orr.w	r3, r3, #8
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <MX_GPIO_Init+0x80>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001488:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800148c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	4619      	mov	r1, r3
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <MX_GPIO_Init+0x84>)
 800149e:	f000 fb21 	bl	8001ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a2:	bf00      	nop
 80014a4:	3720      	adds	r7, #32
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40010c00 	.word	0x40010c00

080014b4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80014bc:	1d39      	adds	r1, r7, #4
 80014be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014c2:	2201      	movs	r2, #1
 80014c4:	4803      	ldr	r0, [pc, #12]	@ (80014d4 <__io_putchar+0x20>)
 80014c6:	f001 f9ad 	bl	8002824 <HAL_UART_Transmit>

  return ch;
 80014ca:	687b      	ldr	r3, [r7, #4]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200001f0 	.word	0x200001f0

080014d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <Error_Handler+0x8>

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_MspInit+0x5c>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	4a14      	ldr	r2, [pc, #80]	@ (8001540 <HAL_MspInit+0x5c>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6193      	str	r3, [r2, #24]
 80014f6:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_MspInit+0x5c>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_MspInit+0x5c>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a0e      	ldr	r2, [pc, #56]	@ (8001540 <HAL_MspInit+0x5c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <HAL_MspInit+0x5c>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800151a:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <HAL_MspInit+0x60>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <HAL_MspInit+0x60>)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1b      	ldr	r2, [pc, #108]	@ (80015d0 <HAL_UART_MspInit+0x88>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d12f      	bne.n	80015c8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001568:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <HAL_UART_MspInit+0x8c>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	4a19      	ldr	r2, [pc, #100]	@ (80015d4 <HAL_UART_MspInit+0x8c>)
 800156e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001572:	61d3      	str	r3, [r2, #28]
 8001574:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <HAL_UART_MspInit+0x8c>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <HAL_UART_MspInit+0x8c>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a13      	ldr	r2, [pc, #76]	@ (80015d4 <HAL_UART_MspInit+0x8c>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_UART_MspInit+0x8c>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001598:	2304      	movs	r3, #4
 800159a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	480b      	ldr	r0, [pc, #44]	@ (80015d8 <HAL_UART_MspInit+0x90>)
 80015ac:	f000 fa9a 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015b0:	2308      	movs	r3, #8
 80015b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <HAL_UART_MspInit+0x90>)
 80015c4:	f000 fa8e 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40004400 	.word	0x40004400
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010800 	.word	0x40010800

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <MemManage_Handler+0x4>

080015f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <UsageFault_Handler+0x4>

08001604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162c:	f000 f936 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return 1;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <_kill>:

int _kill(int pid, int sig)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800164c:	f002 f830 	bl	80036b0 <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	2216      	movs	r2, #22
 8001654:	601a      	str	r2, [r3, #0]
  return -1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_exit>:

void _exit (int status)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800166a:	f04f 31ff 	mov.w	r1, #4294967295
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffe7 	bl	8001642 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <_exit+0x12>

08001678 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e00a      	b.n	80016a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168a:	f3af 8000 	nop.w
 800168e:	4601      	mov	r1, r0
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf0      	blt.n	800168a <_read+0x12>
  }

  return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e009      	b.n	80016d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fef1 	bl	80014b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbf1      	blt.n	80016c4 <_write+0x12>
  }
  return len;
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_close>:

int _close(int file)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001710:	605a      	str	r2, [r3, #4]
  return 0;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <_isatty>:

int _isatty(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001732:	b480      	push	{r7}
 8001734:	b085      	sub	sp, #20
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
	...

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	@ (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f001 ff98 	bl	80036b0 <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20005000 	.word	0x20005000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	20000238 	.word	0x20000238
 80017b4:	20000390 	.word	0x20000390

080017b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c4:	f7ff fff8 	bl	80017b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c8:	480b      	ldr	r0, [pc, #44]	@ (80017f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ca:	490c      	ldr	r1, [pc, #48]	@ (80017fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001800 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a09      	ldr	r2, [pc, #36]	@ (8001804 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017e0:	4c09      	ldr	r4, [pc, #36]	@ (8001808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ee:	f001 ff65 	bl	80036bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017f2:	f7ff fd3f 	bl	8001274 <main>
  bx lr
 80017f6:	4770      	bx	lr
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001800:	08005888 	.word	0x08005888
  ldr r2, =_sbss
 8001804:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001808:	2000038c 	.word	0x2000038c

0800180c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC1_2_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <HAL_Init+0x28>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <HAL_Init+0x28>)
 800181a:	f043 0310 	orr.w	r3, r3, #16
 800181e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f92b 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	200f      	movs	r0, #15
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fe5a 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40022000 	.word	0x40022000

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f935 	bl	8001aca <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 f90b 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000000 	.word	0x20000000
 8001894:	20000008 	.word	0x20000008
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_IncTick+0x1c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_IncTick+0x20>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a03      	ldr	r2, [pc, #12]	@ (80018bc <HAL_IncTick+0x20>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	20000008 	.word	0x20000008
 80018bc:	2000023c 	.word	0x2000023c

080018c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b02      	ldr	r3, [pc, #8]	@ (80018d0 <HAL_GetTick+0x10>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	2000023c 	.word	0x2000023c

080018d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff fff0 	bl	80018c0 <HAL_GetTick>
 80018e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	d005      	beq.n	80018fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <HAL_Delay+0x44>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018fa:	bf00      	nop
 80018fc:	f7ff ffe0 	bl	80018c0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	d8f7      	bhi.n	80018fc <HAL_Delay+0x28>
  {
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	@ (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	@ (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	@ (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	@ 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	@ 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff90 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff49 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff5e 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff90 	bl	80019d4 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5f 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffb0 	bl	8001a38 <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b08b      	sub	sp, #44	@ 0x2c
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af6:	e169      	b.n	8001dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001af8:	2201      	movs	r2, #1
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	f040 8158 	bne.w	8001dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	4a9a      	ldr	r2, [pc, #616]	@ (8001d84 <HAL_GPIO_Init+0x2a0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d05e      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b20:	4a98      	ldr	r2, [pc, #608]	@ (8001d84 <HAL_GPIO_Init+0x2a0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d875      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b26:	4a98      	ldr	r2, [pc, #608]	@ (8001d88 <HAL_GPIO_Init+0x2a4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d058      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b2c:	4a96      	ldr	r2, [pc, #600]	@ (8001d88 <HAL_GPIO_Init+0x2a4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d86f      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b32:	4a96      	ldr	r2, [pc, #600]	@ (8001d8c <HAL_GPIO_Init+0x2a8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d052      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b38:	4a94      	ldr	r2, [pc, #592]	@ (8001d8c <HAL_GPIO_Init+0x2a8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d869      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b3e:	4a94      	ldr	r2, [pc, #592]	@ (8001d90 <HAL_GPIO_Init+0x2ac>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d04c      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b44:	4a92      	ldr	r2, [pc, #584]	@ (8001d90 <HAL_GPIO_Init+0x2ac>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d863      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b4a:	4a92      	ldr	r2, [pc, #584]	@ (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d046      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
 8001b50:	4a90      	ldr	r2, [pc, #576]	@ (8001d94 <HAL_GPIO_Init+0x2b0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d85d      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b56:	2b12      	cmp	r3, #18
 8001b58:	d82a      	bhi.n	8001bb0 <HAL_GPIO_Init+0xcc>
 8001b5a:	2b12      	cmp	r3, #18
 8001b5c:	d859      	bhi.n	8001c12 <HAL_GPIO_Init+0x12e>
 8001b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b64 <HAL_GPIO_Init+0x80>)
 8001b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b64:	08001bdf 	.word	0x08001bdf
 8001b68:	08001bb9 	.word	0x08001bb9
 8001b6c:	08001bcb 	.word	0x08001bcb
 8001b70:	08001c0d 	.word	0x08001c0d
 8001b74:	08001c13 	.word	0x08001c13
 8001b78:	08001c13 	.word	0x08001c13
 8001b7c:	08001c13 	.word	0x08001c13
 8001b80:	08001c13 	.word	0x08001c13
 8001b84:	08001c13 	.word	0x08001c13
 8001b88:	08001c13 	.word	0x08001c13
 8001b8c:	08001c13 	.word	0x08001c13
 8001b90:	08001c13 	.word	0x08001c13
 8001b94:	08001c13 	.word	0x08001c13
 8001b98:	08001c13 	.word	0x08001c13
 8001b9c:	08001c13 	.word	0x08001c13
 8001ba0:	08001c13 	.word	0x08001c13
 8001ba4:	08001c13 	.word	0x08001c13
 8001ba8:	08001bc1 	.word	0x08001bc1
 8001bac:	08001bd5 	.word	0x08001bd5
 8001bb0:	4a79      	ldr	r2, [pc, #484]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bb6:	e02c      	b.n	8001c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	623b      	str	r3, [r7, #32]
          break;
 8001bbe:	e029      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	623b      	str	r3, [r7, #32]
          break;
 8001bc8:	e024      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	3308      	adds	r3, #8
 8001bd0:	623b      	str	r3, [r7, #32]
          break;
 8001bd2:	e01f      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	330c      	adds	r3, #12
 8001bda:	623b      	str	r3, [r7, #32]
          break;
 8001bdc:	e01a      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001be6:	2304      	movs	r3, #4
 8001be8:	623b      	str	r3, [r7, #32]
          break;
 8001bea:	e013      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	611a      	str	r2, [r3, #16]
          break;
 8001bfe:	e009      	b.n	8001c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c00:	2308      	movs	r3, #8
 8001c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	615a      	str	r2, [r3, #20]
          break;
 8001c0a:	e003      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
          break;
 8001c10:	e000      	b.n	8001c14 <HAL_GPIO_Init+0x130>
          break;
 8001c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2bff      	cmp	r3, #255	@ 0xff
 8001c18:	d801      	bhi.n	8001c1e <HAL_GPIO_Init+0x13a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	e001      	b.n	8001c22 <HAL_GPIO_Init+0x13e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3304      	adds	r3, #4
 8001c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2bff      	cmp	r3, #255	@ 0xff
 8001c28:	d802      	bhi.n	8001c30 <HAL_GPIO_Init+0x14c>
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	e002      	b.n	8001c36 <HAL_GPIO_Init+0x152>
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	3b08      	subs	r3, #8
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	401a      	ands	r2, r3
 8001c48:	6a39      	ldr	r1, [r7, #32]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	431a      	orrs	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80b1 	beq.w	8001dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c64:	4b4d      	ldr	r3, [pc, #308]	@ (8001d9c <HAL_GPIO_Init+0x2b8>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a4c      	ldr	r2, [pc, #304]	@ (8001d9c <HAL_GPIO_Init+0x2b8>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b4a      	ldr	r3, [pc, #296]	@ (8001d9c <HAL_GPIO_Init+0x2b8>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c7c:	4a48      	ldr	r2, [pc, #288]	@ (8001da0 <HAL_GPIO_Init+0x2bc>)
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	220f      	movs	r2, #15
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a40      	ldr	r2, [pc, #256]	@ (8001da4 <HAL_GPIO_Init+0x2c0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d013      	beq.n	8001cd0 <HAL_GPIO_Init+0x1ec>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3f      	ldr	r2, [pc, #252]	@ (8001da8 <HAL_GPIO_Init+0x2c4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d00d      	beq.n	8001ccc <HAL_GPIO_Init+0x1e8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8001dac <HAL_GPIO_Init+0x2c8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d007      	beq.n	8001cc8 <HAL_GPIO_Init+0x1e4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3d      	ldr	r2, [pc, #244]	@ (8001db0 <HAL_GPIO_Init+0x2cc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_GPIO_Init+0x1e0>
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e006      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	e004      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e002      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd4:	f002 0203 	and.w	r2, r2, #3
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	4093      	lsls	r3, r2
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ce2:	492f      	ldr	r1, [pc, #188]	@ (8001da0 <HAL_GPIO_Init+0x2bc>)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	492c      	ldr	r1, [pc, #176]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4928      	ldr	r1, [pc, #160]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d24:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	4922      	ldr	r1, [pc, #136]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d32:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	491e      	ldr	r1, [pc, #120]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d006      	beq.n	8001d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	4918      	ldr	r1, [pc, #96]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d5a:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4914      	ldr	r1, [pc, #80]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d021      	beq.n	8001db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d74:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	490e      	ldr	r1, [pc, #56]	@ (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
 8001d80:	e021      	b.n	8001dc6 <HAL_GPIO_Init+0x2e2>
 8001d82:	bf00      	nop
 8001d84:	10320000 	.word	0x10320000
 8001d88:	10310000 	.word	0x10310000
 8001d8c:	10220000 	.word	0x10220000
 8001d90:	10210000 	.word	0x10210000
 8001d94:	10120000 	.word	0x10120000
 8001d98:	10110000 	.word	0x10110000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40010800 	.word	0x40010800
 8001da8:	40010c00 	.word	0x40010c00
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40011400 	.word	0x40011400
 8001db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <HAL_GPIO_Init+0x304>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	4909      	ldr	r1, [pc, #36]	@ (8001de8 <HAL_GPIO_Init+0x304>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	3301      	adds	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f47f ae8e 	bne.w	8001af8 <HAL_GPIO_Init+0x14>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	372c      	adds	r7, #44	@ 0x2c
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40010400 	.word	0x40010400

08001dec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	@ 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001dfa:	e09a      	b.n	8001f32 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 808d 	beq.w	8001f2c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001e12:	4a4e      	ldr	r2, [pc, #312]	@ (8001f4c <HAL_GPIO_DeInit+0x160>)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	089b      	lsrs	r3, r3, #2
 8001e18:	3302      	adds	r3, #2
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	220f      	movs	r2, #15
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4013      	ands	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a46      	ldr	r2, [pc, #280]	@ (8001f50 <HAL_GPIO_DeInit+0x164>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d013      	beq.n	8001e64 <HAL_GPIO_DeInit+0x78>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a45      	ldr	r2, [pc, #276]	@ (8001f54 <HAL_GPIO_DeInit+0x168>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d00d      	beq.n	8001e60 <HAL_GPIO_DeInit+0x74>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a44      	ldr	r2, [pc, #272]	@ (8001f58 <HAL_GPIO_DeInit+0x16c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d007      	beq.n	8001e5c <HAL_GPIO_DeInit+0x70>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a43      	ldr	r2, [pc, #268]	@ (8001f5c <HAL_GPIO_DeInit+0x170>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d101      	bne.n	8001e58 <HAL_GPIO_DeInit+0x6c>
 8001e54:	2303      	movs	r3, #3
 8001e56:	e006      	b.n	8001e66 <HAL_GPIO_DeInit+0x7a>
 8001e58:	2304      	movs	r3, #4
 8001e5a:	e004      	b.n	8001e66 <HAL_GPIO_DeInit+0x7a>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_DeInit+0x7a>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_GPIO_DeInit+0x7a>
 8001e64:	2300      	movs	r3, #0
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d132      	bne.n	8001edc <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001e76:	4b3a      	ldr	r3, [pc, #232]	@ (8001f60 <HAL_GPIO_DeInit+0x174>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4938      	ldr	r1, [pc, #224]	@ (8001f60 <HAL_GPIO_DeInit+0x174>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001e84:	4b36      	ldr	r3, [pc, #216]	@ (8001f60 <HAL_GPIO_DeInit+0x174>)
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	4934      	ldr	r1, [pc, #208]	@ (8001f60 <HAL_GPIO_DeInit+0x174>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001e92:	4b33      	ldr	r3, [pc, #204]	@ (8001f60 <HAL_GPIO_DeInit+0x174>)
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4931      	ldr	r1, [pc, #196]	@ (8001f60 <HAL_GPIO_DeInit+0x174>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f60 <HAL_GPIO_DeInit+0x174>)
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	492d      	ldr	r1, [pc, #180]	@ (8001f60 <HAL_GPIO_DeInit+0x174>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001ebe:	4a23      	ldr	r2, [pc, #140]	@ (8001f4c <HAL_GPIO_DeInit+0x160>)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	481f      	ldr	r0, [pc, #124]	@ (8001f4c <HAL_GPIO_DeInit+0x160>)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2bff      	cmp	r3, #255	@ 0xff
 8001ee0:	d801      	bhi.n	8001ee6 <HAL_GPIO_DeInit+0xfa>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	e001      	b.n	8001eea <HAL_GPIO_DeInit+0xfe>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2bff      	cmp	r3, #255	@ 0xff
 8001ef0:	d802      	bhi.n	8001ef8 <HAL_GPIO_DeInit+0x10c>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_DeInit+0x112>
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	3b08      	subs	r3, #8
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	210f      	movs	r1, #15
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	401a      	ands	r2, r3
 8001f10:	2104      	movs	r1, #4
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	401a      	ands	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f47f af5e 	bne.w	8001dfc <HAL_GPIO_DeInit+0x10>
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3724      	adds	r7, #36	@ 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40010800 	.word	0x40010800
 8001f54:	40010c00 	.word	0x40010c00
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40011400 	.word	0x40011400
 8001f60:	40010400 	.word	0x40010400

08001f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e272      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8087 	beq.w	8002092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f84:	4b92      	ldr	r3, [pc, #584]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d00c      	beq.n	8001faa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f90:	4b8f      	ldr	r3, [pc, #572]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d112      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5e>
 8001f9c:	4b8c      	ldr	r3, [pc, #560]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001faa:	4b89      	ldr	r3, [pc, #548]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d06c      	beq.n	8002090 <HAL_RCC_OscConfig+0x12c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d168      	bne.n	8002090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e24c      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x76>
 8001fcc:	4b80      	ldr	r3, [pc, #512]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a7f      	ldr	r2, [pc, #508]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	e02e      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x98>
 8001fe2:	4b7b      	ldr	r3, [pc, #492]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7a      	ldr	r2, [pc, #488]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b78      	ldr	r3, [pc, #480]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a77      	ldr	r2, [pc, #476]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e01d      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0xbc>
 8002006:	4b72      	ldr	r3, [pc, #456]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a71      	ldr	r2, [pc, #452]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b6f      	ldr	r3, [pc, #444]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6e      	ldr	r2, [pc, #440]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8002020:	4b6b      	ldr	r3, [pc, #428]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6a      	ldr	r2, [pc, #424]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b68      	ldr	r3, [pc, #416]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a67      	ldr	r2, [pc, #412]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002036:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff fc3e 	bl	80018c0 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff fc3a 	bl	80018c0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	@ 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e200      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b5d      	ldr	r3, [pc, #372]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0xe4>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff fc2a 	bl	80018c0 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002070:	f7ff fc26 	bl	80018c0 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	@ 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e1ec      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	4b53      	ldr	r3, [pc, #332]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x10c>
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d063      	beq.n	8002166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800209e:	4b4c      	ldr	r3, [pc, #304]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020aa:	4b49      	ldr	r3, [pc, #292]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d11c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x18c>
 80020b6:	4b46      	ldr	r3, [pc, #280]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d116      	bne.n	80020f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	4b43      	ldr	r3, [pc, #268]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x176>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e1c0      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020da:	4b3d      	ldr	r3, [pc, #244]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4939      	ldr	r1, [pc, #228]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	e03a      	b.n	8002166 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f8:	4b36      	ldr	r3, [pc, #216]	@ (80021d4 <HAL_RCC_OscConfig+0x270>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7ff fbdf 	bl	80018c0 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002106:	f7ff fbdb 	bl	80018c0 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e1a1      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	4b2a      	ldr	r3, [pc, #168]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4927      	ldr	r1, [pc, #156]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
 8002138:	e015      	b.n	8002166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213a:	4b26      	ldr	r3, [pc, #152]	@ (80021d4 <HAL_RCC_OscConfig+0x270>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fbbe 	bl	80018c0 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7ff fbba 	bl	80018c0 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e180      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d03a      	beq.n	80021e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d019      	beq.n	80021ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217a:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <HAL_RCC_OscConfig+0x274>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7ff fb9e 	bl	80018c0 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7ff fb9a 	bl	80018c0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e160      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f000 face 	bl	8002748 <RCC_Delay>
 80021ac:	e01c      	b.n	80021e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ae:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_RCC_OscConfig+0x274>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7ff fb84 	bl	80018c0 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ba:	e00f      	b.n	80021dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff fb80 	bl	80018c0 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d908      	bls.n	80021dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e146      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	42420000 	.word	0x42420000
 80021d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	4b92      	ldr	r3, [pc, #584]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e9      	bne.n	80021bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a6 	beq.w	8002342 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10d      	bne.n	8002222 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b88      	ldr	r3, [pc, #544]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a87      	ldr	r2, [pc, #540]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002210:	61d3      	str	r3, [r2, #28]
 8002212:	4b85      	ldr	r3, [pc, #532]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b82      	ldr	r3, [pc, #520]	@ (800242c <HAL_RCC_OscConfig+0x4c8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b7f      	ldr	r3, [pc, #508]	@ (800242c <HAL_RCC_OscConfig+0x4c8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7e      	ldr	r2, [pc, #504]	@ (800242c <HAL_RCC_OscConfig+0x4c8>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7ff fb41 	bl	80018c0 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7ff fb3d 	bl	80018c0 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	@ 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e103      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b75      	ldr	r3, [pc, #468]	@ (800242c <HAL_RCC_OscConfig+0x4c8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x312>
 8002268:	4b6f      	ldr	r3, [pc, #444]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a6e      	ldr	r2, [pc, #440]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	e02d      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x334>
 800227e:	4b6a      	ldr	r3, [pc, #424]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a69      	ldr	r2, [pc, #420]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6213      	str	r3, [r2, #32]
 800228a:	4b67      	ldr	r3, [pc, #412]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a66      	ldr	r2, [pc, #408]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	6213      	str	r3, [r2, #32]
 8002296:	e01c      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d10c      	bne.n	80022ba <HAL_RCC_OscConfig+0x356>
 80022a0:	4b61      	ldr	r3, [pc, #388]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a60      	ldr	r2, [pc, #384]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	e00b      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 80022ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4a5a      	ldr	r2, [pc, #360]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	6213      	str	r3, [r2, #32]
 80022c6:	4b58      	ldr	r3, [pc, #352]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a57      	ldr	r2, [pc, #348]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d015      	beq.n	8002306 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7ff faf1 	bl	80018c0 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7ff faed 	bl	80018c0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0b1      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ee      	beq.n	80022e2 <HAL_RCC_OscConfig+0x37e>
 8002304:	e014      	b.n	8002330 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7ff fadb 	bl	80018c0 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7ff fad7 	bl	80018c0 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e09b      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002324:	4b40      	ldr	r3, [pc, #256]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1ee      	bne.n	800230e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d105      	bne.n	8002342 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002336:	4b3c      	ldr	r3, [pc, #240]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a3b      	ldr	r2, [pc, #236]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002340:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8087 	beq.w	800245a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800234c:	4b36      	ldr	r3, [pc, #216]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b08      	cmp	r3, #8
 8002356:	d061      	beq.n	800241c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d146      	bne.n	80023ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002360:	4b33      	ldr	r3, [pc, #204]	@ (8002430 <HAL_RCC_OscConfig+0x4cc>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7ff faab 	bl	80018c0 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236e:	f7ff faa7 	bl	80018c0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e06d      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002380:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002394:	d108      	bne.n	80023a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002396:	4b24      	ldr	r3, [pc, #144]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4921      	ldr	r1, [pc, #132]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a19      	ldr	r1, [r3, #32]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	430b      	orrs	r3, r1
 80023ba:	491b      	ldr	r1, [pc, #108]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <HAL_RCC_OscConfig+0x4cc>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7ff fa7b 	bl	80018c0 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7ff fa77 	bl	80018c0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e03d      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x46a>
 80023ec:	e035      	b.n	800245a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <HAL_RCC_OscConfig+0x4cc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff fa64 	bl	80018c0 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7ff fa60 	bl	80018c0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e026      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x498>
 800241a:	e01e      	b.n	800245a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e019      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
 8002428:	40021000 	.word	0x40021000
 800242c:	40007000 	.word	0x40007000
 8002430:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_RCC_OscConfig+0x500>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	429a      	cmp	r2, r3
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000

08002468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0d0      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b6a      	ldr	r3, [pc, #424]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d910      	bls.n	80024ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b67      	ldr	r3, [pc, #412]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4965      	ldr	r1, [pc, #404]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b63      	ldr	r3, [pc, #396]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0b8      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c4:	4b59      	ldr	r3, [pc, #356]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a58      	ldr	r2, [pc, #352]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024dc:	4b53      	ldr	r3, [pc, #332]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4a52      	ldr	r2, [pc, #328]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	4b50      	ldr	r3, [pc, #320]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	494d      	ldr	r1, [pc, #308]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d040      	beq.n	8002588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b47      	ldr	r3, [pc, #284]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d115      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e07f      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	4b41      	ldr	r3, [pc, #260]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e073      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002536:	4b3d      	ldr	r3, [pc, #244]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06b      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002546:	4b39      	ldr	r3, [pc, #228]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f023 0203 	bic.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4936      	ldr	r1, [pc, #216]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002558:	f7ff f9b2 	bl	80018c0 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	e00a      	b.n	8002576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7ff f9ae 	bl	80018c0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e053      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	4b2d      	ldr	r3, [pc, #180]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 020c 	and.w	r2, r3, #12
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	429a      	cmp	r2, r3
 8002586:	d1eb      	bne.n	8002560 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002588:	4b27      	ldr	r3, [pc, #156]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d210      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0207 	bic.w	r2, r3, #7
 800259e:	4922      	ldr	r1, [pc, #136]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b20      	ldr	r3, [pc, #128]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e032      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4916      	ldr	r1, [pc, #88]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e2:	4b12      	ldr	r3, [pc, #72]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	490e      	ldr	r1, [pc, #56]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025f6:	f000 f821 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	490a      	ldr	r1, [pc, #40]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	5ccb      	ldrb	r3, [r1, r3]
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	4a09      	ldr	r2, [pc, #36]	@ (8002634 <HAL_RCC_ClockConfig+0x1cc>)
 8002610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_RCC_ClockConfig+0x1d0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f910 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000
 800262c:	40021000 	.word	0x40021000
 8002630:	080054e0 	.word	0x080054e0
 8002634:	20000000 	.word	0x20000000
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002656:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d002      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x30>
 8002666:	2b08      	cmp	r3, #8
 8002668:	d003      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x36>
 800266a:	e027      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800266c:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800266e:	613b      	str	r3, [r7, #16]
      break;
 8002670:	e027      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	0c9b      	lsrs	r3, r3, #18
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	4a17      	ldr	r2, [pc, #92]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268a:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0c5b      	lsrs	r3, r3, #17
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	4a11      	ldr	r2, [pc, #68]	@ (80026dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800269e:	fb03 f202 	mul.w	r2, r3, r2
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e004      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026b0:	fb02 f303 	mul.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	613b      	str	r3, [r7, #16]
      break;
 80026ba:	e002      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026be:	613b      	str	r3, [r7, #16]
      break;
 80026c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c2:	693b      	ldr	r3, [r7, #16]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	007a1200 	.word	0x007a1200
 80026d8:	080054f8 	.word	0x080054f8
 80026dc:	08005508 	.word	0x08005508
 80026e0:	003d0900 	.word	0x003d0900

080026e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e8:	4b02      	ldr	r3, [pc, #8]	@ (80026f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	20000000 	.word	0x20000000

080026f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026fc:	f7ff fff2 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	@ (800271c <HAL_RCC_GetPCLK1Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	080054f0 	.word	0x080054f0

08002720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002724:	f7ff ffde 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	0adb      	lsrs	r3, r3, #11
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4903      	ldr	r1, [pc, #12]	@ (8002744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	080054f0 	.word	0x080054f0

08002748 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002750:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <RCC_Delay+0x34>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <RCC_Delay+0x38>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0a5b      	lsrs	r3, r3, #9
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002764:	bf00      	nop
  }
  while (Delay --);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1e5a      	subs	r2, r3, #1
 800276a:	60fa      	str	r2, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f9      	bne.n	8002764 <RCC_Delay+0x1c>
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	20000000 	.word	0x20000000
 8002780:	10624dd3 	.word	0x10624dd3

08002784 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e042      	b.n	800281c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe fecc 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2224      	movs	r2, #36	@ 0x24
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f91d 	bl	8002a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	@ 0x28
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b20      	cmp	r3, #32
 8002842:	d16d      	bne.n	8002920 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_UART_Transmit+0x2c>
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e066      	b.n	8002922 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2221      	movs	r2, #33	@ 0x21
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002862:	f7ff f82d 	bl	80018c0 <HAL_GetTick>
 8002866:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	88fa      	ldrh	r2, [r7, #6]
 8002872:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800287c:	d108      	bne.n	8002890 <HAL_UART_Transmit+0x6c>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	e003      	b.n	8002898 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002898:	e02a      	b.n	80028f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2200      	movs	r2, #0
 80028a2:	2180      	movs	r1, #128	@ 0x80
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f840 	bl	800292a <UART_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e036      	b.n	8002922 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10b      	bne.n	80028d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	3302      	adds	r3, #2
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	e007      	b.n	80028e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	781a      	ldrb	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	3301      	adds	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1cf      	bne.n	800289a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2200      	movs	r2, #0
 8002902:	2140      	movs	r1, #64	@ 0x40
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f810 	bl	800292a <UART_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e006      	b.n	8002922 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	e000      	b.n	8002922 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b090      	sub	sp, #64	@ 0x40
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	4613      	mov	r3, r2
 8002938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800293a:	e050      	b.n	80029de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002942:	d04c      	beq.n	80029de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <UART_WaitOnFlagUntilTimeout+0x30>
 800294a:	f7fe ffb9 	bl	80018c0 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002956:	429a      	cmp	r2, r3
 8002958:	d241      	bcs.n	80029de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	330c      	adds	r3, #12
 8002960:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002970:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	330c      	adds	r3, #12
 8002978:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800297a:	637a      	str	r2, [r7, #52]	@ 0x34
 800297c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002980:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e5      	bne.n	800295a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3314      	adds	r3, #20
 8002994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	e853 3f00 	ldrex	r3, [r3]
 800299c:	613b      	str	r3, [r7, #16]
   return(result);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3314      	adds	r3, #20
 80029ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029ae:	623a      	str	r2, [r7, #32]
 80029b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b2:	69f9      	ldr	r1, [r7, #28]
 80029b4:	6a3a      	ldr	r2, [r7, #32]
 80029b6:	e841 2300 	strex	r3, r2, [r1]
 80029ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e5      	bne.n	800298e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e00f      	b.n	80029fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4013      	ands	r3, r2
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	bf0c      	ite	eq
 80029ee:	2301      	moveq	r3, #1
 80029f0:	2300      	movne	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d09f      	beq.n	800293c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3740      	adds	r7, #64	@ 0x40
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a42:	f023 030c 	bic.w	r3, r3, #12
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002b1c <UART_SetConfig+0x114>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d103      	bne.n	8002a78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a70:	f7ff fe56 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	e002      	b.n	8002a7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a78:	f7ff fe3e 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
 8002a7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	009a      	lsls	r2, r3, #2
 8002a88:	441a      	add	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	4a22      	ldr	r2, [pc, #136]	@ (8002b20 <UART_SetConfig+0x118>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	0119      	lsls	r1, r3, #4
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009a      	lsls	r2, r3, #2
 8002aa8:	441a      	add	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <UART_SetConfig+0x118>)
 8002ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2064      	movs	r0, #100	@ 0x64
 8002abe:	fb00 f303 	mul.w	r3, r0, r3
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	3332      	adds	r3, #50	@ 0x32
 8002ac8:	4a15      	ldr	r2, [pc, #84]	@ (8002b20 <UART_SetConfig+0x118>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ad4:	4419      	add	r1, r3
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	009a      	lsls	r2, r3, #2
 8002ae0:	441a      	add	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aec:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <UART_SetConfig+0x118>)
 8002aee:	fba3 0302 	umull	r0, r3, r3, r2
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2064      	movs	r0, #100	@ 0x64
 8002af6:	fb00 f303 	mul.w	r3, r0, r3
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	3332      	adds	r3, #50	@ 0x32
 8002b00:	4a07      	ldr	r2, [pc, #28]	@ (8002b20 <UART_SetConfig+0x118>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	f003 020f 	and.w	r2, r3, #15
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	440a      	add	r2, r1
 8002b12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40013800 	.word	0x40013800
 8002b20:	51eb851f 	.word	0x51eb851f

08002b24 <__cvt>:
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	bfbb      	ittet	lt
 8002b2e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002b32:	461d      	movlt	r5, r3
 8002b34:	2300      	movge	r3, #0
 8002b36:	232d      	movlt	r3, #45	@ 0x2d
 8002b38:	b088      	sub	sp, #32
 8002b3a:	4614      	mov	r4, r2
 8002b3c:	bfb8      	it	lt
 8002b3e:	4614      	movlt	r4, r2
 8002b40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002b42:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002b44:	7013      	strb	r3, [r2, #0]
 8002b46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002b48:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002b4c:	f023 0820 	bic.w	r8, r3, #32
 8002b50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002b54:	d005      	beq.n	8002b62 <__cvt+0x3e>
 8002b56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002b5a:	d100      	bne.n	8002b5e <__cvt+0x3a>
 8002b5c:	3601      	adds	r6, #1
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e000      	b.n	8002b64 <__cvt+0x40>
 8002b62:	2303      	movs	r3, #3
 8002b64:	aa07      	add	r2, sp, #28
 8002b66:	9204      	str	r2, [sp, #16]
 8002b68:	aa06      	add	r2, sp, #24
 8002b6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002b6e:	e9cd 3600 	strd	r3, r6, [sp]
 8002b72:	4622      	mov	r2, r4
 8002b74:	462b      	mov	r3, r5
 8002b76:	f000 fe5f 	bl	8003838 <_dtoa_r>
 8002b7a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002b7e:	4607      	mov	r7, r0
 8002b80:	d119      	bne.n	8002bb6 <__cvt+0x92>
 8002b82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002b84:	07db      	lsls	r3, r3, #31
 8002b86:	d50e      	bpl.n	8002ba6 <__cvt+0x82>
 8002b88:	eb00 0906 	add.w	r9, r0, r6
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2300      	movs	r3, #0
 8002b90:	4620      	mov	r0, r4
 8002b92:	4629      	mov	r1, r5
 8002b94:	f7fd ff08 	bl	80009a8 <__aeabi_dcmpeq>
 8002b98:	b108      	cbz	r0, 8002b9e <__cvt+0x7a>
 8002b9a:	f8cd 901c 	str.w	r9, [sp, #28]
 8002b9e:	2230      	movs	r2, #48	@ 0x30
 8002ba0:	9b07      	ldr	r3, [sp, #28]
 8002ba2:	454b      	cmp	r3, r9
 8002ba4:	d31e      	bcc.n	8002be4 <__cvt+0xc0>
 8002ba6:	4638      	mov	r0, r7
 8002ba8:	9b07      	ldr	r3, [sp, #28]
 8002baa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002bac:	1bdb      	subs	r3, r3, r7
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	b008      	add	sp, #32
 8002bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002bba:	eb00 0906 	add.w	r9, r0, r6
 8002bbe:	d1e5      	bne.n	8002b8c <__cvt+0x68>
 8002bc0:	7803      	ldrb	r3, [r0, #0]
 8002bc2:	2b30      	cmp	r3, #48	@ 0x30
 8002bc4:	d10a      	bne.n	8002bdc <__cvt+0xb8>
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2300      	movs	r3, #0
 8002bca:	4620      	mov	r0, r4
 8002bcc:	4629      	mov	r1, r5
 8002bce:	f7fd feeb 	bl	80009a8 <__aeabi_dcmpeq>
 8002bd2:	b918      	cbnz	r0, 8002bdc <__cvt+0xb8>
 8002bd4:	f1c6 0601 	rsb	r6, r6, #1
 8002bd8:	f8ca 6000 	str.w	r6, [sl]
 8002bdc:	f8da 3000 	ldr.w	r3, [sl]
 8002be0:	4499      	add	r9, r3
 8002be2:	e7d3      	b.n	8002b8c <__cvt+0x68>
 8002be4:	1c59      	adds	r1, r3, #1
 8002be6:	9107      	str	r1, [sp, #28]
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e7d9      	b.n	8002ba0 <__cvt+0x7c>

08002bec <__exponent>:
 8002bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bee:	2900      	cmp	r1, #0
 8002bf0:	bfb6      	itet	lt
 8002bf2:	232d      	movlt	r3, #45	@ 0x2d
 8002bf4:	232b      	movge	r3, #43	@ 0x2b
 8002bf6:	4249      	neglt	r1, r1
 8002bf8:	2909      	cmp	r1, #9
 8002bfa:	7002      	strb	r2, [r0, #0]
 8002bfc:	7043      	strb	r3, [r0, #1]
 8002bfe:	dd29      	ble.n	8002c54 <__exponent+0x68>
 8002c00:	f10d 0307 	add.w	r3, sp, #7
 8002c04:	461d      	mov	r5, r3
 8002c06:	270a      	movs	r7, #10
 8002c08:	fbb1 f6f7 	udiv	r6, r1, r7
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	fb07 1416 	mls	r4, r7, r6, r1
 8002c12:	3430      	adds	r4, #48	@ 0x30
 8002c14:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002c18:	460c      	mov	r4, r1
 8002c1a:	2c63      	cmp	r4, #99	@ 0x63
 8002c1c:	4631      	mov	r1, r6
 8002c1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002c22:	dcf1      	bgt.n	8002c08 <__exponent+0x1c>
 8002c24:	3130      	adds	r1, #48	@ 0x30
 8002c26:	1e94      	subs	r4, r2, #2
 8002c28:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002c2c:	4623      	mov	r3, r4
 8002c2e:	1c41      	adds	r1, r0, #1
 8002c30:	42ab      	cmp	r3, r5
 8002c32:	d30a      	bcc.n	8002c4a <__exponent+0x5e>
 8002c34:	f10d 0309 	add.w	r3, sp, #9
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	42ac      	cmp	r4, r5
 8002c3c:	bf88      	it	hi
 8002c3e:	2300      	movhi	r3, #0
 8002c40:	3302      	adds	r3, #2
 8002c42:	4403      	add	r3, r0
 8002c44:	1a18      	subs	r0, r3, r0
 8002c46:	b003      	add	sp, #12
 8002c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c4a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002c4e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002c52:	e7ed      	b.n	8002c30 <__exponent+0x44>
 8002c54:	2330      	movs	r3, #48	@ 0x30
 8002c56:	3130      	adds	r1, #48	@ 0x30
 8002c58:	7083      	strb	r3, [r0, #2]
 8002c5a:	70c1      	strb	r1, [r0, #3]
 8002c5c:	1d03      	adds	r3, r0, #4
 8002c5e:	e7f1      	b.n	8002c44 <__exponent+0x58>

08002c60 <_printf_float>:
 8002c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c64:	b091      	sub	sp, #68	@ 0x44
 8002c66:	460c      	mov	r4, r1
 8002c68:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002c6c:	4616      	mov	r6, r2
 8002c6e:	461f      	mov	r7, r3
 8002c70:	4605      	mov	r5, r0
 8002c72:	f000 fcd3 	bl	800361c <_localeconv_r>
 8002c76:	6803      	ldr	r3, [r0, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	9308      	str	r3, [sp, #32]
 8002c7c:	f7fd fa68 	bl	8000150 <strlen>
 8002c80:	2300      	movs	r3, #0
 8002c82:	930e      	str	r3, [sp, #56]	@ 0x38
 8002c84:	f8d8 3000 	ldr.w	r3, [r8]
 8002c88:	9009      	str	r0, [sp, #36]	@ 0x24
 8002c8a:	3307      	adds	r3, #7
 8002c8c:	f023 0307 	bic.w	r3, r3, #7
 8002c90:	f103 0208 	add.w	r2, r3, #8
 8002c94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002c98:	f8d4 b000 	ldr.w	fp, [r4]
 8002c9c:	f8c8 2000 	str.w	r2, [r8]
 8002ca0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002ca4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002caa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002cae:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002cb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002cba:	4b9c      	ldr	r3, [pc, #624]	@ (8002f2c <_printf_float+0x2cc>)
 8002cbc:	f7fd fea6 	bl	8000a0c <__aeabi_dcmpun>
 8002cc0:	bb70      	cbnz	r0, 8002d20 <_printf_float+0xc0>
 8002cc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cca:	4b98      	ldr	r3, [pc, #608]	@ (8002f2c <_printf_float+0x2cc>)
 8002ccc:	f7fd fe80 	bl	80009d0 <__aeabi_dcmple>
 8002cd0:	bb30      	cbnz	r0, 8002d20 <_printf_float+0xc0>
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	4640      	mov	r0, r8
 8002cd8:	4649      	mov	r1, r9
 8002cda:	f7fd fe6f 	bl	80009bc <__aeabi_dcmplt>
 8002cde:	b110      	cbz	r0, 8002ce6 <_printf_float+0x86>
 8002ce0:	232d      	movs	r3, #45	@ 0x2d
 8002ce2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ce6:	4a92      	ldr	r2, [pc, #584]	@ (8002f30 <_printf_float+0x2d0>)
 8002ce8:	4b92      	ldr	r3, [pc, #584]	@ (8002f34 <_printf_float+0x2d4>)
 8002cea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002cee:	bf94      	ite	ls
 8002cf0:	4690      	movls	r8, r2
 8002cf2:	4698      	movhi	r8, r3
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	f04f 0900 	mov.w	r9, #0
 8002cfa:	6123      	str	r3, [r4, #16]
 8002cfc:	f02b 0304 	bic.w	r3, fp, #4
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	4633      	mov	r3, r6
 8002d04:	4621      	mov	r1, r4
 8002d06:	4628      	mov	r0, r5
 8002d08:	9700      	str	r7, [sp, #0]
 8002d0a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002d0c:	f000 f9d4 	bl	80030b8 <_printf_common>
 8002d10:	3001      	adds	r0, #1
 8002d12:	f040 8090 	bne.w	8002e36 <_printf_float+0x1d6>
 8002d16:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1a:	b011      	add	sp, #68	@ 0x44
 8002d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d20:	4642      	mov	r2, r8
 8002d22:	464b      	mov	r3, r9
 8002d24:	4640      	mov	r0, r8
 8002d26:	4649      	mov	r1, r9
 8002d28:	f7fd fe70 	bl	8000a0c <__aeabi_dcmpun>
 8002d2c:	b148      	cbz	r0, 8002d42 <_printf_float+0xe2>
 8002d2e:	464b      	mov	r3, r9
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bfb8      	it	lt
 8002d34:	232d      	movlt	r3, #45	@ 0x2d
 8002d36:	4a80      	ldr	r2, [pc, #512]	@ (8002f38 <_printf_float+0x2d8>)
 8002d38:	bfb8      	it	lt
 8002d3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f3c <_printf_float+0x2dc>)
 8002d40:	e7d3      	b.n	8002cea <_printf_float+0x8a>
 8002d42:	6863      	ldr	r3, [r4, #4]
 8002d44:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	d13f      	bne.n	8002dcc <_printf_float+0x16c>
 8002d4c:	2306      	movs	r3, #6
 8002d4e:	6063      	str	r3, [r4, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002d56:	6023      	str	r3, [r4, #0]
 8002d58:	9206      	str	r2, [sp, #24]
 8002d5a:	aa0e      	add	r2, sp, #56	@ 0x38
 8002d5c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002d60:	aa0d      	add	r2, sp, #52	@ 0x34
 8002d62:	9203      	str	r2, [sp, #12]
 8002d64:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002d68:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d6c:	6863      	ldr	r3, [r4, #4]
 8002d6e:	4642      	mov	r2, r8
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	4628      	mov	r0, r5
 8002d74:	464b      	mov	r3, r9
 8002d76:	910a      	str	r1, [sp, #40]	@ 0x28
 8002d78:	f7ff fed4 	bl	8002b24 <__cvt>
 8002d7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002d7e:	4680      	mov	r8, r0
 8002d80:	2947      	cmp	r1, #71	@ 0x47
 8002d82:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002d84:	d128      	bne.n	8002dd8 <_printf_float+0x178>
 8002d86:	1cc8      	adds	r0, r1, #3
 8002d88:	db02      	blt.n	8002d90 <_printf_float+0x130>
 8002d8a:	6863      	ldr	r3, [r4, #4]
 8002d8c:	4299      	cmp	r1, r3
 8002d8e:	dd40      	ble.n	8002e12 <_printf_float+0x1b2>
 8002d90:	f1aa 0a02 	sub.w	sl, sl, #2
 8002d94:	fa5f fa8a 	uxtb.w	sl, sl
 8002d98:	4652      	mov	r2, sl
 8002d9a:	3901      	subs	r1, #1
 8002d9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002da0:	910d      	str	r1, [sp, #52]	@ 0x34
 8002da2:	f7ff ff23 	bl	8002bec <__exponent>
 8002da6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002da8:	4681      	mov	r9, r0
 8002daa:	1813      	adds	r3, r2, r0
 8002dac:	2a01      	cmp	r2, #1
 8002dae:	6123      	str	r3, [r4, #16]
 8002db0:	dc02      	bgt.n	8002db8 <_printf_float+0x158>
 8002db2:	6822      	ldr	r2, [r4, #0]
 8002db4:	07d2      	lsls	r2, r2, #31
 8002db6:	d501      	bpl.n	8002dbc <_printf_float+0x15c>
 8002db8:	3301      	adds	r3, #1
 8002dba:	6123      	str	r3, [r4, #16]
 8002dbc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d09e      	beq.n	8002d02 <_printf_float+0xa2>
 8002dc4:	232d      	movs	r3, #45	@ 0x2d
 8002dc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002dca:	e79a      	b.n	8002d02 <_printf_float+0xa2>
 8002dcc:	2947      	cmp	r1, #71	@ 0x47
 8002dce:	d1bf      	bne.n	8002d50 <_printf_float+0xf0>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1bd      	bne.n	8002d50 <_printf_float+0xf0>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e7ba      	b.n	8002d4e <_printf_float+0xee>
 8002dd8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002ddc:	d9dc      	bls.n	8002d98 <_printf_float+0x138>
 8002dde:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002de2:	d118      	bne.n	8002e16 <_printf_float+0x1b6>
 8002de4:	2900      	cmp	r1, #0
 8002de6:	6863      	ldr	r3, [r4, #4]
 8002de8:	dd0b      	ble.n	8002e02 <_printf_float+0x1a2>
 8002dea:	6121      	str	r1, [r4, #16]
 8002dec:	b913      	cbnz	r3, 8002df4 <_printf_float+0x194>
 8002dee:	6822      	ldr	r2, [r4, #0]
 8002df0:	07d0      	lsls	r0, r2, #31
 8002df2:	d502      	bpl.n	8002dfa <_printf_float+0x19a>
 8002df4:	3301      	adds	r3, #1
 8002df6:	440b      	add	r3, r1
 8002df8:	6123      	str	r3, [r4, #16]
 8002dfa:	f04f 0900 	mov.w	r9, #0
 8002dfe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002e00:	e7dc      	b.n	8002dbc <_printf_float+0x15c>
 8002e02:	b913      	cbnz	r3, 8002e0a <_printf_float+0x1aa>
 8002e04:	6822      	ldr	r2, [r4, #0]
 8002e06:	07d2      	lsls	r2, r2, #31
 8002e08:	d501      	bpl.n	8002e0e <_printf_float+0x1ae>
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	e7f4      	b.n	8002df8 <_printf_float+0x198>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e7f2      	b.n	8002df8 <_printf_float+0x198>
 8002e12:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002e16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002e18:	4299      	cmp	r1, r3
 8002e1a:	db05      	blt.n	8002e28 <_printf_float+0x1c8>
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	6121      	str	r1, [r4, #16]
 8002e20:	07d8      	lsls	r0, r3, #31
 8002e22:	d5ea      	bpl.n	8002dfa <_printf_float+0x19a>
 8002e24:	1c4b      	adds	r3, r1, #1
 8002e26:	e7e7      	b.n	8002df8 <_printf_float+0x198>
 8002e28:	2900      	cmp	r1, #0
 8002e2a:	bfcc      	ite	gt
 8002e2c:	2201      	movgt	r2, #1
 8002e2e:	f1c1 0202 	rsble	r2, r1, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	e7e0      	b.n	8002df8 <_printf_float+0x198>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	055a      	lsls	r2, r3, #21
 8002e3a:	d407      	bmi.n	8002e4c <_printf_float+0x1ec>
 8002e3c:	6923      	ldr	r3, [r4, #16]
 8002e3e:	4642      	mov	r2, r8
 8002e40:	4631      	mov	r1, r6
 8002e42:	4628      	mov	r0, r5
 8002e44:	47b8      	blx	r7
 8002e46:	3001      	adds	r0, #1
 8002e48:	d12b      	bne.n	8002ea2 <_printf_float+0x242>
 8002e4a:	e764      	b.n	8002d16 <_printf_float+0xb6>
 8002e4c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002e50:	f240 80dc 	bls.w	800300c <_printf_float+0x3ac>
 8002e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f7fd fda4 	bl	80009a8 <__aeabi_dcmpeq>
 8002e60:	2800      	cmp	r0, #0
 8002e62:	d033      	beq.n	8002ecc <_printf_float+0x26c>
 8002e64:	2301      	movs	r3, #1
 8002e66:	4631      	mov	r1, r6
 8002e68:	4628      	mov	r0, r5
 8002e6a:	4a35      	ldr	r2, [pc, #212]	@ (8002f40 <_printf_float+0x2e0>)
 8002e6c:	47b8      	blx	r7
 8002e6e:	3001      	adds	r0, #1
 8002e70:	f43f af51 	beq.w	8002d16 <_printf_float+0xb6>
 8002e74:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002e78:	4543      	cmp	r3, r8
 8002e7a:	db02      	blt.n	8002e82 <_printf_float+0x222>
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	07d8      	lsls	r0, r3, #31
 8002e80:	d50f      	bpl.n	8002ea2 <_printf_float+0x242>
 8002e82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002e86:	4631      	mov	r1, r6
 8002e88:	4628      	mov	r0, r5
 8002e8a:	47b8      	blx	r7
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	f43f af42 	beq.w	8002d16 <_printf_float+0xb6>
 8002e92:	f04f 0900 	mov.w	r9, #0
 8002e96:	f108 38ff 	add.w	r8, r8, #4294967295
 8002e9a:	f104 0a1a 	add.w	sl, r4, #26
 8002e9e:	45c8      	cmp	r8, r9
 8002ea0:	dc09      	bgt.n	8002eb6 <_printf_float+0x256>
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	079b      	lsls	r3, r3, #30
 8002ea6:	f100 8102 	bmi.w	80030ae <_printf_float+0x44e>
 8002eaa:	68e0      	ldr	r0, [r4, #12]
 8002eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002eae:	4298      	cmp	r0, r3
 8002eb0:	bfb8      	it	lt
 8002eb2:	4618      	movlt	r0, r3
 8002eb4:	e731      	b.n	8002d1a <_printf_float+0xba>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	4652      	mov	r2, sl
 8002eba:	4631      	mov	r1, r6
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	47b8      	blx	r7
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	f43f af28 	beq.w	8002d16 <_printf_float+0xb6>
 8002ec6:	f109 0901 	add.w	r9, r9, #1
 8002eca:	e7e8      	b.n	8002e9e <_printf_float+0x23e>
 8002ecc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dc38      	bgt.n	8002f44 <_printf_float+0x2e4>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	4631      	mov	r1, r6
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	4a19      	ldr	r2, [pc, #100]	@ (8002f40 <_printf_float+0x2e0>)
 8002eda:	47b8      	blx	r7
 8002edc:	3001      	adds	r0, #1
 8002ede:	f43f af1a 	beq.w	8002d16 <_printf_float+0xb6>
 8002ee2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002ee6:	ea59 0303 	orrs.w	r3, r9, r3
 8002eea:	d102      	bne.n	8002ef2 <_printf_float+0x292>
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	07d9      	lsls	r1, r3, #31
 8002ef0:	d5d7      	bpl.n	8002ea2 <_printf_float+0x242>
 8002ef2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ef6:	4631      	mov	r1, r6
 8002ef8:	4628      	mov	r0, r5
 8002efa:	47b8      	blx	r7
 8002efc:	3001      	adds	r0, #1
 8002efe:	f43f af0a 	beq.w	8002d16 <_printf_float+0xb6>
 8002f02:	f04f 0a00 	mov.w	sl, #0
 8002f06:	f104 0b1a 	add.w	fp, r4, #26
 8002f0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002f0c:	425b      	negs	r3, r3
 8002f0e:	4553      	cmp	r3, sl
 8002f10:	dc01      	bgt.n	8002f16 <_printf_float+0x2b6>
 8002f12:	464b      	mov	r3, r9
 8002f14:	e793      	b.n	8002e3e <_printf_float+0x1de>
 8002f16:	2301      	movs	r3, #1
 8002f18:	465a      	mov	r2, fp
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	47b8      	blx	r7
 8002f20:	3001      	adds	r0, #1
 8002f22:	f43f aef8 	beq.w	8002d16 <_printf_float+0xb6>
 8002f26:	f10a 0a01 	add.w	sl, sl, #1
 8002f2a:	e7ee      	b.n	8002f0a <_printf_float+0x2aa>
 8002f2c:	7fefffff 	.word	0x7fefffff
 8002f30:	0800550a 	.word	0x0800550a
 8002f34:	0800550e 	.word	0x0800550e
 8002f38:	08005512 	.word	0x08005512
 8002f3c:	08005516 	.word	0x08005516
 8002f40:	0800551a 	.word	0x0800551a
 8002f44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f46:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002f4a:	4553      	cmp	r3, sl
 8002f4c:	bfa8      	it	ge
 8002f4e:	4653      	movge	r3, sl
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	4699      	mov	r9, r3
 8002f54:	dc36      	bgt.n	8002fc4 <_printf_float+0x364>
 8002f56:	f04f 0b00 	mov.w	fp, #0
 8002f5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f5e:	f104 021a 	add.w	r2, r4, #26
 8002f62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f64:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f66:	eba3 0309 	sub.w	r3, r3, r9
 8002f6a:	455b      	cmp	r3, fp
 8002f6c:	dc31      	bgt.n	8002fd2 <_printf_float+0x372>
 8002f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002f70:	459a      	cmp	sl, r3
 8002f72:	dc3a      	bgt.n	8002fea <_printf_float+0x38a>
 8002f74:	6823      	ldr	r3, [r4, #0]
 8002f76:	07da      	lsls	r2, r3, #31
 8002f78:	d437      	bmi.n	8002fea <_printf_float+0x38a>
 8002f7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002f7c:	ebaa 0903 	sub.w	r9, sl, r3
 8002f80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f82:	ebaa 0303 	sub.w	r3, sl, r3
 8002f86:	4599      	cmp	r9, r3
 8002f88:	bfa8      	it	ge
 8002f8a:	4699      	movge	r9, r3
 8002f8c:	f1b9 0f00 	cmp.w	r9, #0
 8002f90:	dc33      	bgt.n	8002ffa <_printf_float+0x39a>
 8002f92:	f04f 0800 	mov.w	r8, #0
 8002f96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f9a:	f104 0b1a 	add.w	fp, r4, #26
 8002f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002fa0:	ebaa 0303 	sub.w	r3, sl, r3
 8002fa4:	eba3 0309 	sub.w	r3, r3, r9
 8002fa8:	4543      	cmp	r3, r8
 8002faa:	f77f af7a 	ble.w	8002ea2 <_printf_float+0x242>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	465a      	mov	r2, fp
 8002fb2:	4631      	mov	r1, r6
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	47b8      	blx	r7
 8002fb8:	3001      	adds	r0, #1
 8002fba:	f43f aeac 	beq.w	8002d16 <_printf_float+0xb6>
 8002fbe:	f108 0801 	add.w	r8, r8, #1
 8002fc2:	e7ec      	b.n	8002f9e <_printf_float+0x33e>
 8002fc4:	4642      	mov	r2, r8
 8002fc6:	4631      	mov	r1, r6
 8002fc8:	4628      	mov	r0, r5
 8002fca:	47b8      	blx	r7
 8002fcc:	3001      	adds	r0, #1
 8002fce:	d1c2      	bne.n	8002f56 <_printf_float+0x2f6>
 8002fd0:	e6a1      	b.n	8002d16 <_printf_float+0xb6>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	4631      	mov	r1, r6
 8002fd6:	4628      	mov	r0, r5
 8002fd8:	920a      	str	r2, [sp, #40]	@ 0x28
 8002fda:	47b8      	blx	r7
 8002fdc:	3001      	adds	r0, #1
 8002fde:	f43f ae9a 	beq.w	8002d16 <_printf_float+0xb6>
 8002fe2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002fe4:	f10b 0b01 	add.w	fp, fp, #1
 8002fe8:	e7bb      	b.n	8002f62 <_printf_float+0x302>
 8002fea:	4631      	mov	r1, r6
 8002fec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	47b8      	blx	r7
 8002ff4:	3001      	adds	r0, #1
 8002ff6:	d1c0      	bne.n	8002f7a <_printf_float+0x31a>
 8002ff8:	e68d      	b.n	8002d16 <_printf_float+0xb6>
 8002ffa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002ffc:	464b      	mov	r3, r9
 8002ffe:	4631      	mov	r1, r6
 8003000:	4628      	mov	r0, r5
 8003002:	4442      	add	r2, r8
 8003004:	47b8      	blx	r7
 8003006:	3001      	adds	r0, #1
 8003008:	d1c3      	bne.n	8002f92 <_printf_float+0x332>
 800300a:	e684      	b.n	8002d16 <_printf_float+0xb6>
 800300c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003010:	f1ba 0f01 	cmp.w	sl, #1
 8003014:	dc01      	bgt.n	800301a <_printf_float+0x3ba>
 8003016:	07db      	lsls	r3, r3, #31
 8003018:	d536      	bpl.n	8003088 <_printf_float+0x428>
 800301a:	2301      	movs	r3, #1
 800301c:	4642      	mov	r2, r8
 800301e:	4631      	mov	r1, r6
 8003020:	4628      	mov	r0, r5
 8003022:	47b8      	blx	r7
 8003024:	3001      	adds	r0, #1
 8003026:	f43f ae76 	beq.w	8002d16 <_printf_float+0xb6>
 800302a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800302e:	4631      	mov	r1, r6
 8003030:	4628      	mov	r0, r5
 8003032:	47b8      	blx	r7
 8003034:	3001      	adds	r0, #1
 8003036:	f43f ae6e 	beq.w	8002d16 <_printf_float+0xb6>
 800303a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800303e:	2200      	movs	r2, #0
 8003040:	2300      	movs	r3, #0
 8003042:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003046:	f7fd fcaf 	bl	80009a8 <__aeabi_dcmpeq>
 800304a:	b9c0      	cbnz	r0, 800307e <_printf_float+0x41e>
 800304c:	4653      	mov	r3, sl
 800304e:	f108 0201 	add.w	r2, r8, #1
 8003052:	4631      	mov	r1, r6
 8003054:	4628      	mov	r0, r5
 8003056:	47b8      	blx	r7
 8003058:	3001      	adds	r0, #1
 800305a:	d10c      	bne.n	8003076 <_printf_float+0x416>
 800305c:	e65b      	b.n	8002d16 <_printf_float+0xb6>
 800305e:	2301      	movs	r3, #1
 8003060:	465a      	mov	r2, fp
 8003062:	4631      	mov	r1, r6
 8003064:	4628      	mov	r0, r5
 8003066:	47b8      	blx	r7
 8003068:	3001      	adds	r0, #1
 800306a:	f43f ae54 	beq.w	8002d16 <_printf_float+0xb6>
 800306e:	f108 0801 	add.w	r8, r8, #1
 8003072:	45d0      	cmp	r8, sl
 8003074:	dbf3      	blt.n	800305e <_printf_float+0x3fe>
 8003076:	464b      	mov	r3, r9
 8003078:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800307c:	e6e0      	b.n	8002e40 <_printf_float+0x1e0>
 800307e:	f04f 0800 	mov.w	r8, #0
 8003082:	f104 0b1a 	add.w	fp, r4, #26
 8003086:	e7f4      	b.n	8003072 <_printf_float+0x412>
 8003088:	2301      	movs	r3, #1
 800308a:	4642      	mov	r2, r8
 800308c:	e7e1      	b.n	8003052 <_printf_float+0x3f2>
 800308e:	2301      	movs	r3, #1
 8003090:	464a      	mov	r2, r9
 8003092:	4631      	mov	r1, r6
 8003094:	4628      	mov	r0, r5
 8003096:	47b8      	blx	r7
 8003098:	3001      	adds	r0, #1
 800309a:	f43f ae3c 	beq.w	8002d16 <_printf_float+0xb6>
 800309e:	f108 0801 	add.w	r8, r8, #1
 80030a2:	68e3      	ldr	r3, [r4, #12]
 80030a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80030a6:	1a5b      	subs	r3, r3, r1
 80030a8:	4543      	cmp	r3, r8
 80030aa:	dcf0      	bgt.n	800308e <_printf_float+0x42e>
 80030ac:	e6fd      	b.n	8002eaa <_printf_float+0x24a>
 80030ae:	f04f 0800 	mov.w	r8, #0
 80030b2:	f104 0919 	add.w	r9, r4, #25
 80030b6:	e7f4      	b.n	80030a2 <_printf_float+0x442>

080030b8 <_printf_common>:
 80030b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030bc:	4616      	mov	r6, r2
 80030be:	4698      	mov	r8, r3
 80030c0:	688a      	ldr	r2, [r1, #8]
 80030c2:	690b      	ldr	r3, [r1, #16]
 80030c4:	4607      	mov	r7, r0
 80030c6:	4293      	cmp	r3, r2
 80030c8:	bfb8      	it	lt
 80030ca:	4613      	movlt	r3, r2
 80030cc:	6033      	str	r3, [r6, #0]
 80030ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030d2:	460c      	mov	r4, r1
 80030d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030d8:	b10a      	cbz	r2, 80030de <_printf_common+0x26>
 80030da:	3301      	adds	r3, #1
 80030dc:	6033      	str	r3, [r6, #0]
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	0699      	lsls	r1, r3, #26
 80030e2:	bf42      	ittt	mi
 80030e4:	6833      	ldrmi	r3, [r6, #0]
 80030e6:	3302      	addmi	r3, #2
 80030e8:	6033      	strmi	r3, [r6, #0]
 80030ea:	6825      	ldr	r5, [r4, #0]
 80030ec:	f015 0506 	ands.w	r5, r5, #6
 80030f0:	d106      	bne.n	8003100 <_printf_common+0x48>
 80030f2:	f104 0a19 	add.w	sl, r4, #25
 80030f6:	68e3      	ldr	r3, [r4, #12]
 80030f8:	6832      	ldr	r2, [r6, #0]
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	42ab      	cmp	r3, r5
 80030fe:	dc2b      	bgt.n	8003158 <_printf_common+0xa0>
 8003100:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003104:	6822      	ldr	r2, [r4, #0]
 8003106:	3b00      	subs	r3, #0
 8003108:	bf18      	it	ne
 800310a:	2301      	movne	r3, #1
 800310c:	0692      	lsls	r2, r2, #26
 800310e:	d430      	bmi.n	8003172 <_printf_common+0xba>
 8003110:	4641      	mov	r1, r8
 8003112:	4638      	mov	r0, r7
 8003114:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003118:	47c8      	blx	r9
 800311a:	3001      	adds	r0, #1
 800311c:	d023      	beq.n	8003166 <_printf_common+0xae>
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	6922      	ldr	r2, [r4, #16]
 8003122:	f003 0306 	and.w	r3, r3, #6
 8003126:	2b04      	cmp	r3, #4
 8003128:	bf14      	ite	ne
 800312a:	2500      	movne	r5, #0
 800312c:	6833      	ldreq	r3, [r6, #0]
 800312e:	f04f 0600 	mov.w	r6, #0
 8003132:	bf08      	it	eq
 8003134:	68e5      	ldreq	r5, [r4, #12]
 8003136:	f104 041a 	add.w	r4, r4, #26
 800313a:	bf08      	it	eq
 800313c:	1aed      	subeq	r5, r5, r3
 800313e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003142:	bf08      	it	eq
 8003144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003148:	4293      	cmp	r3, r2
 800314a:	bfc4      	itt	gt
 800314c:	1a9b      	subgt	r3, r3, r2
 800314e:	18ed      	addgt	r5, r5, r3
 8003150:	42b5      	cmp	r5, r6
 8003152:	d11a      	bne.n	800318a <_printf_common+0xd2>
 8003154:	2000      	movs	r0, #0
 8003156:	e008      	b.n	800316a <_printf_common+0xb2>
 8003158:	2301      	movs	r3, #1
 800315a:	4652      	mov	r2, sl
 800315c:	4641      	mov	r1, r8
 800315e:	4638      	mov	r0, r7
 8003160:	47c8      	blx	r9
 8003162:	3001      	adds	r0, #1
 8003164:	d103      	bne.n	800316e <_printf_common+0xb6>
 8003166:	f04f 30ff 	mov.w	r0, #4294967295
 800316a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800316e:	3501      	adds	r5, #1
 8003170:	e7c1      	b.n	80030f6 <_printf_common+0x3e>
 8003172:	2030      	movs	r0, #48	@ 0x30
 8003174:	18e1      	adds	r1, r4, r3
 8003176:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003180:	4422      	add	r2, r4
 8003182:	3302      	adds	r3, #2
 8003184:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003188:	e7c2      	b.n	8003110 <_printf_common+0x58>
 800318a:	2301      	movs	r3, #1
 800318c:	4622      	mov	r2, r4
 800318e:	4641      	mov	r1, r8
 8003190:	4638      	mov	r0, r7
 8003192:	47c8      	blx	r9
 8003194:	3001      	adds	r0, #1
 8003196:	d0e6      	beq.n	8003166 <_printf_common+0xae>
 8003198:	3601      	adds	r6, #1
 800319a:	e7d9      	b.n	8003150 <_printf_common+0x98>

0800319c <_printf_i>:
 800319c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031a0:	7e0f      	ldrb	r7, [r1, #24]
 80031a2:	4691      	mov	r9, r2
 80031a4:	2f78      	cmp	r7, #120	@ 0x78
 80031a6:	4680      	mov	r8, r0
 80031a8:	460c      	mov	r4, r1
 80031aa:	469a      	mov	sl, r3
 80031ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80031ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80031b2:	d807      	bhi.n	80031c4 <_printf_i+0x28>
 80031b4:	2f62      	cmp	r7, #98	@ 0x62
 80031b6:	d80a      	bhi.n	80031ce <_printf_i+0x32>
 80031b8:	2f00      	cmp	r7, #0
 80031ba:	f000 80d3 	beq.w	8003364 <_printf_i+0x1c8>
 80031be:	2f58      	cmp	r7, #88	@ 0x58
 80031c0:	f000 80ba 	beq.w	8003338 <_printf_i+0x19c>
 80031c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80031cc:	e03a      	b.n	8003244 <_printf_i+0xa8>
 80031ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80031d2:	2b15      	cmp	r3, #21
 80031d4:	d8f6      	bhi.n	80031c4 <_printf_i+0x28>
 80031d6:	a101      	add	r1, pc, #4	@ (adr r1, 80031dc <_printf_i+0x40>)
 80031d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031dc:	08003235 	.word	0x08003235
 80031e0:	08003249 	.word	0x08003249
 80031e4:	080031c5 	.word	0x080031c5
 80031e8:	080031c5 	.word	0x080031c5
 80031ec:	080031c5 	.word	0x080031c5
 80031f0:	080031c5 	.word	0x080031c5
 80031f4:	08003249 	.word	0x08003249
 80031f8:	080031c5 	.word	0x080031c5
 80031fc:	080031c5 	.word	0x080031c5
 8003200:	080031c5 	.word	0x080031c5
 8003204:	080031c5 	.word	0x080031c5
 8003208:	0800334b 	.word	0x0800334b
 800320c:	08003273 	.word	0x08003273
 8003210:	08003305 	.word	0x08003305
 8003214:	080031c5 	.word	0x080031c5
 8003218:	080031c5 	.word	0x080031c5
 800321c:	0800336d 	.word	0x0800336d
 8003220:	080031c5 	.word	0x080031c5
 8003224:	08003273 	.word	0x08003273
 8003228:	080031c5 	.word	0x080031c5
 800322c:	080031c5 	.word	0x080031c5
 8003230:	0800330d 	.word	0x0800330d
 8003234:	6833      	ldr	r3, [r6, #0]
 8003236:	1d1a      	adds	r2, r3, #4
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6032      	str	r2, [r6, #0]
 800323c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003244:	2301      	movs	r3, #1
 8003246:	e09e      	b.n	8003386 <_printf_i+0x1ea>
 8003248:	6833      	ldr	r3, [r6, #0]
 800324a:	6820      	ldr	r0, [r4, #0]
 800324c:	1d19      	adds	r1, r3, #4
 800324e:	6031      	str	r1, [r6, #0]
 8003250:	0606      	lsls	r6, r0, #24
 8003252:	d501      	bpl.n	8003258 <_printf_i+0xbc>
 8003254:	681d      	ldr	r5, [r3, #0]
 8003256:	e003      	b.n	8003260 <_printf_i+0xc4>
 8003258:	0645      	lsls	r5, r0, #25
 800325a:	d5fb      	bpl.n	8003254 <_printf_i+0xb8>
 800325c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003260:	2d00      	cmp	r5, #0
 8003262:	da03      	bge.n	800326c <_printf_i+0xd0>
 8003264:	232d      	movs	r3, #45	@ 0x2d
 8003266:	426d      	negs	r5, r5
 8003268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800326c:	230a      	movs	r3, #10
 800326e:	4859      	ldr	r0, [pc, #356]	@ (80033d4 <_printf_i+0x238>)
 8003270:	e011      	b.n	8003296 <_printf_i+0xfa>
 8003272:	6821      	ldr	r1, [r4, #0]
 8003274:	6833      	ldr	r3, [r6, #0]
 8003276:	0608      	lsls	r0, r1, #24
 8003278:	f853 5b04 	ldr.w	r5, [r3], #4
 800327c:	d402      	bmi.n	8003284 <_printf_i+0xe8>
 800327e:	0649      	lsls	r1, r1, #25
 8003280:	bf48      	it	mi
 8003282:	b2ad      	uxthmi	r5, r5
 8003284:	2f6f      	cmp	r7, #111	@ 0x6f
 8003286:	6033      	str	r3, [r6, #0]
 8003288:	bf14      	ite	ne
 800328a:	230a      	movne	r3, #10
 800328c:	2308      	moveq	r3, #8
 800328e:	4851      	ldr	r0, [pc, #324]	@ (80033d4 <_printf_i+0x238>)
 8003290:	2100      	movs	r1, #0
 8003292:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003296:	6866      	ldr	r6, [r4, #4]
 8003298:	2e00      	cmp	r6, #0
 800329a:	bfa8      	it	ge
 800329c:	6821      	ldrge	r1, [r4, #0]
 800329e:	60a6      	str	r6, [r4, #8]
 80032a0:	bfa4      	itt	ge
 80032a2:	f021 0104 	bicge.w	r1, r1, #4
 80032a6:	6021      	strge	r1, [r4, #0]
 80032a8:	b90d      	cbnz	r5, 80032ae <_printf_i+0x112>
 80032aa:	2e00      	cmp	r6, #0
 80032ac:	d04b      	beq.n	8003346 <_printf_i+0x1aa>
 80032ae:	4616      	mov	r6, r2
 80032b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80032b4:	fb03 5711 	mls	r7, r3, r1, r5
 80032b8:	5dc7      	ldrb	r7, [r0, r7]
 80032ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032be:	462f      	mov	r7, r5
 80032c0:	42bb      	cmp	r3, r7
 80032c2:	460d      	mov	r5, r1
 80032c4:	d9f4      	bls.n	80032b0 <_printf_i+0x114>
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d10b      	bne.n	80032e2 <_printf_i+0x146>
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	07df      	lsls	r7, r3, #31
 80032ce:	d508      	bpl.n	80032e2 <_printf_i+0x146>
 80032d0:	6923      	ldr	r3, [r4, #16]
 80032d2:	6861      	ldr	r1, [r4, #4]
 80032d4:	4299      	cmp	r1, r3
 80032d6:	bfde      	ittt	le
 80032d8:	2330      	movle	r3, #48	@ 0x30
 80032da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032e2:	1b92      	subs	r2, r2, r6
 80032e4:	6122      	str	r2, [r4, #16]
 80032e6:	464b      	mov	r3, r9
 80032e8:	4621      	mov	r1, r4
 80032ea:	4640      	mov	r0, r8
 80032ec:	f8cd a000 	str.w	sl, [sp]
 80032f0:	aa03      	add	r2, sp, #12
 80032f2:	f7ff fee1 	bl	80030b8 <_printf_common>
 80032f6:	3001      	adds	r0, #1
 80032f8:	d14a      	bne.n	8003390 <_printf_i+0x1f4>
 80032fa:	f04f 30ff 	mov.w	r0, #4294967295
 80032fe:	b004      	add	sp, #16
 8003300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	f043 0320 	orr.w	r3, r3, #32
 800330a:	6023      	str	r3, [r4, #0]
 800330c:	2778      	movs	r7, #120	@ 0x78
 800330e:	4832      	ldr	r0, [pc, #200]	@ (80033d8 <_printf_i+0x23c>)
 8003310:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	6831      	ldr	r1, [r6, #0]
 8003318:	061f      	lsls	r7, r3, #24
 800331a:	f851 5b04 	ldr.w	r5, [r1], #4
 800331e:	d402      	bmi.n	8003326 <_printf_i+0x18a>
 8003320:	065f      	lsls	r7, r3, #25
 8003322:	bf48      	it	mi
 8003324:	b2ad      	uxthmi	r5, r5
 8003326:	6031      	str	r1, [r6, #0]
 8003328:	07d9      	lsls	r1, r3, #31
 800332a:	bf44      	itt	mi
 800332c:	f043 0320 	orrmi.w	r3, r3, #32
 8003330:	6023      	strmi	r3, [r4, #0]
 8003332:	b11d      	cbz	r5, 800333c <_printf_i+0x1a0>
 8003334:	2310      	movs	r3, #16
 8003336:	e7ab      	b.n	8003290 <_printf_i+0xf4>
 8003338:	4826      	ldr	r0, [pc, #152]	@ (80033d4 <_printf_i+0x238>)
 800333a:	e7e9      	b.n	8003310 <_printf_i+0x174>
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	f023 0320 	bic.w	r3, r3, #32
 8003342:	6023      	str	r3, [r4, #0]
 8003344:	e7f6      	b.n	8003334 <_printf_i+0x198>
 8003346:	4616      	mov	r6, r2
 8003348:	e7bd      	b.n	80032c6 <_printf_i+0x12a>
 800334a:	6833      	ldr	r3, [r6, #0]
 800334c:	6825      	ldr	r5, [r4, #0]
 800334e:	1d18      	adds	r0, r3, #4
 8003350:	6961      	ldr	r1, [r4, #20]
 8003352:	6030      	str	r0, [r6, #0]
 8003354:	062e      	lsls	r6, r5, #24
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	d501      	bpl.n	800335e <_printf_i+0x1c2>
 800335a:	6019      	str	r1, [r3, #0]
 800335c:	e002      	b.n	8003364 <_printf_i+0x1c8>
 800335e:	0668      	lsls	r0, r5, #25
 8003360:	d5fb      	bpl.n	800335a <_printf_i+0x1be>
 8003362:	8019      	strh	r1, [r3, #0]
 8003364:	2300      	movs	r3, #0
 8003366:	4616      	mov	r6, r2
 8003368:	6123      	str	r3, [r4, #16]
 800336a:	e7bc      	b.n	80032e6 <_printf_i+0x14a>
 800336c:	6833      	ldr	r3, [r6, #0]
 800336e:	2100      	movs	r1, #0
 8003370:	1d1a      	adds	r2, r3, #4
 8003372:	6032      	str	r2, [r6, #0]
 8003374:	681e      	ldr	r6, [r3, #0]
 8003376:	6862      	ldr	r2, [r4, #4]
 8003378:	4630      	mov	r0, r6
 800337a:	f000 f9c6 	bl	800370a <memchr>
 800337e:	b108      	cbz	r0, 8003384 <_printf_i+0x1e8>
 8003380:	1b80      	subs	r0, r0, r6
 8003382:	6060      	str	r0, [r4, #4]
 8003384:	6863      	ldr	r3, [r4, #4]
 8003386:	6123      	str	r3, [r4, #16]
 8003388:	2300      	movs	r3, #0
 800338a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800338e:	e7aa      	b.n	80032e6 <_printf_i+0x14a>
 8003390:	4632      	mov	r2, r6
 8003392:	4649      	mov	r1, r9
 8003394:	4640      	mov	r0, r8
 8003396:	6923      	ldr	r3, [r4, #16]
 8003398:	47d0      	blx	sl
 800339a:	3001      	adds	r0, #1
 800339c:	d0ad      	beq.n	80032fa <_printf_i+0x15e>
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	079b      	lsls	r3, r3, #30
 80033a2:	d413      	bmi.n	80033cc <_printf_i+0x230>
 80033a4:	68e0      	ldr	r0, [r4, #12]
 80033a6:	9b03      	ldr	r3, [sp, #12]
 80033a8:	4298      	cmp	r0, r3
 80033aa:	bfb8      	it	lt
 80033ac:	4618      	movlt	r0, r3
 80033ae:	e7a6      	b.n	80032fe <_printf_i+0x162>
 80033b0:	2301      	movs	r3, #1
 80033b2:	4632      	mov	r2, r6
 80033b4:	4649      	mov	r1, r9
 80033b6:	4640      	mov	r0, r8
 80033b8:	47d0      	blx	sl
 80033ba:	3001      	adds	r0, #1
 80033bc:	d09d      	beq.n	80032fa <_printf_i+0x15e>
 80033be:	3501      	adds	r5, #1
 80033c0:	68e3      	ldr	r3, [r4, #12]
 80033c2:	9903      	ldr	r1, [sp, #12]
 80033c4:	1a5b      	subs	r3, r3, r1
 80033c6:	42ab      	cmp	r3, r5
 80033c8:	dcf2      	bgt.n	80033b0 <_printf_i+0x214>
 80033ca:	e7eb      	b.n	80033a4 <_printf_i+0x208>
 80033cc:	2500      	movs	r5, #0
 80033ce:	f104 0619 	add.w	r6, r4, #25
 80033d2:	e7f5      	b.n	80033c0 <_printf_i+0x224>
 80033d4:	0800551c 	.word	0x0800551c
 80033d8:	0800552d 	.word	0x0800552d

080033dc <std>:
 80033dc:	2300      	movs	r3, #0
 80033de:	b510      	push	{r4, lr}
 80033e0:	4604      	mov	r4, r0
 80033e2:	e9c0 3300 	strd	r3, r3, [r0]
 80033e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033ea:	6083      	str	r3, [r0, #8]
 80033ec:	8181      	strh	r1, [r0, #12]
 80033ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80033f0:	81c2      	strh	r2, [r0, #14]
 80033f2:	6183      	str	r3, [r0, #24]
 80033f4:	4619      	mov	r1, r3
 80033f6:	2208      	movs	r2, #8
 80033f8:	305c      	adds	r0, #92	@ 0x5c
 80033fa:	f000 f906 	bl	800360a <memset>
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <std+0x58>)
 8003400:	6224      	str	r4, [r4, #32]
 8003402:	6263      	str	r3, [r4, #36]	@ 0x24
 8003404:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <std+0x5c>)
 8003406:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003408:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <std+0x60>)
 800340a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800340c:	4b0c      	ldr	r3, [pc, #48]	@ (8003440 <std+0x64>)
 800340e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003410:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <std+0x68>)
 8003412:	429c      	cmp	r4, r3
 8003414:	d006      	beq.n	8003424 <std+0x48>
 8003416:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800341a:	4294      	cmp	r4, r2
 800341c:	d002      	beq.n	8003424 <std+0x48>
 800341e:	33d0      	adds	r3, #208	@ 0xd0
 8003420:	429c      	cmp	r4, r3
 8003422:	d105      	bne.n	8003430 <std+0x54>
 8003424:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800342c:	f000 b96a 	b.w	8003704 <__retarget_lock_init_recursive>
 8003430:	bd10      	pop	{r4, pc}
 8003432:	bf00      	nop
 8003434:	08003585 	.word	0x08003585
 8003438:	080035a7 	.word	0x080035a7
 800343c:	080035df 	.word	0x080035df
 8003440:	08003603 	.word	0x08003603
 8003444:	20000240 	.word	0x20000240

08003448 <stdio_exit_handler>:
 8003448:	4a02      	ldr	r2, [pc, #8]	@ (8003454 <stdio_exit_handler+0xc>)
 800344a:	4903      	ldr	r1, [pc, #12]	@ (8003458 <stdio_exit_handler+0x10>)
 800344c:	4803      	ldr	r0, [pc, #12]	@ (800345c <stdio_exit_handler+0x14>)
 800344e:	f000 b869 	b.w	8003524 <_fwalk_sglue>
 8003452:	bf00      	nop
 8003454:	2000000c 	.word	0x2000000c
 8003458:	08005045 	.word	0x08005045
 800345c:	2000001c 	.word	0x2000001c

08003460 <cleanup_stdio>:
 8003460:	6841      	ldr	r1, [r0, #4]
 8003462:	4b0c      	ldr	r3, [pc, #48]	@ (8003494 <cleanup_stdio+0x34>)
 8003464:	b510      	push	{r4, lr}
 8003466:	4299      	cmp	r1, r3
 8003468:	4604      	mov	r4, r0
 800346a:	d001      	beq.n	8003470 <cleanup_stdio+0x10>
 800346c:	f001 fdea 	bl	8005044 <_fflush_r>
 8003470:	68a1      	ldr	r1, [r4, #8]
 8003472:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <cleanup_stdio+0x38>)
 8003474:	4299      	cmp	r1, r3
 8003476:	d002      	beq.n	800347e <cleanup_stdio+0x1e>
 8003478:	4620      	mov	r0, r4
 800347a:	f001 fde3 	bl	8005044 <_fflush_r>
 800347e:	68e1      	ldr	r1, [r4, #12]
 8003480:	4b06      	ldr	r3, [pc, #24]	@ (800349c <cleanup_stdio+0x3c>)
 8003482:	4299      	cmp	r1, r3
 8003484:	d004      	beq.n	8003490 <cleanup_stdio+0x30>
 8003486:	4620      	mov	r0, r4
 8003488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800348c:	f001 bdda 	b.w	8005044 <_fflush_r>
 8003490:	bd10      	pop	{r4, pc}
 8003492:	bf00      	nop
 8003494:	20000240 	.word	0x20000240
 8003498:	200002a8 	.word	0x200002a8
 800349c:	20000310 	.word	0x20000310

080034a0 <global_stdio_init.part.0>:
 80034a0:	b510      	push	{r4, lr}
 80034a2:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <global_stdio_init.part.0+0x30>)
 80034a4:	4c0b      	ldr	r4, [pc, #44]	@ (80034d4 <global_stdio_init.part.0+0x34>)
 80034a6:	4a0c      	ldr	r2, [pc, #48]	@ (80034d8 <global_stdio_init.part.0+0x38>)
 80034a8:	4620      	mov	r0, r4
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	2104      	movs	r1, #4
 80034ae:	2200      	movs	r2, #0
 80034b0:	f7ff ff94 	bl	80033dc <std>
 80034b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80034b8:	2201      	movs	r2, #1
 80034ba:	2109      	movs	r1, #9
 80034bc:	f7ff ff8e 	bl	80033dc <std>
 80034c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80034c4:	2202      	movs	r2, #2
 80034c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ca:	2112      	movs	r1, #18
 80034cc:	f7ff bf86 	b.w	80033dc <std>
 80034d0:	20000378 	.word	0x20000378
 80034d4:	20000240 	.word	0x20000240
 80034d8:	08003449 	.word	0x08003449

080034dc <__sfp_lock_acquire>:
 80034dc:	4801      	ldr	r0, [pc, #4]	@ (80034e4 <__sfp_lock_acquire+0x8>)
 80034de:	f000 b912 	b.w	8003706 <__retarget_lock_acquire_recursive>
 80034e2:	bf00      	nop
 80034e4:	20000381 	.word	0x20000381

080034e8 <__sfp_lock_release>:
 80034e8:	4801      	ldr	r0, [pc, #4]	@ (80034f0 <__sfp_lock_release+0x8>)
 80034ea:	f000 b90d 	b.w	8003708 <__retarget_lock_release_recursive>
 80034ee:	bf00      	nop
 80034f0:	20000381 	.word	0x20000381

080034f4 <__sinit>:
 80034f4:	b510      	push	{r4, lr}
 80034f6:	4604      	mov	r4, r0
 80034f8:	f7ff fff0 	bl	80034dc <__sfp_lock_acquire>
 80034fc:	6a23      	ldr	r3, [r4, #32]
 80034fe:	b11b      	cbz	r3, 8003508 <__sinit+0x14>
 8003500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003504:	f7ff bff0 	b.w	80034e8 <__sfp_lock_release>
 8003508:	4b04      	ldr	r3, [pc, #16]	@ (800351c <__sinit+0x28>)
 800350a:	6223      	str	r3, [r4, #32]
 800350c:	4b04      	ldr	r3, [pc, #16]	@ (8003520 <__sinit+0x2c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f5      	bne.n	8003500 <__sinit+0xc>
 8003514:	f7ff ffc4 	bl	80034a0 <global_stdio_init.part.0>
 8003518:	e7f2      	b.n	8003500 <__sinit+0xc>
 800351a:	bf00      	nop
 800351c:	08003461 	.word	0x08003461
 8003520:	20000378 	.word	0x20000378

08003524 <_fwalk_sglue>:
 8003524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003528:	4607      	mov	r7, r0
 800352a:	4688      	mov	r8, r1
 800352c:	4614      	mov	r4, r2
 800352e:	2600      	movs	r6, #0
 8003530:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003534:	f1b9 0901 	subs.w	r9, r9, #1
 8003538:	d505      	bpl.n	8003546 <_fwalk_sglue+0x22>
 800353a:	6824      	ldr	r4, [r4, #0]
 800353c:	2c00      	cmp	r4, #0
 800353e:	d1f7      	bne.n	8003530 <_fwalk_sglue+0xc>
 8003540:	4630      	mov	r0, r6
 8003542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003546:	89ab      	ldrh	r3, [r5, #12]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d907      	bls.n	800355c <_fwalk_sglue+0x38>
 800354c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003550:	3301      	adds	r3, #1
 8003552:	d003      	beq.n	800355c <_fwalk_sglue+0x38>
 8003554:	4629      	mov	r1, r5
 8003556:	4638      	mov	r0, r7
 8003558:	47c0      	blx	r8
 800355a:	4306      	orrs	r6, r0
 800355c:	3568      	adds	r5, #104	@ 0x68
 800355e:	e7e9      	b.n	8003534 <_fwalk_sglue+0x10>

08003560 <iprintf>:
 8003560:	b40f      	push	{r0, r1, r2, r3}
 8003562:	b507      	push	{r0, r1, r2, lr}
 8003564:	4906      	ldr	r1, [pc, #24]	@ (8003580 <iprintf+0x20>)
 8003566:	ab04      	add	r3, sp, #16
 8003568:	6808      	ldr	r0, [r1, #0]
 800356a:	f853 2b04 	ldr.w	r2, [r3], #4
 800356e:	6881      	ldr	r1, [r0, #8]
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	f001 fbcf 	bl	8004d14 <_vfiprintf_r>
 8003576:	b003      	add	sp, #12
 8003578:	f85d eb04 	ldr.w	lr, [sp], #4
 800357c:	b004      	add	sp, #16
 800357e:	4770      	bx	lr
 8003580:	20000018 	.word	0x20000018

08003584 <__sread>:
 8003584:	b510      	push	{r4, lr}
 8003586:	460c      	mov	r4, r1
 8003588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358c:	f000 f86c 	bl	8003668 <_read_r>
 8003590:	2800      	cmp	r0, #0
 8003592:	bfab      	itete	ge
 8003594:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003596:	89a3      	ldrhlt	r3, [r4, #12]
 8003598:	181b      	addge	r3, r3, r0
 800359a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800359e:	bfac      	ite	ge
 80035a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80035a2:	81a3      	strhlt	r3, [r4, #12]
 80035a4:	bd10      	pop	{r4, pc}

080035a6 <__swrite>:
 80035a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035aa:	461f      	mov	r7, r3
 80035ac:	898b      	ldrh	r3, [r1, #12]
 80035ae:	4605      	mov	r5, r0
 80035b0:	05db      	lsls	r3, r3, #23
 80035b2:	460c      	mov	r4, r1
 80035b4:	4616      	mov	r6, r2
 80035b6:	d505      	bpl.n	80035c4 <__swrite+0x1e>
 80035b8:	2302      	movs	r3, #2
 80035ba:	2200      	movs	r2, #0
 80035bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c0:	f000 f840 	bl	8003644 <_lseek_r>
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	4632      	mov	r2, r6
 80035c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035cc:	81a3      	strh	r3, [r4, #12]
 80035ce:	4628      	mov	r0, r5
 80035d0:	463b      	mov	r3, r7
 80035d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035da:	f000 b857 	b.w	800368c <_write_r>

080035de <__sseek>:
 80035de:	b510      	push	{r4, lr}
 80035e0:	460c      	mov	r4, r1
 80035e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e6:	f000 f82d 	bl	8003644 <_lseek_r>
 80035ea:	1c43      	adds	r3, r0, #1
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	bf15      	itete	ne
 80035f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80035f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80035f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80035fa:	81a3      	strheq	r3, [r4, #12]
 80035fc:	bf18      	it	ne
 80035fe:	81a3      	strhne	r3, [r4, #12]
 8003600:	bd10      	pop	{r4, pc}

08003602 <__sclose>:
 8003602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003606:	f000 b80d 	b.w	8003624 <_close_r>

0800360a <memset>:
 800360a:	4603      	mov	r3, r0
 800360c:	4402      	add	r2, r0
 800360e:	4293      	cmp	r3, r2
 8003610:	d100      	bne.n	8003614 <memset+0xa>
 8003612:	4770      	bx	lr
 8003614:	f803 1b01 	strb.w	r1, [r3], #1
 8003618:	e7f9      	b.n	800360e <memset+0x4>
	...

0800361c <_localeconv_r>:
 800361c:	4800      	ldr	r0, [pc, #0]	@ (8003620 <_localeconv_r+0x4>)
 800361e:	4770      	bx	lr
 8003620:	20000158 	.word	0x20000158

08003624 <_close_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	2300      	movs	r3, #0
 8003628:	4d05      	ldr	r5, [pc, #20]	@ (8003640 <_close_r+0x1c>)
 800362a:	4604      	mov	r4, r0
 800362c:	4608      	mov	r0, r1
 800362e:	602b      	str	r3, [r5, #0]
 8003630:	f7fe f85b 	bl	80016ea <_close>
 8003634:	1c43      	adds	r3, r0, #1
 8003636:	d102      	bne.n	800363e <_close_r+0x1a>
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	b103      	cbz	r3, 800363e <_close_r+0x1a>
 800363c:	6023      	str	r3, [r4, #0]
 800363e:	bd38      	pop	{r3, r4, r5, pc}
 8003640:	2000037c 	.word	0x2000037c

08003644 <_lseek_r>:
 8003644:	b538      	push	{r3, r4, r5, lr}
 8003646:	4604      	mov	r4, r0
 8003648:	4608      	mov	r0, r1
 800364a:	4611      	mov	r1, r2
 800364c:	2200      	movs	r2, #0
 800364e:	4d05      	ldr	r5, [pc, #20]	@ (8003664 <_lseek_r+0x20>)
 8003650:	602a      	str	r2, [r5, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	f7fe f86d 	bl	8001732 <_lseek>
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	d102      	bne.n	8003662 <_lseek_r+0x1e>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	b103      	cbz	r3, 8003662 <_lseek_r+0x1e>
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	bd38      	pop	{r3, r4, r5, pc}
 8003664:	2000037c 	.word	0x2000037c

08003668 <_read_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4604      	mov	r4, r0
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	2200      	movs	r2, #0
 8003672:	4d05      	ldr	r5, [pc, #20]	@ (8003688 <_read_r+0x20>)
 8003674:	602a      	str	r2, [r5, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	f7fd fffe 	bl	8001678 <_read>
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	d102      	bne.n	8003686 <_read_r+0x1e>
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	b103      	cbz	r3, 8003686 <_read_r+0x1e>
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	bd38      	pop	{r3, r4, r5, pc}
 8003688:	2000037c 	.word	0x2000037c

0800368c <_write_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	4604      	mov	r4, r0
 8003690:	4608      	mov	r0, r1
 8003692:	4611      	mov	r1, r2
 8003694:	2200      	movs	r2, #0
 8003696:	4d05      	ldr	r5, [pc, #20]	@ (80036ac <_write_r+0x20>)
 8003698:	602a      	str	r2, [r5, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	f7fe f809 	bl	80016b2 <_write>
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	d102      	bne.n	80036aa <_write_r+0x1e>
 80036a4:	682b      	ldr	r3, [r5, #0]
 80036a6:	b103      	cbz	r3, 80036aa <_write_r+0x1e>
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	bd38      	pop	{r3, r4, r5, pc}
 80036ac:	2000037c 	.word	0x2000037c

080036b0 <__errno>:
 80036b0:	4b01      	ldr	r3, [pc, #4]	@ (80036b8 <__errno+0x8>)
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000018 	.word	0x20000018

080036bc <__libc_init_array>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	2600      	movs	r6, #0
 80036c0:	4d0c      	ldr	r5, [pc, #48]	@ (80036f4 <__libc_init_array+0x38>)
 80036c2:	4c0d      	ldr	r4, [pc, #52]	@ (80036f8 <__libc_init_array+0x3c>)
 80036c4:	1b64      	subs	r4, r4, r5
 80036c6:	10a4      	asrs	r4, r4, #2
 80036c8:	42a6      	cmp	r6, r4
 80036ca:	d109      	bne.n	80036e0 <__libc_init_array+0x24>
 80036cc:	f001 fec8 	bl	8005460 <_init>
 80036d0:	2600      	movs	r6, #0
 80036d2:	4d0a      	ldr	r5, [pc, #40]	@ (80036fc <__libc_init_array+0x40>)
 80036d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003700 <__libc_init_array+0x44>)
 80036d6:	1b64      	subs	r4, r4, r5
 80036d8:	10a4      	asrs	r4, r4, #2
 80036da:	42a6      	cmp	r6, r4
 80036dc:	d105      	bne.n	80036ea <__libc_init_array+0x2e>
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e4:	4798      	blx	r3
 80036e6:	3601      	adds	r6, #1
 80036e8:	e7ee      	b.n	80036c8 <__libc_init_array+0xc>
 80036ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ee:	4798      	blx	r3
 80036f0:	3601      	adds	r6, #1
 80036f2:	e7f2      	b.n	80036da <__libc_init_array+0x1e>
 80036f4:	08005880 	.word	0x08005880
 80036f8:	08005880 	.word	0x08005880
 80036fc:	08005880 	.word	0x08005880
 8003700:	08005884 	.word	0x08005884

08003704 <__retarget_lock_init_recursive>:
 8003704:	4770      	bx	lr

08003706 <__retarget_lock_acquire_recursive>:
 8003706:	4770      	bx	lr

08003708 <__retarget_lock_release_recursive>:
 8003708:	4770      	bx	lr

0800370a <memchr>:
 800370a:	4603      	mov	r3, r0
 800370c:	b510      	push	{r4, lr}
 800370e:	b2c9      	uxtb	r1, r1
 8003710:	4402      	add	r2, r0
 8003712:	4293      	cmp	r3, r2
 8003714:	4618      	mov	r0, r3
 8003716:	d101      	bne.n	800371c <memchr+0x12>
 8003718:	2000      	movs	r0, #0
 800371a:	e003      	b.n	8003724 <memchr+0x1a>
 800371c:	7804      	ldrb	r4, [r0, #0]
 800371e:	3301      	adds	r3, #1
 8003720:	428c      	cmp	r4, r1
 8003722:	d1f6      	bne.n	8003712 <memchr+0x8>
 8003724:	bd10      	pop	{r4, pc}

08003726 <quorem>:
 8003726:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372a:	6903      	ldr	r3, [r0, #16]
 800372c:	690c      	ldr	r4, [r1, #16]
 800372e:	4607      	mov	r7, r0
 8003730:	42a3      	cmp	r3, r4
 8003732:	db7e      	blt.n	8003832 <quorem+0x10c>
 8003734:	3c01      	subs	r4, #1
 8003736:	00a3      	lsls	r3, r4, #2
 8003738:	f100 0514 	add.w	r5, r0, #20
 800373c:	f101 0814 	add.w	r8, r1, #20
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800374c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003750:	3301      	adds	r3, #1
 8003752:	429a      	cmp	r2, r3
 8003754:	fbb2 f6f3 	udiv	r6, r2, r3
 8003758:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800375c:	d32e      	bcc.n	80037bc <quorem+0x96>
 800375e:	f04f 0a00 	mov.w	sl, #0
 8003762:	46c4      	mov	ip, r8
 8003764:	46ae      	mov	lr, r5
 8003766:	46d3      	mov	fp, sl
 8003768:	f85c 3b04 	ldr.w	r3, [ip], #4
 800376c:	b298      	uxth	r0, r3
 800376e:	fb06 a000 	mla	r0, r6, r0, sl
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	0c02      	lsrs	r2, r0, #16
 8003776:	fb06 2303 	mla	r3, r6, r3, r2
 800377a:	f8de 2000 	ldr.w	r2, [lr]
 800377e:	b280      	uxth	r0, r0
 8003780:	b292      	uxth	r2, r2
 8003782:	1a12      	subs	r2, r2, r0
 8003784:	445a      	add	r2, fp
 8003786:	f8de 0000 	ldr.w	r0, [lr]
 800378a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800378e:	b29b      	uxth	r3, r3
 8003790:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003794:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003798:	b292      	uxth	r2, r2
 800379a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800379e:	45e1      	cmp	r9, ip
 80037a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80037a4:	f84e 2b04 	str.w	r2, [lr], #4
 80037a8:	d2de      	bcs.n	8003768 <quorem+0x42>
 80037aa:	9b00      	ldr	r3, [sp, #0]
 80037ac:	58eb      	ldr	r3, [r5, r3]
 80037ae:	b92b      	cbnz	r3, 80037bc <quorem+0x96>
 80037b0:	9b01      	ldr	r3, [sp, #4]
 80037b2:	3b04      	subs	r3, #4
 80037b4:	429d      	cmp	r5, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	d32f      	bcc.n	800381a <quorem+0xf4>
 80037ba:	613c      	str	r4, [r7, #16]
 80037bc:	4638      	mov	r0, r7
 80037be:	f001 f979 	bl	8004ab4 <__mcmp>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	db25      	blt.n	8003812 <quorem+0xec>
 80037c6:	4629      	mov	r1, r5
 80037c8:	2000      	movs	r0, #0
 80037ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80037ce:	f8d1 c000 	ldr.w	ip, [r1]
 80037d2:	fa1f fe82 	uxth.w	lr, r2
 80037d6:	fa1f f38c 	uxth.w	r3, ip
 80037da:	eba3 030e 	sub.w	r3, r3, lr
 80037de:	4403      	add	r3, r0
 80037e0:	0c12      	lsrs	r2, r2, #16
 80037e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80037e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037f0:	45c1      	cmp	r9, r8
 80037f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80037f6:	f841 3b04 	str.w	r3, [r1], #4
 80037fa:	d2e6      	bcs.n	80037ca <quorem+0xa4>
 80037fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003800:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003804:	b922      	cbnz	r2, 8003810 <quorem+0xea>
 8003806:	3b04      	subs	r3, #4
 8003808:	429d      	cmp	r5, r3
 800380a:	461a      	mov	r2, r3
 800380c:	d30b      	bcc.n	8003826 <quorem+0x100>
 800380e:	613c      	str	r4, [r7, #16]
 8003810:	3601      	adds	r6, #1
 8003812:	4630      	mov	r0, r6
 8003814:	b003      	add	sp, #12
 8003816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	3b04      	subs	r3, #4
 800381e:	2a00      	cmp	r2, #0
 8003820:	d1cb      	bne.n	80037ba <quorem+0x94>
 8003822:	3c01      	subs	r4, #1
 8003824:	e7c6      	b.n	80037b4 <quorem+0x8e>
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	3b04      	subs	r3, #4
 800382a:	2a00      	cmp	r2, #0
 800382c:	d1ef      	bne.n	800380e <quorem+0xe8>
 800382e:	3c01      	subs	r4, #1
 8003830:	e7ea      	b.n	8003808 <quorem+0xe2>
 8003832:	2000      	movs	r0, #0
 8003834:	e7ee      	b.n	8003814 <quorem+0xee>
	...

08003838 <_dtoa_r>:
 8003838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800383c:	4614      	mov	r4, r2
 800383e:	461d      	mov	r5, r3
 8003840:	69c7      	ldr	r7, [r0, #28]
 8003842:	b097      	sub	sp, #92	@ 0x5c
 8003844:	4683      	mov	fp, r0
 8003846:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800384a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800384c:	b97f      	cbnz	r7, 800386e <_dtoa_r+0x36>
 800384e:	2010      	movs	r0, #16
 8003850:	f000 fe02 	bl	8004458 <malloc>
 8003854:	4602      	mov	r2, r0
 8003856:	f8cb 001c 	str.w	r0, [fp, #28]
 800385a:	b920      	cbnz	r0, 8003866 <_dtoa_r+0x2e>
 800385c:	21ef      	movs	r1, #239	@ 0xef
 800385e:	4ba8      	ldr	r3, [pc, #672]	@ (8003b00 <_dtoa_r+0x2c8>)
 8003860:	48a8      	ldr	r0, [pc, #672]	@ (8003b04 <_dtoa_r+0x2cc>)
 8003862:	f001 fcc9 	bl	80051f8 <__assert_func>
 8003866:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800386a:	6007      	str	r7, [r0, #0]
 800386c:	60c7      	str	r7, [r0, #12]
 800386e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	b159      	cbz	r1, 800388e <_dtoa_r+0x56>
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	2301      	movs	r3, #1
 800387a:	4093      	lsls	r3, r2
 800387c:	604a      	str	r2, [r1, #4]
 800387e:	608b      	str	r3, [r1, #8]
 8003880:	4658      	mov	r0, fp
 8003882:	f000 fedf 	bl	8004644 <_Bfree>
 8003886:	2200      	movs	r2, #0
 8003888:	f8db 301c 	ldr.w	r3, [fp, #28]
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	1e2b      	subs	r3, r5, #0
 8003890:	bfaf      	iteee	ge
 8003892:	2300      	movge	r3, #0
 8003894:	2201      	movlt	r2, #1
 8003896:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800389a:	9303      	strlt	r3, [sp, #12]
 800389c:	bfa8      	it	ge
 800389e:	6033      	strge	r3, [r6, #0]
 80038a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80038a4:	4b98      	ldr	r3, [pc, #608]	@ (8003b08 <_dtoa_r+0x2d0>)
 80038a6:	bfb8      	it	lt
 80038a8:	6032      	strlt	r2, [r6, #0]
 80038aa:	ea33 0308 	bics.w	r3, r3, r8
 80038ae:	d112      	bne.n	80038d6 <_dtoa_r+0x9e>
 80038b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80038b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80038bc:	4323      	orrs	r3, r4
 80038be:	f000 8550 	beq.w	8004362 <_dtoa_r+0xb2a>
 80038c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80038c4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003b0c <_dtoa_r+0x2d4>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8552 	beq.w	8004372 <_dtoa_r+0xb3a>
 80038ce:	f10a 0303 	add.w	r3, sl, #3
 80038d2:	f000 bd4c 	b.w	800436e <_dtoa_r+0xb36>
 80038d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80038de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80038e2:	2200      	movs	r2, #0
 80038e4:	2300      	movs	r3, #0
 80038e6:	f7fd f85f 	bl	80009a8 <__aeabi_dcmpeq>
 80038ea:	4607      	mov	r7, r0
 80038ec:	b158      	cbz	r0, 8003906 <_dtoa_r+0xce>
 80038ee:	2301      	movs	r3, #1
 80038f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80038f6:	b113      	cbz	r3, 80038fe <_dtoa_r+0xc6>
 80038f8:	4b85      	ldr	r3, [pc, #532]	@ (8003b10 <_dtoa_r+0x2d8>)
 80038fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003b14 <_dtoa_r+0x2dc>
 8003902:	f000 bd36 	b.w	8004372 <_dtoa_r+0xb3a>
 8003906:	ab14      	add	r3, sp, #80	@ 0x50
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	ab15      	add	r3, sp, #84	@ 0x54
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	4658      	mov	r0, fp
 8003910:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003914:	f001 f97e 	bl	8004c14 <__d2b>
 8003918:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800391c:	4681      	mov	r9, r0
 800391e:	2e00      	cmp	r6, #0
 8003920:	d077      	beq.n	8003a12 <_dtoa_r+0x1da>
 8003922:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003928:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800392c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003930:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003934:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003938:	9712      	str	r7, [sp, #72]	@ 0x48
 800393a:	4619      	mov	r1, r3
 800393c:	2200      	movs	r2, #0
 800393e:	4b76      	ldr	r3, [pc, #472]	@ (8003b18 <_dtoa_r+0x2e0>)
 8003940:	f7fc fc12 	bl	8000168 <__aeabi_dsub>
 8003944:	a368      	add	r3, pc, #416	@ (adr r3, 8003ae8 <_dtoa_r+0x2b0>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f7fc fdc5 	bl	80004d8 <__aeabi_dmul>
 800394e:	a368      	add	r3, pc, #416	@ (adr r3, 8003af0 <_dtoa_r+0x2b8>)
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	f7fc fc0a 	bl	800016c <__adddf3>
 8003958:	4604      	mov	r4, r0
 800395a:	4630      	mov	r0, r6
 800395c:	460d      	mov	r5, r1
 800395e:	f7fc fd51 	bl	8000404 <__aeabi_i2d>
 8003962:	a365      	add	r3, pc, #404	@ (adr r3, 8003af8 <_dtoa_r+0x2c0>)
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f7fc fdb6 	bl	80004d8 <__aeabi_dmul>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4620      	mov	r0, r4
 8003972:	4629      	mov	r1, r5
 8003974:	f7fc fbfa 	bl	800016c <__adddf3>
 8003978:	4604      	mov	r4, r0
 800397a:	460d      	mov	r5, r1
 800397c:	f7fd f85c 	bl	8000a38 <__aeabi_d2iz>
 8003980:	2200      	movs	r2, #0
 8003982:	4607      	mov	r7, r0
 8003984:	2300      	movs	r3, #0
 8003986:	4620      	mov	r0, r4
 8003988:	4629      	mov	r1, r5
 800398a:	f7fd f817 	bl	80009bc <__aeabi_dcmplt>
 800398e:	b140      	cbz	r0, 80039a2 <_dtoa_r+0x16a>
 8003990:	4638      	mov	r0, r7
 8003992:	f7fc fd37 	bl	8000404 <__aeabi_i2d>
 8003996:	4622      	mov	r2, r4
 8003998:	462b      	mov	r3, r5
 800399a:	f7fd f805 	bl	80009a8 <__aeabi_dcmpeq>
 800399e:	b900      	cbnz	r0, 80039a2 <_dtoa_r+0x16a>
 80039a0:	3f01      	subs	r7, #1
 80039a2:	2f16      	cmp	r7, #22
 80039a4:	d853      	bhi.n	8003a4e <_dtoa_r+0x216>
 80039a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80039aa:	4b5c      	ldr	r3, [pc, #368]	@ (8003b1c <_dtoa_r+0x2e4>)
 80039ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f7fd f802 	bl	80009bc <__aeabi_dcmplt>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	d04a      	beq.n	8003a52 <_dtoa_r+0x21a>
 80039bc:	2300      	movs	r3, #0
 80039be:	3f01      	subs	r7, #1
 80039c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80039c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80039c4:	1b9b      	subs	r3, r3, r6
 80039c6:	1e5a      	subs	r2, r3, #1
 80039c8:	bf46      	itte	mi
 80039ca:	f1c3 0801 	rsbmi	r8, r3, #1
 80039ce:	2300      	movmi	r3, #0
 80039d0:	f04f 0800 	movpl.w	r8, #0
 80039d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80039d6:	bf48      	it	mi
 80039d8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80039da:	2f00      	cmp	r7, #0
 80039dc:	db3b      	blt.n	8003a56 <_dtoa_r+0x21e>
 80039de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039e0:	970e      	str	r7, [sp, #56]	@ 0x38
 80039e2:	443b      	add	r3, r7
 80039e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80039e6:	2300      	movs	r3, #0
 80039e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80039ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80039ec:	2b09      	cmp	r3, #9
 80039ee:	d866      	bhi.n	8003abe <_dtoa_r+0x286>
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	bfc4      	itt	gt
 80039f4:	3b04      	subgt	r3, #4
 80039f6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80039f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80039fa:	bfc8      	it	gt
 80039fc:	2400      	movgt	r4, #0
 80039fe:	f1a3 0302 	sub.w	r3, r3, #2
 8003a02:	bfd8      	it	le
 8003a04:	2401      	movle	r4, #1
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d864      	bhi.n	8003ad4 <_dtoa_r+0x29c>
 8003a0a:	e8df f003 	tbb	[pc, r3]
 8003a0e:	382b      	.short	0x382b
 8003a10:	5636      	.short	0x5636
 8003a12:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003a16:	441e      	add	r6, r3
 8003a18:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	bfc1      	itttt	gt
 8003a20:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003a24:	fa08 f803 	lslgt.w	r8, r8, r3
 8003a28:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003a2c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003a30:	bfd6      	itet	le
 8003a32:	f1c3 0320 	rsble	r3, r3, #32
 8003a36:	ea48 0003 	orrgt.w	r0, r8, r3
 8003a3a:	fa04 f003 	lslle.w	r0, r4, r3
 8003a3e:	f7fc fcd1 	bl	80003e4 <__aeabi_ui2d>
 8003a42:	2201      	movs	r2, #1
 8003a44:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003a48:	3e01      	subs	r6, #1
 8003a4a:	9212      	str	r2, [sp, #72]	@ 0x48
 8003a4c:	e775      	b.n	800393a <_dtoa_r+0x102>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e7b6      	b.n	80039c0 <_dtoa_r+0x188>
 8003a52:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003a54:	e7b5      	b.n	80039c2 <_dtoa_r+0x18a>
 8003a56:	427b      	negs	r3, r7
 8003a58:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	eba8 0807 	sub.w	r8, r8, r7
 8003a60:	930e      	str	r3, [sp, #56]	@ 0x38
 8003a62:	e7c2      	b.n	80039ea <_dtoa_r+0x1b2>
 8003a64:	2300      	movs	r3, #0
 8003a66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	dc35      	bgt.n	8003ada <_dtoa_r+0x2a2>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	461a      	mov	r2, r3
 8003a72:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003a76:	9221      	str	r2, [sp, #132]	@ 0x84
 8003a78:	e00b      	b.n	8003a92 <_dtoa_r+0x25a>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e7f3      	b.n	8003a66 <_dtoa_r+0x22e>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	9308      	str	r3, [sp, #32]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	9307      	str	r3, [sp, #28]
 8003a8e:	bfb8      	it	lt
 8003a90:	2301      	movlt	r3, #1
 8003a92:	2100      	movs	r1, #0
 8003a94:	2204      	movs	r2, #4
 8003a96:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003a9a:	f102 0514 	add.w	r5, r2, #20
 8003a9e:	429d      	cmp	r5, r3
 8003aa0:	d91f      	bls.n	8003ae2 <_dtoa_r+0x2aa>
 8003aa2:	6041      	str	r1, [r0, #4]
 8003aa4:	4658      	mov	r0, fp
 8003aa6:	f000 fd8d 	bl	80045c4 <_Balloc>
 8003aaa:	4682      	mov	sl, r0
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d139      	bne.n	8003b24 <_dtoa_r+0x2ec>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	f240 11af 	movw	r1, #431	@ 0x1af
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <_dtoa_r+0x2e8>)
 8003ab8:	e6d2      	b.n	8003860 <_dtoa_r+0x28>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e7e0      	b.n	8003a80 <_dtoa_r+0x248>
 8003abe:	2401      	movs	r4, #1
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003ac4:	9320      	str	r3, [sp, #128]	@ 0x80
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	2200      	movs	r2, #0
 8003acc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003ad0:	2312      	movs	r3, #18
 8003ad2:	e7d0      	b.n	8003a76 <_dtoa_r+0x23e>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ad8:	e7f5      	b.n	8003ac6 <_dtoa_r+0x28e>
 8003ada:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003adc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003ae0:	e7d7      	b.n	8003a92 <_dtoa_r+0x25a>
 8003ae2:	3101      	adds	r1, #1
 8003ae4:	0052      	lsls	r2, r2, #1
 8003ae6:	e7d8      	b.n	8003a9a <_dtoa_r+0x262>
 8003ae8:	636f4361 	.word	0x636f4361
 8003aec:	3fd287a7 	.word	0x3fd287a7
 8003af0:	8b60c8b3 	.word	0x8b60c8b3
 8003af4:	3fc68a28 	.word	0x3fc68a28
 8003af8:	509f79fb 	.word	0x509f79fb
 8003afc:	3fd34413 	.word	0x3fd34413
 8003b00:	0800554b 	.word	0x0800554b
 8003b04:	08005562 	.word	0x08005562
 8003b08:	7ff00000 	.word	0x7ff00000
 8003b0c:	08005547 	.word	0x08005547
 8003b10:	0800551b 	.word	0x0800551b
 8003b14:	0800551a 	.word	0x0800551a
 8003b18:	3ff80000 	.word	0x3ff80000
 8003b1c:	08005658 	.word	0x08005658
 8003b20:	080055ba 	.word	0x080055ba
 8003b24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003b28:	6018      	str	r0, [r3, #0]
 8003b2a:	9b07      	ldr	r3, [sp, #28]
 8003b2c:	2b0e      	cmp	r3, #14
 8003b2e:	f200 80a4 	bhi.w	8003c7a <_dtoa_r+0x442>
 8003b32:	2c00      	cmp	r4, #0
 8003b34:	f000 80a1 	beq.w	8003c7a <_dtoa_r+0x442>
 8003b38:	2f00      	cmp	r7, #0
 8003b3a:	dd33      	ble.n	8003ba4 <_dtoa_r+0x36c>
 8003b3c:	4b86      	ldr	r3, [pc, #536]	@ (8003d58 <_dtoa_r+0x520>)
 8003b3e:	f007 020f 	and.w	r2, r7, #15
 8003b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b46:	05f8      	lsls	r0, r7, #23
 8003b48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b4c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003b50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003b54:	d516      	bpl.n	8003b84 <_dtoa_r+0x34c>
 8003b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b5a:	4b80      	ldr	r3, [pc, #512]	@ (8003d5c <_dtoa_r+0x524>)
 8003b5c:	2603      	movs	r6, #3
 8003b5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b62:	f7fc fde3 	bl	800072c <__aeabi_ddiv>
 8003b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b6a:	f004 040f 	and.w	r4, r4, #15
 8003b6e:	4d7b      	ldr	r5, [pc, #492]	@ (8003d5c <_dtoa_r+0x524>)
 8003b70:	b954      	cbnz	r4, 8003b88 <_dtoa_r+0x350>
 8003b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b7a:	f7fc fdd7 	bl	800072c <__aeabi_ddiv>
 8003b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b82:	e028      	b.n	8003bd6 <_dtoa_r+0x39e>
 8003b84:	2602      	movs	r6, #2
 8003b86:	e7f2      	b.n	8003b6e <_dtoa_r+0x336>
 8003b88:	07e1      	lsls	r1, r4, #31
 8003b8a:	d508      	bpl.n	8003b9e <_dtoa_r+0x366>
 8003b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003b94:	f7fc fca0 	bl	80004d8 <__aeabi_dmul>
 8003b98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b9c:	3601      	adds	r6, #1
 8003b9e:	1064      	asrs	r4, r4, #1
 8003ba0:	3508      	adds	r5, #8
 8003ba2:	e7e5      	b.n	8003b70 <_dtoa_r+0x338>
 8003ba4:	f000 80d2 	beq.w	8003d4c <_dtoa_r+0x514>
 8003ba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003bac:	427c      	negs	r4, r7
 8003bae:	4b6a      	ldr	r3, [pc, #424]	@ (8003d58 <_dtoa_r+0x520>)
 8003bb0:	f004 020f 	and.w	r2, r4, #15
 8003bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f7fc fc8c 	bl	80004d8 <__aeabi_dmul>
 8003bc0:	2602      	movs	r6, #2
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bc8:	4d64      	ldr	r5, [pc, #400]	@ (8003d5c <_dtoa_r+0x524>)
 8003bca:	1124      	asrs	r4, r4, #4
 8003bcc:	2c00      	cmp	r4, #0
 8003bce:	f040 80b2 	bne.w	8003d36 <_dtoa_r+0x4fe>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1d3      	bne.n	8003b7e <_dtoa_r+0x346>
 8003bd6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003bda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80b7 	beq.w	8003d50 <_dtoa_r+0x518>
 8003be2:	2200      	movs	r2, #0
 8003be4:	4620      	mov	r0, r4
 8003be6:	4629      	mov	r1, r5
 8003be8:	4b5d      	ldr	r3, [pc, #372]	@ (8003d60 <_dtoa_r+0x528>)
 8003bea:	f7fc fee7 	bl	80009bc <__aeabi_dcmplt>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	f000 80ae 	beq.w	8003d50 <_dtoa_r+0x518>
 8003bf4:	9b07      	ldr	r3, [sp, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 80aa 	beq.w	8003d50 <_dtoa_r+0x518>
 8003bfc:	9b08      	ldr	r3, [sp, #32]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	dd37      	ble.n	8003c72 <_dtoa_r+0x43a>
 8003c02:	1e7b      	subs	r3, r7, #1
 8003c04:	4620      	mov	r0, r4
 8003c06:	9304      	str	r3, [sp, #16]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	4b55      	ldr	r3, [pc, #340]	@ (8003d64 <_dtoa_r+0x52c>)
 8003c0e:	f7fc fc63 	bl	80004d8 <__aeabi_dmul>
 8003c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c16:	9c08      	ldr	r4, [sp, #32]
 8003c18:	3601      	adds	r6, #1
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	f7fc fbf2 	bl	8000404 <__aeabi_i2d>
 8003c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c24:	f7fc fc58 	bl	80004d8 <__aeabi_dmul>
 8003c28:	2200      	movs	r2, #0
 8003c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003d68 <_dtoa_r+0x530>)
 8003c2c:	f7fc fa9e 	bl	800016c <__adddf3>
 8003c30:	4605      	mov	r5, r0
 8003c32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003c36:	2c00      	cmp	r4, #0
 8003c38:	f040 809a 	bne.w	8003d70 <_dtoa_r+0x538>
 8003c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c40:	2200      	movs	r2, #0
 8003c42:	4b4a      	ldr	r3, [pc, #296]	@ (8003d6c <_dtoa_r+0x534>)
 8003c44:	f7fc fa90 	bl	8000168 <__aeabi_dsub>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c50:	462a      	mov	r2, r5
 8003c52:	4633      	mov	r3, r6
 8003c54:	f7fc fed0 	bl	80009f8 <__aeabi_dcmpgt>
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	f040 828e 	bne.w	800417a <_dtoa_r+0x942>
 8003c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c62:	462a      	mov	r2, r5
 8003c64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003c68:	f7fc fea8 	bl	80009bc <__aeabi_dcmplt>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	f040 8127 	bne.w	8003ec0 <_dtoa_r+0x688>
 8003c72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003c76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003c7a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f2c0 8163 	blt.w	8003f48 <_dtoa_r+0x710>
 8003c82:	2f0e      	cmp	r7, #14
 8003c84:	f300 8160 	bgt.w	8003f48 <_dtoa_r+0x710>
 8003c88:	4b33      	ldr	r3, [pc, #204]	@ (8003d58 <_dtoa_r+0x520>)
 8003c8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003c8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003c96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	da03      	bge.n	8003ca4 <_dtoa_r+0x46c>
 8003c9c:	9b07      	ldr	r3, [sp, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f340 8100 	ble.w	8003ea4 <_dtoa_r+0x66c>
 8003ca4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003ca8:	4656      	mov	r6, sl
 8003caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cae:	4620      	mov	r0, r4
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	f7fc fd3b 	bl	800072c <__aeabi_ddiv>
 8003cb6:	f7fc febf 	bl	8000a38 <__aeabi_d2iz>
 8003cba:	4680      	mov	r8, r0
 8003cbc:	f7fc fba2 	bl	8000404 <__aeabi_i2d>
 8003cc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cc4:	f7fc fc08 	bl	80004d8 <__aeabi_dmul>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4620      	mov	r0, r4
 8003cce:	4629      	mov	r1, r5
 8003cd0:	f7fc fa4a 	bl	8000168 <__aeabi_dsub>
 8003cd4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003cd8:	9d07      	ldr	r5, [sp, #28]
 8003cda:	f806 4b01 	strb.w	r4, [r6], #1
 8003cde:	eba6 040a 	sub.w	r4, r6, sl
 8003ce2:	42a5      	cmp	r5, r4
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	f040 8116 	bne.w	8003f18 <_dtoa_r+0x6e0>
 8003cec:	f7fc fa3e 	bl	800016c <__adddf3>
 8003cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	460d      	mov	r5, r1
 8003cf8:	f7fc fe7e 	bl	80009f8 <__aeabi_dcmpgt>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	f040 80f8 	bne.w	8003ef2 <_dtoa_r+0x6ba>
 8003d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d06:	4620      	mov	r0, r4
 8003d08:	4629      	mov	r1, r5
 8003d0a:	f7fc fe4d 	bl	80009a8 <__aeabi_dcmpeq>
 8003d0e:	b118      	cbz	r0, 8003d18 <_dtoa_r+0x4e0>
 8003d10:	f018 0f01 	tst.w	r8, #1
 8003d14:	f040 80ed 	bne.w	8003ef2 <_dtoa_r+0x6ba>
 8003d18:	4649      	mov	r1, r9
 8003d1a:	4658      	mov	r0, fp
 8003d1c:	f000 fc92 	bl	8004644 <_Bfree>
 8003d20:	2300      	movs	r3, #0
 8003d22:	7033      	strb	r3, [r6, #0]
 8003d24:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003d26:	3701      	adds	r7, #1
 8003d28:	601f      	str	r7, [r3, #0]
 8003d2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8320 	beq.w	8004372 <_dtoa_r+0xb3a>
 8003d32:	601e      	str	r6, [r3, #0]
 8003d34:	e31d      	b.n	8004372 <_dtoa_r+0xb3a>
 8003d36:	07e2      	lsls	r2, r4, #31
 8003d38:	d505      	bpl.n	8003d46 <_dtoa_r+0x50e>
 8003d3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d3e:	f7fc fbcb 	bl	80004d8 <__aeabi_dmul>
 8003d42:	2301      	movs	r3, #1
 8003d44:	3601      	adds	r6, #1
 8003d46:	1064      	asrs	r4, r4, #1
 8003d48:	3508      	adds	r5, #8
 8003d4a:	e73f      	b.n	8003bcc <_dtoa_r+0x394>
 8003d4c:	2602      	movs	r6, #2
 8003d4e:	e742      	b.n	8003bd6 <_dtoa_r+0x39e>
 8003d50:	9c07      	ldr	r4, [sp, #28]
 8003d52:	9704      	str	r7, [sp, #16]
 8003d54:	e761      	b.n	8003c1a <_dtoa_r+0x3e2>
 8003d56:	bf00      	nop
 8003d58:	08005658 	.word	0x08005658
 8003d5c:	08005630 	.word	0x08005630
 8003d60:	3ff00000 	.word	0x3ff00000
 8003d64:	40240000 	.word	0x40240000
 8003d68:	401c0000 	.word	0x401c0000
 8003d6c:	40140000 	.word	0x40140000
 8003d70:	4b70      	ldr	r3, [pc, #448]	@ (8003f34 <_dtoa_r+0x6fc>)
 8003d72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003d74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003d78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003d7c:	4454      	add	r4, sl
 8003d7e:	2900      	cmp	r1, #0
 8003d80:	d045      	beq.n	8003e0e <_dtoa_r+0x5d6>
 8003d82:	2000      	movs	r0, #0
 8003d84:	496c      	ldr	r1, [pc, #432]	@ (8003f38 <_dtoa_r+0x700>)
 8003d86:	f7fc fcd1 	bl	800072c <__aeabi_ddiv>
 8003d8a:	4633      	mov	r3, r6
 8003d8c:	462a      	mov	r2, r5
 8003d8e:	f7fc f9eb 	bl	8000168 <__aeabi_dsub>
 8003d92:	4656      	mov	r6, sl
 8003d94:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d9c:	f7fc fe4c 	bl	8000a38 <__aeabi_d2iz>
 8003da0:	4605      	mov	r5, r0
 8003da2:	f7fc fb2f 	bl	8000404 <__aeabi_i2d>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dae:	f7fc f9db 	bl	8000168 <__aeabi_dsub>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	3530      	adds	r5, #48	@ 0x30
 8003db8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003dc0:	f806 5b01 	strb.w	r5, [r6], #1
 8003dc4:	f7fc fdfa 	bl	80009bc <__aeabi_dcmplt>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d163      	bne.n	8003e94 <_dtoa_r+0x65c>
 8003dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	495a      	ldr	r1, [pc, #360]	@ (8003f3c <_dtoa_r+0x704>)
 8003dd4:	f7fc f9c8 	bl	8000168 <__aeabi_dsub>
 8003dd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003ddc:	f7fc fdee 	bl	80009bc <__aeabi_dcmplt>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	f040 8087 	bne.w	8003ef4 <_dtoa_r+0x6bc>
 8003de6:	42a6      	cmp	r6, r4
 8003de8:	f43f af43 	beq.w	8003c72 <_dtoa_r+0x43a>
 8003dec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003df0:	2200      	movs	r2, #0
 8003df2:	4b53      	ldr	r3, [pc, #332]	@ (8003f40 <_dtoa_r+0x708>)
 8003df4:	f7fc fb70 	bl	80004d8 <__aeabi_dmul>
 8003df8:	2200      	movs	r2, #0
 8003dfa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e02:	4b4f      	ldr	r3, [pc, #316]	@ (8003f40 <_dtoa_r+0x708>)
 8003e04:	f7fc fb68 	bl	80004d8 <__aeabi_dmul>
 8003e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e0c:	e7c4      	b.n	8003d98 <_dtoa_r+0x560>
 8003e0e:	4631      	mov	r1, r6
 8003e10:	4628      	mov	r0, r5
 8003e12:	f7fc fb61 	bl	80004d8 <__aeabi_dmul>
 8003e16:	4656      	mov	r6, sl
 8003e18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003e1c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e22:	f7fc fe09 	bl	8000a38 <__aeabi_d2iz>
 8003e26:	4605      	mov	r5, r0
 8003e28:	f7fc faec 	bl	8000404 <__aeabi_i2d>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e34:	f7fc f998 	bl	8000168 <__aeabi_dsub>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	3530      	adds	r5, #48	@ 0x30
 8003e3e:	f806 5b01 	strb.w	r5, [r6], #1
 8003e42:	42a6      	cmp	r6, r4
 8003e44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	d124      	bne.n	8003e98 <_dtoa_r+0x660>
 8003e4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003e52:	4b39      	ldr	r3, [pc, #228]	@ (8003f38 <_dtoa_r+0x700>)
 8003e54:	f7fc f98a 	bl	800016c <__adddf3>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e60:	f7fc fdca 	bl	80009f8 <__aeabi_dcmpgt>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d145      	bne.n	8003ef4 <_dtoa_r+0x6bc>
 8003e68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	4932      	ldr	r1, [pc, #200]	@ (8003f38 <_dtoa_r+0x700>)
 8003e70:	f7fc f97a 	bl	8000168 <__aeabi_dsub>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e7c:	f7fc fd9e 	bl	80009bc <__aeabi_dcmplt>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	f43f aef6 	beq.w	8003c72 <_dtoa_r+0x43a>
 8003e86:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003e88:	1e73      	subs	r3, r6, #1
 8003e8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003e8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003e90:	2b30      	cmp	r3, #48	@ 0x30
 8003e92:	d0f8      	beq.n	8003e86 <_dtoa_r+0x64e>
 8003e94:	9f04      	ldr	r7, [sp, #16]
 8003e96:	e73f      	b.n	8003d18 <_dtoa_r+0x4e0>
 8003e98:	4b29      	ldr	r3, [pc, #164]	@ (8003f40 <_dtoa_r+0x708>)
 8003e9a:	f7fc fb1d 	bl	80004d8 <__aeabi_dmul>
 8003e9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ea2:	e7bc      	b.n	8003e1e <_dtoa_r+0x5e6>
 8003ea4:	d10c      	bne.n	8003ec0 <_dtoa_r+0x688>
 8003ea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4b25      	ldr	r3, [pc, #148]	@ (8003f44 <_dtoa_r+0x70c>)
 8003eae:	f7fc fb13 	bl	80004d8 <__aeabi_dmul>
 8003eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003eb6:	f7fc fd95 	bl	80009e4 <__aeabi_dcmpge>
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	f000 815b 	beq.w	8004176 <_dtoa_r+0x93e>
 8003ec0:	2400      	movs	r4, #0
 8003ec2:	4625      	mov	r5, r4
 8003ec4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ec6:	4656      	mov	r6, sl
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	9304      	str	r3, [sp, #16]
 8003ecc:	2700      	movs	r7, #0
 8003ece:	4621      	mov	r1, r4
 8003ed0:	4658      	mov	r0, fp
 8003ed2:	f000 fbb7 	bl	8004644 <_Bfree>
 8003ed6:	2d00      	cmp	r5, #0
 8003ed8:	d0dc      	beq.n	8003e94 <_dtoa_r+0x65c>
 8003eda:	b12f      	cbz	r7, 8003ee8 <_dtoa_r+0x6b0>
 8003edc:	42af      	cmp	r7, r5
 8003ede:	d003      	beq.n	8003ee8 <_dtoa_r+0x6b0>
 8003ee0:	4639      	mov	r1, r7
 8003ee2:	4658      	mov	r0, fp
 8003ee4:	f000 fbae 	bl	8004644 <_Bfree>
 8003ee8:	4629      	mov	r1, r5
 8003eea:	4658      	mov	r0, fp
 8003eec:	f000 fbaa 	bl	8004644 <_Bfree>
 8003ef0:	e7d0      	b.n	8003e94 <_dtoa_r+0x65c>
 8003ef2:	9704      	str	r7, [sp, #16]
 8003ef4:	4633      	mov	r3, r6
 8003ef6:	461e      	mov	r6, r3
 8003ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003efc:	2a39      	cmp	r2, #57	@ 0x39
 8003efe:	d107      	bne.n	8003f10 <_dtoa_r+0x6d8>
 8003f00:	459a      	cmp	sl, r3
 8003f02:	d1f8      	bne.n	8003ef6 <_dtoa_r+0x6be>
 8003f04:	9a04      	ldr	r2, [sp, #16]
 8003f06:	3201      	adds	r2, #1
 8003f08:	9204      	str	r2, [sp, #16]
 8003f0a:	2230      	movs	r2, #48	@ 0x30
 8003f0c:	f88a 2000 	strb.w	r2, [sl]
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	3201      	adds	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e7bd      	b.n	8003e94 <_dtoa_r+0x65c>
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4b09      	ldr	r3, [pc, #36]	@ (8003f40 <_dtoa_r+0x708>)
 8003f1c:	f7fc fadc 	bl	80004d8 <__aeabi_dmul>
 8003f20:	2200      	movs	r2, #0
 8003f22:	2300      	movs	r3, #0
 8003f24:	4604      	mov	r4, r0
 8003f26:	460d      	mov	r5, r1
 8003f28:	f7fc fd3e 	bl	80009a8 <__aeabi_dcmpeq>
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	f43f aebc 	beq.w	8003caa <_dtoa_r+0x472>
 8003f32:	e6f1      	b.n	8003d18 <_dtoa_r+0x4e0>
 8003f34:	08005658 	.word	0x08005658
 8003f38:	3fe00000 	.word	0x3fe00000
 8003f3c:	3ff00000 	.word	0x3ff00000
 8003f40:	40240000 	.word	0x40240000
 8003f44:	40140000 	.word	0x40140000
 8003f48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003f4a:	2a00      	cmp	r2, #0
 8003f4c:	f000 80db 	beq.w	8004106 <_dtoa_r+0x8ce>
 8003f50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f52:	2a01      	cmp	r2, #1
 8003f54:	f300 80bf 	bgt.w	80040d6 <_dtoa_r+0x89e>
 8003f58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003f5a:	2a00      	cmp	r2, #0
 8003f5c:	f000 80b7 	beq.w	80040ce <_dtoa_r+0x896>
 8003f60:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003f64:	4646      	mov	r6, r8
 8003f66:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003f68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	441a      	add	r2, r3
 8003f6e:	4658      	mov	r0, fp
 8003f70:	4498      	add	r8, r3
 8003f72:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f74:	f000 fc1a 	bl	80047ac <__i2b>
 8003f78:	4605      	mov	r5, r0
 8003f7a:	b15e      	cbz	r6, 8003f94 <_dtoa_r+0x75c>
 8003f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	dd08      	ble.n	8003f94 <_dtoa_r+0x75c>
 8003f82:	42b3      	cmp	r3, r6
 8003f84:	bfa8      	it	ge
 8003f86:	4633      	movge	r3, r6
 8003f88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f8a:	eba8 0803 	sub.w	r8, r8, r3
 8003f8e:	1af6      	subs	r6, r6, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f96:	b1f3      	cbz	r3, 8003fd6 <_dtoa_r+0x79e>
 8003f98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 80b7 	beq.w	800410e <_dtoa_r+0x8d6>
 8003fa0:	b18c      	cbz	r4, 8003fc6 <_dtoa_r+0x78e>
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	4658      	mov	r0, fp
 8003fa8:	f000 fcbe 	bl	8004928 <__pow5mult>
 8003fac:	464a      	mov	r2, r9
 8003fae:	4601      	mov	r1, r0
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	4658      	mov	r0, fp
 8003fb4:	f000 fc10 	bl	80047d8 <__multiply>
 8003fb8:	4649      	mov	r1, r9
 8003fba:	9004      	str	r0, [sp, #16]
 8003fbc:	4658      	mov	r0, fp
 8003fbe:	f000 fb41 	bl	8004644 <_Bfree>
 8003fc2:	9b04      	ldr	r3, [sp, #16]
 8003fc4:	4699      	mov	r9, r3
 8003fc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fc8:	1b1a      	subs	r2, r3, r4
 8003fca:	d004      	beq.n	8003fd6 <_dtoa_r+0x79e>
 8003fcc:	4649      	mov	r1, r9
 8003fce:	4658      	mov	r0, fp
 8003fd0:	f000 fcaa 	bl	8004928 <__pow5mult>
 8003fd4:	4681      	mov	r9, r0
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4658      	mov	r0, fp
 8003fda:	f000 fbe7 	bl	80047ac <__i2b>
 8003fde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 81c9 	beq.w	800437a <_dtoa_r+0xb42>
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4601      	mov	r1, r0
 8003fec:	4658      	mov	r0, fp
 8003fee:	f000 fc9b 	bl	8004928 <__pow5mult>
 8003ff2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	f300 808f 	bgt.w	800411a <_dtoa_r+0x8e2>
 8003ffc:	9b02      	ldr	r3, [sp, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f040 8087 	bne.w	8004112 <_dtoa_r+0x8da>
 8004004:	9b03      	ldr	r3, [sp, #12]
 8004006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 8083 	bne.w	8004116 <_dtoa_r+0x8de>
 8004010:	9b03      	ldr	r3, [sp, #12]
 8004012:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004016:	0d1b      	lsrs	r3, r3, #20
 8004018:	051b      	lsls	r3, r3, #20
 800401a:	b12b      	cbz	r3, 8004028 <_dtoa_r+0x7f0>
 800401c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800401e:	f108 0801 	add.w	r8, r8, #1
 8004022:	3301      	adds	r3, #1
 8004024:	9309      	str	r3, [sp, #36]	@ 0x24
 8004026:	2301      	movs	r3, #1
 8004028:	930a      	str	r3, [sp, #40]	@ 0x28
 800402a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 81aa 	beq.w	8004386 <_dtoa_r+0xb4e>
 8004032:	6923      	ldr	r3, [r4, #16]
 8004034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004038:	6918      	ldr	r0, [r3, #16]
 800403a:	f000 fb6b 	bl	8004714 <__hi0bits>
 800403e:	f1c0 0020 	rsb	r0, r0, #32
 8004042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004044:	4418      	add	r0, r3
 8004046:	f010 001f 	ands.w	r0, r0, #31
 800404a:	d071      	beq.n	8004130 <_dtoa_r+0x8f8>
 800404c:	f1c0 0320 	rsb	r3, r0, #32
 8004050:	2b04      	cmp	r3, #4
 8004052:	dd65      	ble.n	8004120 <_dtoa_r+0x8e8>
 8004054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004056:	f1c0 001c 	rsb	r0, r0, #28
 800405a:	4403      	add	r3, r0
 800405c:	4480      	add	r8, r0
 800405e:	4406      	add	r6, r0
 8004060:	9309      	str	r3, [sp, #36]	@ 0x24
 8004062:	f1b8 0f00 	cmp.w	r8, #0
 8004066:	dd05      	ble.n	8004074 <_dtoa_r+0x83c>
 8004068:	4649      	mov	r1, r9
 800406a:	4642      	mov	r2, r8
 800406c:	4658      	mov	r0, fp
 800406e:	f000 fcb5 	bl	80049dc <__lshift>
 8004072:	4681      	mov	r9, r0
 8004074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	dd05      	ble.n	8004086 <_dtoa_r+0x84e>
 800407a:	4621      	mov	r1, r4
 800407c:	461a      	mov	r2, r3
 800407e:	4658      	mov	r0, fp
 8004080:	f000 fcac 	bl	80049dc <__lshift>
 8004084:	4604      	mov	r4, r0
 8004086:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d053      	beq.n	8004134 <_dtoa_r+0x8fc>
 800408c:	4621      	mov	r1, r4
 800408e:	4648      	mov	r0, r9
 8004090:	f000 fd10 	bl	8004ab4 <__mcmp>
 8004094:	2800      	cmp	r0, #0
 8004096:	da4d      	bge.n	8004134 <_dtoa_r+0x8fc>
 8004098:	1e7b      	subs	r3, r7, #1
 800409a:	4649      	mov	r1, r9
 800409c:	9304      	str	r3, [sp, #16]
 800409e:	220a      	movs	r2, #10
 80040a0:	2300      	movs	r3, #0
 80040a2:	4658      	mov	r0, fp
 80040a4:	f000 faf0 	bl	8004688 <__multadd>
 80040a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80040aa:	4681      	mov	r9, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 816c 	beq.w	800438a <_dtoa_r+0xb52>
 80040b2:	2300      	movs	r3, #0
 80040b4:	4629      	mov	r1, r5
 80040b6:	220a      	movs	r2, #10
 80040b8:	4658      	mov	r0, fp
 80040ba:	f000 fae5 	bl	8004688 <__multadd>
 80040be:	9b08      	ldr	r3, [sp, #32]
 80040c0:	4605      	mov	r5, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	dc61      	bgt.n	800418a <_dtoa_r+0x952>
 80040c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	dc3b      	bgt.n	8004144 <_dtoa_r+0x90c>
 80040cc:	e05d      	b.n	800418a <_dtoa_r+0x952>
 80040ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80040d0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80040d4:	e746      	b.n	8003f64 <_dtoa_r+0x72c>
 80040d6:	9b07      	ldr	r3, [sp, #28]
 80040d8:	1e5c      	subs	r4, r3, #1
 80040da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040dc:	42a3      	cmp	r3, r4
 80040de:	bfbf      	itttt	lt
 80040e0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80040e2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80040e4:	1ae3      	sublt	r3, r4, r3
 80040e6:	18d2      	addlt	r2, r2, r3
 80040e8:	bfa8      	it	ge
 80040ea:	1b1c      	subge	r4, r3, r4
 80040ec:	9b07      	ldr	r3, [sp, #28]
 80040ee:	bfbe      	ittt	lt
 80040f0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80040f2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80040f4:	2400      	movlt	r4, #0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bfb5      	itete	lt
 80040fa:	eba8 0603 	sublt.w	r6, r8, r3
 80040fe:	4646      	movge	r6, r8
 8004100:	2300      	movlt	r3, #0
 8004102:	9b07      	ldrge	r3, [sp, #28]
 8004104:	e730      	b.n	8003f68 <_dtoa_r+0x730>
 8004106:	4646      	mov	r6, r8
 8004108:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800410a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800410c:	e735      	b.n	8003f7a <_dtoa_r+0x742>
 800410e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004110:	e75c      	b.n	8003fcc <_dtoa_r+0x794>
 8004112:	2300      	movs	r3, #0
 8004114:	e788      	b.n	8004028 <_dtoa_r+0x7f0>
 8004116:	9b02      	ldr	r3, [sp, #8]
 8004118:	e786      	b.n	8004028 <_dtoa_r+0x7f0>
 800411a:	2300      	movs	r3, #0
 800411c:	930a      	str	r3, [sp, #40]	@ 0x28
 800411e:	e788      	b.n	8004032 <_dtoa_r+0x7fa>
 8004120:	d09f      	beq.n	8004062 <_dtoa_r+0x82a>
 8004122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004124:	331c      	adds	r3, #28
 8004126:	441a      	add	r2, r3
 8004128:	4498      	add	r8, r3
 800412a:	441e      	add	r6, r3
 800412c:	9209      	str	r2, [sp, #36]	@ 0x24
 800412e:	e798      	b.n	8004062 <_dtoa_r+0x82a>
 8004130:	4603      	mov	r3, r0
 8004132:	e7f6      	b.n	8004122 <_dtoa_r+0x8ea>
 8004134:	9b07      	ldr	r3, [sp, #28]
 8004136:	9704      	str	r7, [sp, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	dc20      	bgt.n	800417e <_dtoa_r+0x946>
 800413c:	9308      	str	r3, [sp, #32]
 800413e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004140:	2b02      	cmp	r3, #2
 8004142:	dd1e      	ble.n	8004182 <_dtoa_r+0x94a>
 8004144:	9b08      	ldr	r3, [sp, #32]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f47f aebc 	bne.w	8003ec4 <_dtoa_r+0x68c>
 800414c:	4621      	mov	r1, r4
 800414e:	2205      	movs	r2, #5
 8004150:	4658      	mov	r0, fp
 8004152:	f000 fa99 	bl	8004688 <__multadd>
 8004156:	4601      	mov	r1, r0
 8004158:	4604      	mov	r4, r0
 800415a:	4648      	mov	r0, r9
 800415c:	f000 fcaa 	bl	8004ab4 <__mcmp>
 8004160:	2800      	cmp	r0, #0
 8004162:	f77f aeaf 	ble.w	8003ec4 <_dtoa_r+0x68c>
 8004166:	2331      	movs	r3, #49	@ 0x31
 8004168:	4656      	mov	r6, sl
 800416a:	f806 3b01 	strb.w	r3, [r6], #1
 800416e:	9b04      	ldr	r3, [sp, #16]
 8004170:	3301      	adds	r3, #1
 8004172:	9304      	str	r3, [sp, #16]
 8004174:	e6aa      	b.n	8003ecc <_dtoa_r+0x694>
 8004176:	9c07      	ldr	r4, [sp, #28]
 8004178:	9704      	str	r7, [sp, #16]
 800417a:	4625      	mov	r5, r4
 800417c:	e7f3      	b.n	8004166 <_dtoa_r+0x92e>
 800417e:	9b07      	ldr	r3, [sp, #28]
 8004180:	9308      	str	r3, [sp, #32]
 8004182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8104 	beq.w	8004392 <_dtoa_r+0xb5a>
 800418a:	2e00      	cmp	r6, #0
 800418c:	dd05      	ble.n	800419a <_dtoa_r+0x962>
 800418e:	4629      	mov	r1, r5
 8004190:	4632      	mov	r2, r6
 8004192:	4658      	mov	r0, fp
 8004194:	f000 fc22 	bl	80049dc <__lshift>
 8004198:	4605      	mov	r5, r0
 800419a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800419c:	2b00      	cmp	r3, #0
 800419e:	d05a      	beq.n	8004256 <_dtoa_r+0xa1e>
 80041a0:	4658      	mov	r0, fp
 80041a2:	6869      	ldr	r1, [r5, #4]
 80041a4:	f000 fa0e 	bl	80045c4 <_Balloc>
 80041a8:	4606      	mov	r6, r0
 80041aa:	b928      	cbnz	r0, 80041b8 <_dtoa_r+0x980>
 80041ac:	4602      	mov	r2, r0
 80041ae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80041b2:	4b83      	ldr	r3, [pc, #524]	@ (80043c0 <_dtoa_r+0xb88>)
 80041b4:	f7ff bb54 	b.w	8003860 <_dtoa_r+0x28>
 80041b8:	692a      	ldr	r2, [r5, #16]
 80041ba:	f105 010c 	add.w	r1, r5, #12
 80041be:	3202      	adds	r2, #2
 80041c0:	0092      	lsls	r2, r2, #2
 80041c2:	300c      	adds	r0, #12
 80041c4:	f001 f80a 	bl	80051dc <memcpy>
 80041c8:	2201      	movs	r2, #1
 80041ca:	4631      	mov	r1, r6
 80041cc:	4658      	mov	r0, fp
 80041ce:	f000 fc05 	bl	80049dc <__lshift>
 80041d2:	462f      	mov	r7, r5
 80041d4:	4605      	mov	r5, r0
 80041d6:	f10a 0301 	add.w	r3, sl, #1
 80041da:	9307      	str	r3, [sp, #28]
 80041dc:	9b08      	ldr	r3, [sp, #32]
 80041de:	4453      	add	r3, sl
 80041e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041e2:	9b02      	ldr	r3, [sp, #8]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80041ea:	9b07      	ldr	r3, [sp, #28]
 80041ec:	4621      	mov	r1, r4
 80041ee:	3b01      	subs	r3, #1
 80041f0:	4648      	mov	r0, r9
 80041f2:	9302      	str	r3, [sp, #8]
 80041f4:	f7ff fa97 	bl	8003726 <quorem>
 80041f8:	4639      	mov	r1, r7
 80041fa:	9008      	str	r0, [sp, #32]
 80041fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004200:	4648      	mov	r0, r9
 8004202:	f000 fc57 	bl	8004ab4 <__mcmp>
 8004206:	462a      	mov	r2, r5
 8004208:	9009      	str	r0, [sp, #36]	@ 0x24
 800420a:	4621      	mov	r1, r4
 800420c:	4658      	mov	r0, fp
 800420e:	f000 fc6d 	bl	8004aec <__mdiff>
 8004212:	68c2      	ldr	r2, [r0, #12]
 8004214:	4606      	mov	r6, r0
 8004216:	bb02      	cbnz	r2, 800425a <_dtoa_r+0xa22>
 8004218:	4601      	mov	r1, r0
 800421a:	4648      	mov	r0, r9
 800421c:	f000 fc4a 	bl	8004ab4 <__mcmp>
 8004220:	4602      	mov	r2, r0
 8004222:	4631      	mov	r1, r6
 8004224:	4658      	mov	r0, fp
 8004226:	920c      	str	r2, [sp, #48]	@ 0x30
 8004228:	f000 fa0c 	bl	8004644 <_Bfree>
 800422c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800422e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004230:	9e07      	ldr	r6, [sp, #28]
 8004232:	ea43 0102 	orr.w	r1, r3, r2
 8004236:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004238:	4319      	orrs	r1, r3
 800423a:	d110      	bne.n	800425e <_dtoa_r+0xa26>
 800423c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004240:	d029      	beq.n	8004296 <_dtoa_r+0xa5e>
 8004242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	dd02      	ble.n	800424e <_dtoa_r+0xa16>
 8004248:	9b08      	ldr	r3, [sp, #32]
 800424a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800424e:	9b02      	ldr	r3, [sp, #8]
 8004250:	f883 8000 	strb.w	r8, [r3]
 8004254:	e63b      	b.n	8003ece <_dtoa_r+0x696>
 8004256:	4628      	mov	r0, r5
 8004258:	e7bb      	b.n	80041d2 <_dtoa_r+0x99a>
 800425a:	2201      	movs	r2, #1
 800425c:	e7e1      	b.n	8004222 <_dtoa_r+0x9ea>
 800425e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	db04      	blt.n	800426e <_dtoa_r+0xa36>
 8004264:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004266:	430b      	orrs	r3, r1
 8004268:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800426a:	430b      	orrs	r3, r1
 800426c:	d120      	bne.n	80042b0 <_dtoa_r+0xa78>
 800426e:	2a00      	cmp	r2, #0
 8004270:	dded      	ble.n	800424e <_dtoa_r+0xa16>
 8004272:	4649      	mov	r1, r9
 8004274:	2201      	movs	r2, #1
 8004276:	4658      	mov	r0, fp
 8004278:	f000 fbb0 	bl	80049dc <__lshift>
 800427c:	4621      	mov	r1, r4
 800427e:	4681      	mov	r9, r0
 8004280:	f000 fc18 	bl	8004ab4 <__mcmp>
 8004284:	2800      	cmp	r0, #0
 8004286:	dc03      	bgt.n	8004290 <_dtoa_r+0xa58>
 8004288:	d1e1      	bne.n	800424e <_dtoa_r+0xa16>
 800428a:	f018 0f01 	tst.w	r8, #1
 800428e:	d0de      	beq.n	800424e <_dtoa_r+0xa16>
 8004290:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004294:	d1d8      	bne.n	8004248 <_dtoa_r+0xa10>
 8004296:	2339      	movs	r3, #57	@ 0x39
 8004298:	9a02      	ldr	r2, [sp, #8]
 800429a:	7013      	strb	r3, [r2, #0]
 800429c:	4633      	mov	r3, r6
 800429e:	461e      	mov	r6, r3
 80042a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	2a39      	cmp	r2, #57	@ 0x39
 80042a8:	d052      	beq.n	8004350 <_dtoa_r+0xb18>
 80042aa:	3201      	adds	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e60e      	b.n	8003ece <_dtoa_r+0x696>
 80042b0:	2a00      	cmp	r2, #0
 80042b2:	dd07      	ble.n	80042c4 <_dtoa_r+0xa8c>
 80042b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80042b8:	d0ed      	beq.n	8004296 <_dtoa_r+0xa5e>
 80042ba:	9a02      	ldr	r2, [sp, #8]
 80042bc:	f108 0301 	add.w	r3, r8, #1
 80042c0:	7013      	strb	r3, [r2, #0]
 80042c2:	e604      	b.n	8003ece <_dtoa_r+0x696>
 80042c4:	9b07      	ldr	r3, [sp, #28]
 80042c6:	9a07      	ldr	r2, [sp, #28]
 80042c8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80042cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d028      	beq.n	8004324 <_dtoa_r+0xaec>
 80042d2:	4649      	mov	r1, r9
 80042d4:	2300      	movs	r3, #0
 80042d6:	220a      	movs	r2, #10
 80042d8:	4658      	mov	r0, fp
 80042da:	f000 f9d5 	bl	8004688 <__multadd>
 80042de:	42af      	cmp	r7, r5
 80042e0:	4681      	mov	r9, r0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	f04f 020a 	mov.w	r2, #10
 80042ea:	4639      	mov	r1, r7
 80042ec:	4658      	mov	r0, fp
 80042ee:	d107      	bne.n	8004300 <_dtoa_r+0xac8>
 80042f0:	f000 f9ca 	bl	8004688 <__multadd>
 80042f4:	4607      	mov	r7, r0
 80042f6:	4605      	mov	r5, r0
 80042f8:	9b07      	ldr	r3, [sp, #28]
 80042fa:	3301      	adds	r3, #1
 80042fc:	9307      	str	r3, [sp, #28]
 80042fe:	e774      	b.n	80041ea <_dtoa_r+0x9b2>
 8004300:	f000 f9c2 	bl	8004688 <__multadd>
 8004304:	4629      	mov	r1, r5
 8004306:	4607      	mov	r7, r0
 8004308:	2300      	movs	r3, #0
 800430a:	220a      	movs	r2, #10
 800430c:	4658      	mov	r0, fp
 800430e:	f000 f9bb 	bl	8004688 <__multadd>
 8004312:	4605      	mov	r5, r0
 8004314:	e7f0      	b.n	80042f8 <_dtoa_r+0xac0>
 8004316:	9b08      	ldr	r3, [sp, #32]
 8004318:	2700      	movs	r7, #0
 800431a:	2b00      	cmp	r3, #0
 800431c:	bfcc      	ite	gt
 800431e:	461e      	movgt	r6, r3
 8004320:	2601      	movle	r6, #1
 8004322:	4456      	add	r6, sl
 8004324:	4649      	mov	r1, r9
 8004326:	2201      	movs	r2, #1
 8004328:	4658      	mov	r0, fp
 800432a:	f000 fb57 	bl	80049dc <__lshift>
 800432e:	4621      	mov	r1, r4
 8004330:	4681      	mov	r9, r0
 8004332:	f000 fbbf 	bl	8004ab4 <__mcmp>
 8004336:	2800      	cmp	r0, #0
 8004338:	dcb0      	bgt.n	800429c <_dtoa_r+0xa64>
 800433a:	d102      	bne.n	8004342 <_dtoa_r+0xb0a>
 800433c:	f018 0f01 	tst.w	r8, #1
 8004340:	d1ac      	bne.n	800429c <_dtoa_r+0xa64>
 8004342:	4633      	mov	r3, r6
 8004344:	461e      	mov	r6, r3
 8004346:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800434a:	2a30      	cmp	r2, #48	@ 0x30
 800434c:	d0fa      	beq.n	8004344 <_dtoa_r+0xb0c>
 800434e:	e5be      	b.n	8003ece <_dtoa_r+0x696>
 8004350:	459a      	cmp	sl, r3
 8004352:	d1a4      	bne.n	800429e <_dtoa_r+0xa66>
 8004354:	9b04      	ldr	r3, [sp, #16]
 8004356:	3301      	adds	r3, #1
 8004358:	9304      	str	r3, [sp, #16]
 800435a:	2331      	movs	r3, #49	@ 0x31
 800435c:	f88a 3000 	strb.w	r3, [sl]
 8004360:	e5b5      	b.n	8003ece <_dtoa_r+0x696>
 8004362:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004364:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80043c4 <_dtoa_r+0xb8c>
 8004368:	b11b      	cbz	r3, 8004372 <_dtoa_r+0xb3a>
 800436a:	f10a 0308 	add.w	r3, sl, #8
 800436e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	4650      	mov	r0, sl
 8004374:	b017      	add	sp, #92	@ 0x5c
 8004376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800437c:	2b01      	cmp	r3, #1
 800437e:	f77f ae3d 	ble.w	8003ffc <_dtoa_r+0x7c4>
 8004382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004384:	930a      	str	r3, [sp, #40]	@ 0x28
 8004386:	2001      	movs	r0, #1
 8004388:	e65b      	b.n	8004042 <_dtoa_r+0x80a>
 800438a:	9b08      	ldr	r3, [sp, #32]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f77f aed6 	ble.w	800413e <_dtoa_r+0x906>
 8004392:	4656      	mov	r6, sl
 8004394:	4621      	mov	r1, r4
 8004396:	4648      	mov	r0, r9
 8004398:	f7ff f9c5 	bl	8003726 <quorem>
 800439c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80043a0:	9b08      	ldr	r3, [sp, #32]
 80043a2:	f806 8b01 	strb.w	r8, [r6], #1
 80043a6:	eba6 020a 	sub.w	r2, r6, sl
 80043aa:	4293      	cmp	r3, r2
 80043ac:	ddb3      	ble.n	8004316 <_dtoa_r+0xade>
 80043ae:	4649      	mov	r1, r9
 80043b0:	2300      	movs	r3, #0
 80043b2:	220a      	movs	r2, #10
 80043b4:	4658      	mov	r0, fp
 80043b6:	f000 f967 	bl	8004688 <__multadd>
 80043ba:	4681      	mov	r9, r0
 80043bc:	e7ea      	b.n	8004394 <_dtoa_r+0xb5c>
 80043be:	bf00      	nop
 80043c0:	080055ba 	.word	0x080055ba
 80043c4:	0800553e 	.word	0x0800553e

080043c8 <_free_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4605      	mov	r5, r0
 80043cc:	2900      	cmp	r1, #0
 80043ce:	d040      	beq.n	8004452 <_free_r+0x8a>
 80043d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d4:	1f0c      	subs	r4, r1, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	bfb8      	it	lt
 80043da:	18e4      	addlt	r4, r4, r3
 80043dc:	f000 f8e6 	bl	80045ac <__malloc_lock>
 80043e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004454 <_free_r+0x8c>)
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	b933      	cbnz	r3, 80043f4 <_free_r+0x2c>
 80043e6:	6063      	str	r3, [r4, #4]
 80043e8:	6014      	str	r4, [r2, #0]
 80043ea:	4628      	mov	r0, r5
 80043ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043f0:	f000 b8e2 	b.w	80045b8 <__malloc_unlock>
 80043f4:	42a3      	cmp	r3, r4
 80043f6:	d908      	bls.n	800440a <_free_r+0x42>
 80043f8:	6820      	ldr	r0, [r4, #0]
 80043fa:	1821      	adds	r1, r4, r0
 80043fc:	428b      	cmp	r3, r1
 80043fe:	bf01      	itttt	eq
 8004400:	6819      	ldreq	r1, [r3, #0]
 8004402:	685b      	ldreq	r3, [r3, #4]
 8004404:	1809      	addeq	r1, r1, r0
 8004406:	6021      	streq	r1, [r4, #0]
 8004408:	e7ed      	b.n	80043e6 <_free_r+0x1e>
 800440a:	461a      	mov	r2, r3
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	b10b      	cbz	r3, 8004414 <_free_r+0x4c>
 8004410:	42a3      	cmp	r3, r4
 8004412:	d9fa      	bls.n	800440a <_free_r+0x42>
 8004414:	6811      	ldr	r1, [r2, #0]
 8004416:	1850      	adds	r0, r2, r1
 8004418:	42a0      	cmp	r0, r4
 800441a:	d10b      	bne.n	8004434 <_free_r+0x6c>
 800441c:	6820      	ldr	r0, [r4, #0]
 800441e:	4401      	add	r1, r0
 8004420:	1850      	adds	r0, r2, r1
 8004422:	4283      	cmp	r3, r0
 8004424:	6011      	str	r1, [r2, #0]
 8004426:	d1e0      	bne.n	80043ea <_free_r+0x22>
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4408      	add	r0, r1
 800442e:	6010      	str	r0, [r2, #0]
 8004430:	6053      	str	r3, [r2, #4]
 8004432:	e7da      	b.n	80043ea <_free_r+0x22>
 8004434:	d902      	bls.n	800443c <_free_r+0x74>
 8004436:	230c      	movs	r3, #12
 8004438:	602b      	str	r3, [r5, #0]
 800443a:	e7d6      	b.n	80043ea <_free_r+0x22>
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	1821      	adds	r1, r4, r0
 8004440:	428b      	cmp	r3, r1
 8004442:	bf01      	itttt	eq
 8004444:	6819      	ldreq	r1, [r3, #0]
 8004446:	685b      	ldreq	r3, [r3, #4]
 8004448:	1809      	addeq	r1, r1, r0
 800444a:	6021      	streq	r1, [r4, #0]
 800444c:	6063      	str	r3, [r4, #4]
 800444e:	6054      	str	r4, [r2, #4]
 8004450:	e7cb      	b.n	80043ea <_free_r+0x22>
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	20000388 	.word	0x20000388

08004458 <malloc>:
 8004458:	4b02      	ldr	r3, [pc, #8]	@ (8004464 <malloc+0xc>)
 800445a:	4601      	mov	r1, r0
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	f000 b825 	b.w	80044ac <_malloc_r>
 8004462:	bf00      	nop
 8004464:	20000018 	.word	0x20000018

08004468 <sbrk_aligned>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	4e0f      	ldr	r6, [pc, #60]	@ (80044a8 <sbrk_aligned+0x40>)
 800446c:	460c      	mov	r4, r1
 800446e:	6831      	ldr	r1, [r6, #0]
 8004470:	4605      	mov	r5, r0
 8004472:	b911      	cbnz	r1, 800447a <sbrk_aligned+0x12>
 8004474:	f000 fea2 	bl	80051bc <_sbrk_r>
 8004478:	6030      	str	r0, [r6, #0]
 800447a:	4621      	mov	r1, r4
 800447c:	4628      	mov	r0, r5
 800447e:	f000 fe9d 	bl	80051bc <_sbrk_r>
 8004482:	1c43      	adds	r3, r0, #1
 8004484:	d103      	bne.n	800448e <sbrk_aligned+0x26>
 8004486:	f04f 34ff 	mov.w	r4, #4294967295
 800448a:	4620      	mov	r0, r4
 800448c:	bd70      	pop	{r4, r5, r6, pc}
 800448e:	1cc4      	adds	r4, r0, #3
 8004490:	f024 0403 	bic.w	r4, r4, #3
 8004494:	42a0      	cmp	r0, r4
 8004496:	d0f8      	beq.n	800448a <sbrk_aligned+0x22>
 8004498:	1a21      	subs	r1, r4, r0
 800449a:	4628      	mov	r0, r5
 800449c:	f000 fe8e 	bl	80051bc <_sbrk_r>
 80044a0:	3001      	adds	r0, #1
 80044a2:	d1f2      	bne.n	800448a <sbrk_aligned+0x22>
 80044a4:	e7ef      	b.n	8004486 <sbrk_aligned+0x1e>
 80044a6:	bf00      	nop
 80044a8:	20000384 	.word	0x20000384

080044ac <_malloc_r>:
 80044ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b0:	1ccd      	adds	r5, r1, #3
 80044b2:	f025 0503 	bic.w	r5, r5, #3
 80044b6:	3508      	adds	r5, #8
 80044b8:	2d0c      	cmp	r5, #12
 80044ba:	bf38      	it	cc
 80044bc:	250c      	movcc	r5, #12
 80044be:	2d00      	cmp	r5, #0
 80044c0:	4606      	mov	r6, r0
 80044c2:	db01      	blt.n	80044c8 <_malloc_r+0x1c>
 80044c4:	42a9      	cmp	r1, r5
 80044c6:	d904      	bls.n	80044d2 <_malloc_r+0x26>
 80044c8:	230c      	movs	r3, #12
 80044ca:	6033      	str	r3, [r6, #0]
 80044cc:	2000      	movs	r0, #0
 80044ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045a8 <_malloc_r+0xfc>
 80044d6:	f000 f869 	bl	80045ac <__malloc_lock>
 80044da:	f8d8 3000 	ldr.w	r3, [r8]
 80044de:	461c      	mov	r4, r3
 80044e0:	bb44      	cbnz	r4, 8004534 <_malloc_r+0x88>
 80044e2:	4629      	mov	r1, r5
 80044e4:	4630      	mov	r0, r6
 80044e6:	f7ff ffbf 	bl	8004468 <sbrk_aligned>
 80044ea:	1c43      	adds	r3, r0, #1
 80044ec:	4604      	mov	r4, r0
 80044ee:	d158      	bne.n	80045a2 <_malloc_r+0xf6>
 80044f0:	f8d8 4000 	ldr.w	r4, [r8]
 80044f4:	4627      	mov	r7, r4
 80044f6:	2f00      	cmp	r7, #0
 80044f8:	d143      	bne.n	8004582 <_malloc_r+0xd6>
 80044fa:	2c00      	cmp	r4, #0
 80044fc:	d04b      	beq.n	8004596 <_malloc_r+0xea>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	4639      	mov	r1, r7
 8004502:	4630      	mov	r0, r6
 8004504:	eb04 0903 	add.w	r9, r4, r3
 8004508:	f000 fe58 	bl	80051bc <_sbrk_r>
 800450c:	4581      	cmp	r9, r0
 800450e:	d142      	bne.n	8004596 <_malloc_r+0xea>
 8004510:	6821      	ldr	r1, [r4, #0]
 8004512:	4630      	mov	r0, r6
 8004514:	1a6d      	subs	r5, r5, r1
 8004516:	4629      	mov	r1, r5
 8004518:	f7ff ffa6 	bl	8004468 <sbrk_aligned>
 800451c:	3001      	adds	r0, #1
 800451e:	d03a      	beq.n	8004596 <_malloc_r+0xea>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	442b      	add	r3, r5
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	f8d8 3000 	ldr.w	r3, [r8]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	bb62      	cbnz	r2, 8004588 <_malloc_r+0xdc>
 800452e:	f8c8 7000 	str.w	r7, [r8]
 8004532:	e00f      	b.n	8004554 <_malloc_r+0xa8>
 8004534:	6822      	ldr	r2, [r4, #0]
 8004536:	1b52      	subs	r2, r2, r5
 8004538:	d420      	bmi.n	800457c <_malloc_r+0xd0>
 800453a:	2a0b      	cmp	r2, #11
 800453c:	d917      	bls.n	800456e <_malloc_r+0xc2>
 800453e:	1961      	adds	r1, r4, r5
 8004540:	42a3      	cmp	r3, r4
 8004542:	6025      	str	r5, [r4, #0]
 8004544:	bf18      	it	ne
 8004546:	6059      	strne	r1, [r3, #4]
 8004548:	6863      	ldr	r3, [r4, #4]
 800454a:	bf08      	it	eq
 800454c:	f8c8 1000 	streq.w	r1, [r8]
 8004550:	5162      	str	r2, [r4, r5]
 8004552:	604b      	str	r3, [r1, #4]
 8004554:	4630      	mov	r0, r6
 8004556:	f000 f82f 	bl	80045b8 <__malloc_unlock>
 800455a:	f104 000b 	add.w	r0, r4, #11
 800455e:	1d23      	adds	r3, r4, #4
 8004560:	f020 0007 	bic.w	r0, r0, #7
 8004564:	1ac2      	subs	r2, r0, r3
 8004566:	bf1c      	itt	ne
 8004568:	1a1b      	subne	r3, r3, r0
 800456a:	50a3      	strne	r3, [r4, r2]
 800456c:	e7af      	b.n	80044ce <_malloc_r+0x22>
 800456e:	6862      	ldr	r2, [r4, #4]
 8004570:	42a3      	cmp	r3, r4
 8004572:	bf0c      	ite	eq
 8004574:	f8c8 2000 	streq.w	r2, [r8]
 8004578:	605a      	strne	r2, [r3, #4]
 800457a:	e7eb      	b.n	8004554 <_malloc_r+0xa8>
 800457c:	4623      	mov	r3, r4
 800457e:	6864      	ldr	r4, [r4, #4]
 8004580:	e7ae      	b.n	80044e0 <_malloc_r+0x34>
 8004582:	463c      	mov	r4, r7
 8004584:	687f      	ldr	r7, [r7, #4]
 8004586:	e7b6      	b.n	80044f6 <_malloc_r+0x4a>
 8004588:	461a      	mov	r2, r3
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	42a3      	cmp	r3, r4
 800458e:	d1fb      	bne.n	8004588 <_malloc_r+0xdc>
 8004590:	2300      	movs	r3, #0
 8004592:	6053      	str	r3, [r2, #4]
 8004594:	e7de      	b.n	8004554 <_malloc_r+0xa8>
 8004596:	230c      	movs	r3, #12
 8004598:	4630      	mov	r0, r6
 800459a:	6033      	str	r3, [r6, #0]
 800459c:	f000 f80c 	bl	80045b8 <__malloc_unlock>
 80045a0:	e794      	b.n	80044cc <_malloc_r+0x20>
 80045a2:	6005      	str	r5, [r0, #0]
 80045a4:	e7d6      	b.n	8004554 <_malloc_r+0xa8>
 80045a6:	bf00      	nop
 80045a8:	20000388 	.word	0x20000388

080045ac <__malloc_lock>:
 80045ac:	4801      	ldr	r0, [pc, #4]	@ (80045b4 <__malloc_lock+0x8>)
 80045ae:	f7ff b8aa 	b.w	8003706 <__retarget_lock_acquire_recursive>
 80045b2:	bf00      	nop
 80045b4:	20000380 	.word	0x20000380

080045b8 <__malloc_unlock>:
 80045b8:	4801      	ldr	r0, [pc, #4]	@ (80045c0 <__malloc_unlock+0x8>)
 80045ba:	f7ff b8a5 	b.w	8003708 <__retarget_lock_release_recursive>
 80045be:	bf00      	nop
 80045c0:	20000380 	.word	0x20000380

080045c4 <_Balloc>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	69c6      	ldr	r6, [r0, #28]
 80045c8:	4604      	mov	r4, r0
 80045ca:	460d      	mov	r5, r1
 80045cc:	b976      	cbnz	r6, 80045ec <_Balloc+0x28>
 80045ce:	2010      	movs	r0, #16
 80045d0:	f7ff ff42 	bl	8004458 <malloc>
 80045d4:	4602      	mov	r2, r0
 80045d6:	61e0      	str	r0, [r4, #28]
 80045d8:	b920      	cbnz	r0, 80045e4 <_Balloc+0x20>
 80045da:	216b      	movs	r1, #107	@ 0x6b
 80045dc:	4b17      	ldr	r3, [pc, #92]	@ (800463c <_Balloc+0x78>)
 80045de:	4818      	ldr	r0, [pc, #96]	@ (8004640 <_Balloc+0x7c>)
 80045e0:	f000 fe0a 	bl	80051f8 <__assert_func>
 80045e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045e8:	6006      	str	r6, [r0, #0]
 80045ea:	60c6      	str	r6, [r0, #12]
 80045ec:	69e6      	ldr	r6, [r4, #28]
 80045ee:	68f3      	ldr	r3, [r6, #12]
 80045f0:	b183      	cbz	r3, 8004614 <_Balloc+0x50>
 80045f2:	69e3      	ldr	r3, [r4, #28]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80045fa:	b9b8      	cbnz	r0, 800462c <_Balloc+0x68>
 80045fc:	2101      	movs	r1, #1
 80045fe:	fa01 f605 	lsl.w	r6, r1, r5
 8004602:	1d72      	adds	r2, r6, #5
 8004604:	4620      	mov	r0, r4
 8004606:	0092      	lsls	r2, r2, #2
 8004608:	f000 fe14 	bl	8005234 <_calloc_r>
 800460c:	b160      	cbz	r0, 8004628 <_Balloc+0x64>
 800460e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004612:	e00e      	b.n	8004632 <_Balloc+0x6e>
 8004614:	2221      	movs	r2, #33	@ 0x21
 8004616:	2104      	movs	r1, #4
 8004618:	4620      	mov	r0, r4
 800461a:	f000 fe0b 	bl	8005234 <_calloc_r>
 800461e:	69e3      	ldr	r3, [r4, #28]
 8004620:	60f0      	str	r0, [r6, #12]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e4      	bne.n	80045f2 <_Balloc+0x2e>
 8004628:	2000      	movs	r0, #0
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	6802      	ldr	r2, [r0, #0]
 800462e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004632:	2300      	movs	r3, #0
 8004634:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004638:	e7f7      	b.n	800462a <_Balloc+0x66>
 800463a:	bf00      	nop
 800463c:	0800554b 	.word	0x0800554b
 8004640:	080055cb 	.word	0x080055cb

08004644 <_Bfree>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	69c6      	ldr	r6, [r0, #28]
 8004648:	4605      	mov	r5, r0
 800464a:	460c      	mov	r4, r1
 800464c:	b976      	cbnz	r6, 800466c <_Bfree+0x28>
 800464e:	2010      	movs	r0, #16
 8004650:	f7ff ff02 	bl	8004458 <malloc>
 8004654:	4602      	mov	r2, r0
 8004656:	61e8      	str	r0, [r5, #28]
 8004658:	b920      	cbnz	r0, 8004664 <_Bfree+0x20>
 800465a:	218f      	movs	r1, #143	@ 0x8f
 800465c:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <_Bfree+0x3c>)
 800465e:	4809      	ldr	r0, [pc, #36]	@ (8004684 <_Bfree+0x40>)
 8004660:	f000 fdca 	bl	80051f8 <__assert_func>
 8004664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004668:	6006      	str	r6, [r0, #0]
 800466a:	60c6      	str	r6, [r0, #12]
 800466c:	b13c      	cbz	r4, 800467e <_Bfree+0x3a>
 800466e:	69eb      	ldr	r3, [r5, #28]
 8004670:	6862      	ldr	r2, [r4, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004678:	6021      	str	r1, [r4, #0]
 800467a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800467e:	bd70      	pop	{r4, r5, r6, pc}
 8004680:	0800554b 	.word	0x0800554b
 8004684:	080055cb 	.word	0x080055cb

08004688 <__multadd>:
 8004688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468c:	4607      	mov	r7, r0
 800468e:	460c      	mov	r4, r1
 8004690:	461e      	mov	r6, r3
 8004692:	2000      	movs	r0, #0
 8004694:	690d      	ldr	r5, [r1, #16]
 8004696:	f101 0c14 	add.w	ip, r1, #20
 800469a:	f8dc 3000 	ldr.w	r3, [ip]
 800469e:	3001      	adds	r0, #1
 80046a0:	b299      	uxth	r1, r3
 80046a2:	fb02 6101 	mla	r1, r2, r1, r6
 80046a6:	0c1e      	lsrs	r6, r3, #16
 80046a8:	0c0b      	lsrs	r3, r1, #16
 80046aa:	fb02 3306 	mla	r3, r2, r6, r3
 80046ae:	b289      	uxth	r1, r1
 80046b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80046b4:	4285      	cmp	r5, r0
 80046b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80046ba:	f84c 1b04 	str.w	r1, [ip], #4
 80046be:	dcec      	bgt.n	800469a <__multadd+0x12>
 80046c0:	b30e      	cbz	r6, 8004706 <__multadd+0x7e>
 80046c2:	68a3      	ldr	r3, [r4, #8]
 80046c4:	42ab      	cmp	r3, r5
 80046c6:	dc19      	bgt.n	80046fc <__multadd+0x74>
 80046c8:	6861      	ldr	r1, [r4, #4]
 80046ca:	4638      	mov	r0, r7
 80046cc:	3101      	adds	r1, #1
 80046ce:	f7ff ff79 	bl	80045c4 <_Balloc>
 80046d2:	4680      	mov	r8, r0
 80046d4:	b928      	cbnz	r0, 80046e2 <__multadd+0x5a>
 80046d6:	4602      	mov	r2, r0
 80046d8:	21ba      	movs	r1, #186	@ 0xba
 80046da:	4b0c      	ldr	r3, [pc, #48]	@ (800470c <__multadd+0x84>)
 80046dc:	480c      	ldr	r0, [pc, #48]	@ (8004710 <__multadd+0x88>)
 80046de:	f000 fd8b 	bl	80051f8 <__assert_func>
 80046e2:	6922      	ldr	r2, [r4, #16]
 80046e4:	f104 010c 	add.w	r1, r4, #12
 80046e8:	3202      	adds	r2, #2
 80046ea:	0092      	lsls	r2, r2, #2
 80046ec:	300c      	adds	r0, #12
 80046ee:	f000 fd75 	bl	80051dc <memcpy>
 80046f2:	4621      	mov	r1, r4
 80046f4:	4638      	mov	r0, r7
 80046f6:	f7ff ffa5 	bl	8004644 <_Bfree>
 80046fa:	4644      	mov	r4, r8
 80046fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004700:	3501      	adds	r5, #1
 8004702:	615e      	str	r6, [r3, #20]
 8004704:	6125      	str	r5, [r4, #16]
 8004706:	4620      	mov	r0, r4
 8004708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800470c:	080055ba 	.word	0x080055ba
 8004710:	080055cb 	.word	0x080055cb

08004714 <__hi0bits>:
 8004714:	4603      	mov	r3, r0
 8004716:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800471a:	bf3a      	itte	cc
 800471c:	0403      	lslcc	r3, r0, #16
 800471e:	2010      	movcc	r0, #16
 8004720:	2000      	movcs	r0, #0
 8004722:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004726:	bf3c      	itt	cc
 8004728:	021b      	lslcc	r3, r3, #8
 800472a:	3008      	addcc	r0, #8
 800472c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004730:	bf3c      	itt	cc
 8004732:	011b      	lslcc	r3, r3, #4
 8004734:	3004      	addcc	r0, #4
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473a:	bf3c      	itt	cc
 800473c:	009b      	lslcc	r3, r3, #2
 800473e:	3002      	addcc	r0, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	db05      	blt.n	8004750 <__hi0bits+0x3c>
 8004744:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004748:	f100 0001 	add.w	r0, r0, #1
 800474c:	bf08      	it	eq
 800474e:	2020      	moveq	r0, #32
 8004750:	4770      	bx	lr

08004752 <__lo0bits>:
 8004752:	6803      	ldr	r3, [r0, #0]
 8004754:	4602      	mov	r2, r0
 8004756:	f013 0007 	ands.w	r0, r3, #7
 800475a:	d00b      	beq.n	8004774 <__lo0bits+0x22>
 800475c:	07d9      	lsls	r1, r3, #31
 800475e:	d421      	bmi.n	80047a4 <__lo0bits+0x52>
 8004760:	0798      	lsls	r0, r3, #30
 8004762:	bf49      	itett	mi
 8004764:	085b      	lsrmi	r3, r3, #1
 8004766:	089b      	lsrpl	r3, r3, #2
 8004768:	2001      	movmi	r0, #1
 800476a:	6013      	strmi	r3, [r2, #0]
 800476c:	bf5c      	itt	pl
 800476e:	2002      	movpl	r0, #2
 8004770:	6013      	strpl	r3, [r2, #0]
 8004772:	4770      	bx	lr
 8004774:	b299      	uxth	r1, r3
 8004776:	b909      	cbnz	r1, 800477c <__lo0bits+0x2a>
 8004778:	2010      	movs	r0, #16
 800477a:	0c1b      	lsrs	r3, r3, #16
 800477c:	b2d9      	uxtb	r1, r3
 800477e:	b909      	cbnz	r1, 8004784 <__lo0bits+0x32>
 8004780:	3008      	adds	r0, #8
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	0719      	lsls	r1, r3, #28
 8004786:	bf04      	itt	eq
 8004788:	091b      	lsreq	r3, r3, #4
 800478a:	3004      	addeq	r0, #4
 800478c:	0799      	lsls	r1, r3, #30
 800478e:	bf04      	itt	eq
 8004790:	089b      	lsreq	r3, r3, #2
 8004792:	3002      	addeq	r0, #2
 8004794:	07d9      	lsls	r1, r3, #31
 8004796:	d403      	bmi.n	80047a0 <__lo0bits+0x4e>
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	f100 0001 	add.w	r0, r0, #1
 800479e:	d003      	beq.n	80047a8 <__lo0bits+0x56>
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	4770      	bx	lr
 80047a4:	2000      	movs	r0, #0
 80047a6:	4770      	bx	lr
 80047a8:	2020      	movs	r0, #32
 80047aa:	4770      	bx	lr

080047ac <__i2b>:
 80047ac:	b510      	push	{r4, lr}
 80047ae:	460c      	mov	r4, r1
 80047b0:	2101      	movs	r1, #1
 80047b2:	f7ff ff07 	bl	80045c4 <_Balloc>
 80047b6:	4602      	mov	r2, r0
 80047b8:	b928      	cbnz	r0, 80047c6 <__i2b+0x1a>
 80047ba:	f240 1145 	movw	r1, #325	@ 0x145
 80047be:	4b04      	ldr	r3, [pc, #16]	@ (80047d0 <__i2b+0x24>)
 80047c0:	4804      	ldr	r0, [pc, #16]	@ (80047d4 <__i2b+0x28>)
 80047c2:	f000 fd19 	bl	80051f8 <__assert_func>
 80047c6:	2301      	movs	r3, #1
 80047c8:	6144      	str	r4, [r0, #20]
 80047ca:	6103      	str	r3, [r0, #16]
 80047cc:	bd10      	pop	{r4, pc}
 80047ce:	bf00      	nop
 80047d0:	080055ba 	.word	0x080055ba
 80047d4:	080055cb 	.word	0x080055cb

080047d8 <__multiply>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	4614      	mov	r4, r2
 80047de:	690a      	ldr	r2, [r1, #16]
 80047e0:	6923      	ldr	r3, [r4, #16]
 80047e2:	460f      	mov	r7, r1
 80047e4:	429a      	cmp	r2, r3
 80047e6:	bfa2      	ittt	ge
 80047e8:	4623      	movge	r3, r4
 80047ea:	460c      	movge	r4, r1
 80047ec:	461f      	movge	r7, r3
 80047ee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80047f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80047f6:	68a3      	ldr	r3, [r4, #8]
 80047f8:	6861      	ldr	r1, [r4, #4]
 80047fa:	eb0a 0609 	add.w	r6, sl, r9
 80047fe:	42b3      	cmp	r3, r6
 8004800:	b085      	sub	sp, #20
 8004802:	bfb8      	it	lt
 8004804:	3101      	addlt	r1, #1
 8004806:	f7ff fedd 	bl	80045c4 <_Balloc>
 800480a:	b930      	cbnz	r0, 800481a <__multiply+0x42>
 800480c:	4602      	mov	r2, r0
 800480e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004812:	4b43      	ldr	r3, [pc, #268]	@ (8004920 <__multiply+0x148>)
 8004814:	4843      	ldr	r0, [pc, #268]	@ (8004924 <__multiply+0x14c>)
 8004816:	f000 fcef 	bl	80051f8 <__assert_func>
 800481a:	f100 0514 	add.w	r5, r0, #20
 800481e:	462b      	mov	r3, r5
 8004820:	2200      	movs	r2, #0
 8004822:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004826:	4543      	cmp	r3, r8
 8004828:	d321      	bcc.n	800486e <__multiply+0x96>
 800482a:	f107 0114 	add.w	r1, r7, #20
 800482e:	f104 0214 	add.w	r2, r4, #20
 8004832:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004836:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800483a:	9302      	str	r3, [sp, #8]
 800483c:	1b13      	subs	r3, r2, r4
 800483e:	3b15      	subs	r3, #21
 8004840:	f023 0303 	bic.w	r3, r3, #3
 8004844:	3304      	adds	r3, #4
 8004846:	f104 0715 	add.w	r7, r4, #21
 800484a:	42ba      	cmp	r2, r7
 800484c:	bf38      	it	cc
 800484e:	2304      	movcc	r3, #4
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	9b02      	ldr	r3, [sp, #8]
 8004854:	9103      	str	r1, [sp, #12]
 8004856:	428b      	cmp	r3, r1
 8004858:	d80c      	bhi.n	8004874 <__multiply+0x9c>
 800485a:	2e00      	cmp	r6, #0
 800485c:	dd03      	ble.n	8004866 <__multiply+0x8e>
 800485e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004862:	2b00      	cmp	r3, #0
 8004864:	d05a      	beq.n	800491c <__multiply+0x144>
 8004866:	6106      	str	r6, [r0, #16]
 8004868:	b005      	add	sp, #20
 800486a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486e:	f843 2b04 	str.w	r2, [r3], #4
 8004872:	e7d8      	b.n	8004826 <__multiply+0x4e>
 8004874:	f8b1 a000 	ldrh.w	sl, [r1]
 8004878:	f1ba 0f00 	cmp.w	sl, #0
 800487c:	d023      	beq.n	80048c6 <__multiply+0xee>
 800487e:	46a9      	mov	r9, r5
 8004880:	f04f 0c00 	mov.w	ip, #0
 8004884:	f104 0e14 	add.w	lr, r4, #20
 8004888:	f85e 7b04 	ldr.w	r7, [lr], #4
 800488c:	f8d9 3000 	ldr.w	r3, [r9]
 8004890:	fa1f fb87 	uxth.w	fp, r7
 8004894:	b29b      	uxth	r3, r3
 8004896:	fb0a 330b 	mla	r3, sl, fp, r3
 800489a:	4463      	add	r3, ip
 800489c:	f8d9 c000 	ldr.w	ip, [r9]
 80048a0:	0c3f      	lsrs	r7, r7, #16
 80048a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80048a6:	fb0a c707 	mla	r7, sl, r7, ip
 80048aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80048b4:	4572      	cmp	r2, lr
 80048b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80048ba:	f849 3b04 	str.w	r3, [r9], #4
 80048be:	d8e3      	bhi.n	8004888 <__multiply+0xb0>
 80048c0:	9b01      	ldr	r3, [sp, #4]
 80048c2:	f845 c003 	str.w	ip, [r5, r3]
 80048c6:	9b03      	ldr	r3, [sp, #12]
 80048c8:	3104      	adds	r1, #4
 80048ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80048ce:	f1b9 0f00 	cmp.w	r9, #0
 80048d2:	d021      	beq.n	8004918 <__multiply+0x140>
 80048d4:	46ae      	mov	lr, r5
 80048d6:	f04f 0a00 	mov.w	sl, #0
 80048da:	682b      	ldr	r3, [r5, #0]
 80048dc:	f104 0c14 	add.w	ip, r4, #20
 80048e0:	f8bc b000 	ldrh.w	fp, [ip]
 80048e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	fb09 770b 	mla	r7, r9, fp, r7
 80048ee:	4457      	add	r7, sl
 80048f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80048f4:	f84e 3b04 	str.w	r3, [lr], #4
 80048f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80048fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004900:	f8be 3000 	ldrh.w	r3, [lr]
 8004904:	4562      	cmp	r2, ip
 8004906:	fb09 330a 	mla	r3, r9, sl, r3
 800490a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800490e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004912:	d8e5      	bhi.n	80048e0 <__multiply+0x108>
 8004914:	9f01      	ldr	r7, [sp, #4]
 8004916:	51eb      	str	r3, [r5, r7]
 8004918:	3504      	adds	r5, #4
 800491a:	e79a      	b.n	8004852 <__multiply+0x7a>
 800491c:	3e01      	subs	r6, #1
 800491e:	e79c      	b.n	800485a <__multiply+0x82>
 8004920:	080055ba 	.word	0x080055ba
 8004924:	080055cb 	.word	0x080055cb

08004928 <__pow5mult>:
 8004928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800492c:	4615      	mov	r5, r2
 800492e:	f012 0203 	ands.w	r2, r2, #3
 8004932:	4607      	mov	r7, r0
 8004934:	460e      	mov	r6, r1
 8004936:	d007      	beq.n	8004948 <__pow5mult+0x20>
 8004938:	4c25      	ldr	r4, [pc, #148]	@ (80049d0 <__pow5mult+0xa8>)
 800493a:	3a01      	subs	r2, #1
 800493c:	2300      	movs	r3, #0
 800493e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004942:	f7ff fea1 	bl	8004688 <__multadd>
 8004946:	4606      	mov	r6, r0
 8004948:	10ad      	asrs	r5, r5, #2
 800494a:	d03d      	beq.n	80049c8 <__pow5mult+0xa0>
 800494c:	69fc      	ldr	r4, [r7, #28]
 800494e:	b97c      	cbnz	r4, 8004970 <__pow5mult+0x48>
 8004950:	2010      	movs	r0, #16
 8004952:	f7ff fd81 	bl	8004458 <malloc>
 8004956:	4602      	mov	r2, r0
 8004958:	61f8      	str	r0, [r7, #28]
 800495a:	b928      	cbnz	r0, 8004968 <__pow5mult+0x40>
 800495c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004960:	4b1c      	ldr	r3, [pc, #112]	@ (80049d4 <__pow5mult+0xac>)
 8004962:	481d      	ldr	r0, [pc, #116]	@ (80049d8 <__pow5mult+0xb0>)
 8004964:	f000 fc48 	bl	80051f8 <__assert_func>
 8004968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800496c:	6004      	str	r4, [r0, #0]
 800496e:	60c4      	str	r4, [r0, #12]
 8004970:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004978:	b94c      	cbnz	r4, 800498e <__pow5mult+0x66>
 800497a:	f240 2171 	movw	r1, #625	@ 0x271
 800497e:	4638      	mov	r0, r7
 8004980:	f7ff ff14 	bl	80047ac <__i2b>
 8004984:	2300      	movs	r3, #0
 8004986:	4604      	mov	r4, r0
 8004988:	f8c8 0008 	str.w	r0, [r8, #8]
 800498c:	6003      	str	r3, [r0, #0]
 800498e:	f04f 0900 	mov.w	r9, #0
 8004992:	07eb      	lsls	r3, r5, #31
 8004994:	d50a      	bpl.n	80049ac <__pow5mult+0x84>
 8004996:	4631      	mov	r1, r6
 8004998:	4622      	mov	r2, r4
 800499a:	4638      	mov	r0, r7
 800499c:	f7ff ff1c 	bl	80047d8 <__multiply>
 80049a0:	4680      	mov	r8, r0
 80049a2:	4631      	mov	r1, r6
 80049a4:	4638      	mov	r0, r7
 80049a6:	f7ff fe4d 	bl	8004644 <_Bfree>
 80049aa:	4646      	mov	r6, r8
 80049ac:	106d      	asrs	r5, r5, #1
 80049ae:	d00b      	beq.n	80049c8 <__pow5mult+0xa0>
 80049b0:	6820      	ldr	r0, [r4, #0]
 80049b2:	b938      	cbnz	r0, 80049c4 <__pow5mult+0x9c>
 80049b4:	4622      	mov	r2, r4
 80049b6:	4621      	mov	r1, r4
 80049b8:	4638      	mov	r0, r7
 80049ba:	f7ff ff0d 	bl	80047d8 <__multiply>
 80049be:	6020      	str	r0, [r4, #0]
 80049c0:	f8c0 9000 	str.w	r9, [r0]
 80049c4:	4604      	mov	r4, r0
 80049c6:	e7e4      	b.n	8004992 <__pow5mult+0x6a>
 80049c8:	4630      	mov	r0, r6
 80049ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ce:	bf00      	nop
 80049d0:	08005624 	.word	0x08005624
 80049d4:	0800554b 	.word	0x0800554b
 80049d8:	080055cb 	.word	0x080055cb

080049dc <__lshift>:
 80049dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e0:	460c      	mov	r4, r1
 80049e2:	4607      	mov	r7, r0
 80049e4:	4691      	mov	r9, r2
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	6849      	ldr	r1, [r1, #4]
 80049ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80049ee:	68a3      	ldr	r3, [r4, #8]
 80049f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80049f4:	f108 0601 	add.w	r6, r8, #1
 80049f8:	42b3      	cmp	r3, r6
 80049fa:	db0b      	blt.n	8004a14 <__lshift+0x38>
 80049fc:	4638      	mov	r0, r7
 80049fe:	f7ff fde1 	bl	80045c4 <_Balloc>
 8004a02:	4605      	mov	r5, r0
 8004a04:	b948      	cbnz	r0, 8004a1a <__lshift+0x3e>
 8004a06:	4602      	mov	r2, r0
 8004a08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004a0c:	4b27      	ldr	r3, [pc, #156]	@ (8004aac <__lshift+0xd0>)
 8004a0e:	4828      	ldr	r0, [pc, #160]	@ (8004ab0 <__lshift+0xd4>)
 8004a10:	f000 fbf2 	bl	80051f8 <__assert_func>
 8004a14:	3101      	adds	r1, #1
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	e7ee      	b.n	80049f8 <__lshift+0x1c>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f100 0114 	add.w	r1, r0, #20
 8004a20:	f100 0210 	add.w	r2, r0, #16
 8004a24:	4618      	mov	r0, r3
 8004a26:	4553      	cmp	r3, sl
 8004a28:	db33      	blt.n	8004a92 <__lshift+0xb6>
 8004a2a:	6920      	ldr	r0, [r4, #16]
 8004a2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004a30:	f104 0314 	add.w	r3, r4, #20
 8004a34:	f019 091f 	ands.w	r9, r9, #31
 8004a38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004a3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004a40:	d02b      	beq.n	8004a9a <__lshift+0xbe>
 8004a42:	468a      	mov	sl, r1
 8004a44:	2200      	movs	r2, #0
 8004a46:	f1c9 0e20 	rsb	lr, r9, #32
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	fa00 f009 	lsl.w	r0, r0, r9
 8004a50:	4310      	orrs	r0, r2
 8004a52:	f84a 0b04 	str.w	r0, [sl], #4
 8004a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a5a:	459c      	cmp	ip, r3
 8004a5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004a60:	d8f3      	bhi.n	8004a4a <__lshift+0x6e>
 8004a62:	ebac 0304 	sub.w	r3, ip, r4
 8004a66:	3b15      	subs	r3, #21
 8004a68:	f023 0303 	bic.w	r3, r3, #3
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	f104 0015 	add.w	r0, r4, #21
 8004a72:	4584      	cmp	ip, r0
 8004a74:	bf38      	it	cc
 8004a76:	2304      	movcc	r3, #4
 8004a78:	50ca      	str	r2, [r1, r3]
 8004a7a:	b10a      	cbz	r2, 8004a80 <__lshift+0xa4>
 8004a7c:	f108 0602 	add.w	r6, r8, #2
 8004a80:	3e01      	subs	r6, #1
 8004a82:	4638      	mov	r0, r7
 8004a84:	4621      	mov	r1, r4
 8004a86:	612e      	str	r6, [r5, #16]
 8004a88:	f7ff fddc 	bl	8004644 <_Bfree>
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a92:	f842 0f04 	str.w	r0, [r2, #4]!
 8004a96:	3301      	adds	r3, #1
 8004a98:	e7c5      	b.n	8004a26 <__lshift+0x4a>
 8004a9a:	3904      	subs	r1, #4
 8004a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aa0:	459c      	cmp	ip, r3
 8004aa2:	f841 2f04 	str.w	r2, [r1, #4]!
 8004aa6:	d8f9      	bhi.n	8004a9c <__lshift+0xc0>
 8004aa8:	e7ea      	b.n	8004a80 <__lshift+0xa4>
 8004aaa:	bf00      	nop
 8004aac:	080055ba 	.word	0x080055ba
 8004ab0:	080055cb 	.word	0x080055cb

08004ab4 <__mcmp>:
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	690a      	ldr	r2, [r1, #16]
 8004ab8:	6900      	ldr	r0, [r0, #16]
 8004aba:	b530      	push	{r4, r5, lr}
 8004abc:	1a80      	subs	r0, r0, r2
 8004abe:	d10e      	bne.n	8004ade <__mcmp+0x2a>
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	3114      	adds	r1, #20
 8004ac4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004ac8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004acc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004ad0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004ad4:	4295      	cmp	r5, r2
 8004ad6:	d003      	beq.n	8004ae0 <__mcmp+0x2c>
 8004ad8:	d205      	bcs.n	8004ae6 <__mcmp+0x32>
 8004ada:	f04f 30ff 	mov.w	r0, #4294967295
 8004ade:	bd30      	pop	{r4, r5, pc}
 8004ae0:	42a3      	cmp	r3, r4
 8004ae2:	d3f3      	bcc.n	8004acc <__mcmp+0x18>
 8004ae4:	e7fb      	b.n	8004ade <__mcmp+0x2a>
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	e7f9      	b.n	8004ade <__mcmp+0x2a>
	...

08004aec <__mdiff>:
 8004aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af0:	4689      	mov	r9, r1
 8004af2:	4606      	mov	r6, r0
 8004af4:	4611      	mov	r1, r2
 8004af6:	4648      	mov	r0, r9
 8004af8:	4614      	mov	r4, r2
 8004afa:	f7ff ffdb 	bl	8004ab4 <__mcmp>
 8004afe:	1e05      	subs	r5, r0, #0
 8004b00:	d112      	bne.n	8004b28 <__mdiff+0x3c>
 8004b02:	4629      	mov	r1, r5
 8004b04:	4630      	mov	r0, r6
 8004b06:	f7ff fd5d 	bl	80045c4 <_Balloc>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	b928      	cbnz	r0, 8004b1a <__mdiff+0x2e>
 8004b0e:	f240 2137 	movw	r1, #567	@ 0x237
 8004b12:	4b3e      	ldr	r3, [pc, #248]	@ (8004c0c <__mdiff+0x120>)
 8004b14:	483e      	ldr	r0, [pc, #248]	@ (8004c10 <__mdiff+0x124>)
 8004b16:	f000 fb6f 	bl	80051f8 <__assert_func>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004b20:	4610      	mov	r0, r2
 8004b22:	b003      	add	sp, #12
 8004b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b28:	bfbc      	itt	lt
 8004b2a:	464b      	movlt	r3, r9
 8004b2c:	46a1      	movlt	r9, r4
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004b34:	bfba      	itte	lt
 8004b36:	461c      	movlt	r4, r3
 8004b38:	2501      	movlt	r5, #1
 8004b3a:	2500      	movge	r5, #0
 8004b3c:	f7ff fd42 	bl	80045c4 <_Balloc>
 8004b40:	4602      	mov	r2, r0
 8004b42:	b918      	cbnz	r0, 8004b4c <__mdiff+0x60>
 8004b44:	f240 2145 	movw	r1, #581	@ 0x245
 8004b48:	4b30      	ldr	r3, [pc, #192]	@ (8004c0c <__mdiff+0x120>)
 8004b4a:	e7e3      	b.n	8004b14 <__mdiff+0x28>
 8004b4c:	f100 0b14 	add.w	fp, r0, #20
 8004b50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004b54:	f109 0310 	add.w	r3, r9, #16
 8004b58:	60c5      	str	r5, [r0, #12]
 8004b5a:	f04f 0c00 	mov.w	ip, #0
 8004b5e:	f109 0514 	add.w	r5, r9, #20
 8004b62:	46d9      	mov	r9, fp
 8004b64:	6926      	ldr	r6, [r4, #16]
 8004b66:	f104 0e14 	add.w	lr, r4, #20
 8004b6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004b6e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	9b01      	ldr	r3, [sp, #4]
 8004b76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004b7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004b7e:	b281      	uxth	r1, r0
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	fa1f f38a 	uxth.w	r3, sl
 8004b86:	1a5b      	subs	r3, r3, r1
 8004b88:	0c00      	lsrs	r0, r0, #16
 8004b8a:	4463      	add	r3, ip
 8004b8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004b90:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004b9a:	4576      	cmp	r6, lr
 8004b9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004ba0:	f849 3b04 	str.w	r3, [r9], #4
 8004ba4:	d8e6      	bhi.n	8004b74 <__mdiff+0x88>
 8004ba6:	1b33      	subs	r3, r6, r4
 8004ba8:	3b15      	subs	r3, #21
 8004baa:	f023 0303 	bic.w	r3, r3, #3
 8004bae:	3415      	adds	r4, #21
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	42a6      	cmp	r6, r4
 8004bb4:	bf38      	it	cc
 8004bb6:	2304      	movcc	r3, #4
 8004bb8:	441d      	add	r5, r3
 8004bba:	445b      	add	r3, fp
 8004bbc:	461e      	mov	r6, r3
 8004bbe:	462c      	mov	r4, r5
 8004bc0:	4544      	cmp	r4, r8
 8004bc2:	d30e      	bcc.n	8004be2 <__mdiff+0xf6>
 8004bc4:	f108 0103 	add.w	r1, r8, #3
 8004bc8:	1b49      	subs	r1, r1, r5
 8004bca:	f021 0103 	bic.w	r1, r1, #3
 8004bce:	3d03      	subs	r5, #3
 8004bd0:	45a8      	cmp	r8, r5
 8004bd2:	bf38      	it	cc
 8004bd4:	2100      	movcc	r1, #0
 8004bd6:	440b      	add	r3, r1
 8004bd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004bdc:	b199      	cbz	r1, 8004c06 <__mdiff+0x11a>
 8004bde:	6117      	str	r7, [r2, #16]
 8004be0:	e79e      	b.n	8004b20 <__mdiff+0x34>
 8004be2:	46e6      	mov	lr, ip
 8004be4:	f854 1b04 	ldr.w	r1, [r4], #4
 8004be8:	fa1f fc81 	uxth.w	ip, r1
 8004bec:	44f4      	add	ip, lr
 8004bee:	0c08      	lsrs	r0, r1, #16
 8004bf0:	4471      	add	r1, lr
 8004bf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004bf6:	b289      	uxth	r1, r1
 8004bf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004bfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004c00:	f846 1b04 	str.w	r1, [r6], #4
 8004c04:	e7dc      	b.n	8004bc0 <__mdiff+0xd4>
 8004c06:	3f01      	subs	r7, #1
 8004c08:	e7e6      	b.n	8004bd8 <__mdiff+0xec>
 8004c0a:	bf00      	nop
 8004c0c:	080055ba 	.word	0x080055ba
 8004c10:	080055cb 	.word	0x080055cb

08004c14 <__d2b>:
 8004c14:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004c18:	2101      	movs	r1, #1
 8004c1a:	4690      	mov	r8, r2
 8004c1c:	4699      	mov	r9, r3
 8004c1e:	9e08      	ldr	r6, [sp, #32]
 8004c20:	f7ff fcd0 	bl	80045c4 <_Balloc>
 8004c24:	4604      	mov	r4, r0
 8004c26:	b930      	cbnz	r0, 8004c36 <__d2b+0x22>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	f240 310f 	movw	r1, #783	@ 0x30f
 8004c2e:	4b23      	ldr	r3, [pc, #140]	@ (8004cbc <__d2b+0xa8>)
 8004c30:	4823      	ldr	r0, [pc, #140]	@ (8004cc0 <__d2b+0xac>)
 8004c32:	f000 fae1 	bl	80051f8 <__assert_func>
 8004c36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004c3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c3e:	b10d      	cbz	r5, 8004c44 <__d2b+0x30>
 8004c40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	f1b8 0300 	subs.w	r3, r8, #0
 8004c4a:	d024      	beq.n	8004c96 <__d2b+0x82>
 8004c4c:	4668      	mov	r0, sp
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	f7ff fd7f 	bl	8004752 <__lo0bits>
 8004c54:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004c58:	b1d8      	cbz	r0, 8004c92 <__d2b+0x7e>
 8004c5a:	f1c0 0320 	rsb	r3, r0, #32
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	430b      	orrs	r3, r1
 8004c64:	40c2      	lsrs	r2, r0
 8004c66:	6163      	str	r3, [r4, #20]
 8004c68:	9201      	str	r2, [sp, #4]
 8004c6a:	9b01      	ldr	r3, [sp, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf0c      	ite	eq
 8004c70:	2201      	moveq	r2, #1
 8004c72:	2202      	movne	r2, #2
 8004c74:	61a3      	str	r3, [r4, #24]
 8004c76:	6122      	str	r2, [r4, #16]
 8004c78:	b1ad      	cbz	r5, 8004ca6 <__d2b+0x92>
 8004c7a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004c7e:	4405      	add	r5, r0
 8004c80:	6035      	str	r5, [r6, #0]
 8004c82:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c88:	6018      	str	r0, [r3, #0]
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	b002      	add	sp, #8
 8004c8e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004c92:	6161      	str	r1, [r4, #20]
 8004c94:	e7e9      	b.n	8004c6a <__d2b+0x56>
 8004c96:	a801      	add	r0, sp, #4
 8004c98:	f7ff fd5b 	bl	8004752 <__lo0bits>
 8004c9c:	9b01      	ldr	r3, [sp, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	6163      	str	r3, [r4, #20]
 8004ca2:	3020      	adds	r0, #32
 8004ca4:	e7e7      	b.n	8004c76 <__d2b+0x62>
 8004ca6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004caa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004cae:	6030      	str	r0, [r6, #0]
 8004cb0:	6918      	ldr	r0, [r3, #16]
 8004cb2:	f7ff fd2f 	bl	8004714 <__hi0bits>
 8004cb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004cba:	e7e4      	b.n	8004c86 <__d2b+0x72>
 8004cbc:	080055ba 	.word	0x080055ba
 8004cc0:	080055cb 	.word	0x080055cb

08004cc4 <__sfputc_r>:
 8004cc4:	6893      	ldr	r3, [r2, #8]
 8004cc6:	b410      	push	{r4}
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	6093      	str	r3, [r2, #8]
 8004cce:	da07      	bge.n	8004ce0 <__sfputc_r+0x1c>
 8004cd0:	6994      	ldr	r4, [r2, #24]
 8004cd2:	42a3      	cmp	r3, r4
 8004cd4:	db01      	blt.n	8004cda <__sfputc_r+0x16>
 8004cd6:	290a      	cmp	r1, #10
 8004cd8:	d102      	bne.n	8004ce0 <__sfputc_r+0x1c>
 8004cda:	bc10      	pop	{r4}
 8004cdc:	f000 b9da 	b.w	8005094 <__swbuf_r>
 8004ce0:	6813      	ldr	r3, [r2, #0]
 8004ce2:	1c58      	adds	r0, r3, #1
 8004ce4:	6010      	str	r0, [r2, #0]
 8004ce6:	7019      	strb	r1, [r3, #0]
 8004ce8:	4608      	mov	r0, r1
 8004cea:	bc10      	pop	{r4}
 8004cec:	4770      	bx	lr

08004cee <__sfputs_r>:
 8004cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	460f      	mov	r7, r1
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	18d5      	adds	r5, r2, r3
 8004cf8:	42ac      	cmp	r4, r5
 8004cfa:	d101      	bne.n	8004d00 <__sfputs_r+0x12>
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	e007      	b.n	8004d10 <__sfputs_r+0x22>
 8004d00:	463a      	mov	r2, r7
 8004d02:	4630      	mov	r0, r6
 8004d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d08:	f7ff ffdc 	bl	8004cc4 <__sfputc_r>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d1f3      	bne.n	8004cf8 <__sfputs_r+0xa>
 8004d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d14 <_vfiprintf_r>:
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d18:	460d      	mov	r5, r1
 8004d1a:	4614      	mov	r4, r2
 8004d1c:	4698      	mov	r8, r3
 8004d1e:	4606      	mov	r6, r0
 8004d20:	b09d      	sub	sp, #116	@ 0x74
 8004d22:	b118      	cbz	r0, 8004d2c <_vfiprintf_r+0x18>
 8004d24:	6a03      	ldr	r3, [r0, #32]
 8004d26:	b90b      	cbnz	r3, 8004d2c <_vfiprintf_r+0x18>
 8004d28:	f7fe fbe4 	bl	80034f4 <__sinit>
 8004d2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d2e:	07d9      	lsls	r1, r3, #31
 8004d30:	d405      	bmi.n	8004d3e <_vfiprintf_r+0x2a>
 8004d32:	89ab      	ldrh	r3, [r5, #12]
 8004d34:	059a      	lsls	r2, r3, #22
 8004d36:	d402      	bmi.n	8004d3e <_vfiprintf_r+0x2a>
 8004d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d3a:	f7fe fce4 	bl	8003706 <__retarget_lock_acquire_recursive>
 8004d3e:	89ab      	ldrh	r3, [r5, #12]
 8004d40:	071b      	lsls	r3, r3, #28
 8004d42:	d501      	bpl.n	8004d48 <_vfiprintf_r+0x34>
 8004d44:	692b      	ldr	r3, [r5, #16]
 8004d46:	b99b      	cbnz	r3, 8004d70 <_vfiprintf_r+0x5c>
 8004d48:	4629      	mov	r1, r5
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	f000 f9e0 	bl	8005110 <__swsetup_r>
 8004d50:	b170      	cbz	r0, 8004d70 <_vfiprintf_r+0x5c>
 8004d52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d54:	07dc      	lsls	r4, r3, #31
 8004d56:	d504      	bpl.n	8004d62 <_vfiprintf_r+0x4e>
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5c:	b01d      	add	sp, #116	@ 0x74
 8004d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d62:	89ab      	ldrh	r3, [r5, #12]
 8004d64:	0598      	lsls	r0, r3, #22
 8004d66:	d4f7      	bmi.n	8004d58 <_vfiprintf_r+0x44>
 8004d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d6a:	f7fe fccd 	bl	8003708 <__retarget_lock_release_recursive>
 8004d6e:	e7f3      	b.n	8004d58 <_vfiprintf_r+0x44>
 8004d70:	2300      	movs	r3, #0
 8004d72:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d74:	2320      	movs	r3, #32
 8004d76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d7a:	2330      	movs	r3, #48	@ 0x30
 8004d7c:	f04f 0901 	mov.w	r9, #1
 8004d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d84:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004f30 <_vfiprintf_r+0x21c>
 8004d88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d8c:	4623      	mov	r3, r4
 8004d8e:	469a      	mov	sl, r3
 8004d90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d94:	b10a      	cbz	r2, 8004d9a <_vfiprintf_r+0x86>
 8004d96:	2a25      	cmp	r2, #37	@ 0x25
 8004d98:	d1f9      	bne.n	8004d8e <_vfiprintf_r+0x7a>
 8004d9a:	ebba 0b04 	subs.w	fp, sl, r4
 8004d9e:	d00b      	beq.n	8004db8 <_vfiprintf_r+0xa4>
 8004da0:	465b      	mov	r3, fp
 8004da2:	4622      	mov	r2, r4
 8004da4:	4629      	mov	r1, r5
 8004da6:	4630      	mov	r0, r6
 8004da8:	f7ff ffa1 	bl	8004cee <__sfputs_r>
 8004dac:	3001      	adds	r0, #1
 8004dae:	f000 80a7 	beq.w	8004f00 <_vfiprintf_r+0x1ec>
 8004db2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004db4:	445a      	add	r2, fp
 8004db6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004db8:	f89a 3000 	ldrb.w	r3, [sl]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 809f 	beq.w	8004f00 <_vfiprintf_r+0x1ec>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dcc:	f10a 0a01 	add.w	sl, sl, #1
 8004dd0:	9304      	str	r3, [sp, #16]
 8004dd2:	9307      	str	r3, [sp, #28]
 8004dd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dda:	4654      	mov	r4, sl
 8004ddc:	2205      	movs	r2, #5
 8004dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de2:	4853      	ldr	r0, [pc, #332]	@ (8004f30 <_vfiprintf_r+0x21c>)
 8004de4:	f7fe fc91 	bl	800370a <memchr>
 8004de8:	9a04      	ldr	r2, [sp, #16]
 8004dea:	b9d8      	cbnz	r0, 8004e24 <_vfiprintf_r+0x110>
 8004dec:	06d1      	lsls	r1, r2, #27
 8004dee:	bf44      	itt	mi
 8004df0:	2320      	movmi	r3, #32
 8004df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004df6:	0713      	lsls	r3, r2, #28
 8004df8:	bf44      	itt	mi
 8004dfa:	232b      	movmi	r3, #43	@ 0x2b
 8004dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e00:	f89a 3000 	ldrb.w	r3, [sl]
 8004e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e06:	d015      	beq.n	8004e34 <_vfiprintf_r+0x120>
 8004e08:	4654      	mov	r4, sl
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f04f 0c0a 	mov.w	ip, #10
 8004e10:	9a07      	ldr	r2, [sp, #28]
 8004e12:	4621      	mov	r1, r4
 8004e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e18:	3b30      	subs	r3, #48	@ 0x30
 8004e1a:	2b09      	cmp	r3, #9
 8004e1c:	d94b      	bls.n	8004eb6 <_vfiprintf_r+0x1a2>
 8004e1e:	b1b0      	cbz	r0, 8004e4e <_vfiprintf_r+0x13a>
 8004e20:	9207      	str	r2, [sp, #28]
 8004e22:	e014      	b.n	8004e4e <_vfiprintf_r+0x13a>
 8004e24:	eba0 0308 	sub.w	r3, r0, r8
 8004e28:	fa09 f303 	lsl.w	r3, r9, r3
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	46a2      	mov	sl, r4
 8004e30:	9304      	str	r3, [sp, #16]
 8004e32:	e7d2      	b.n	8004dda <_vfiprintf_r+0xc6>
 8004e34:	9b03      	ldr	r3, [sp, #12]
 8004e36:	1d19      	adds	r1, r3, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	9103      	str	r1, [sp, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bfbb      	ittet	lt
 8004e40:	425b      	neglt	r3, r3
 8004e42:	f042 0202 	orrlt.w	r2, r2, #2
 8004e46:	9307      	strge	r3, [sp, #28]
 8004e48:	9307      	strlt	r3, [sp, #28]
 8004e4a:	bfb8      	it	lt
 8004e4c:	9204      	strlt	r2, [sp, #16]
 8004e4e:	7823      	ldrb	r3, [r4, #0]
 8004e50:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e52:	d10a      	bne.n	8004e6a <_vfiprintf_r+0x156>
 8004e54:	7863      	ldrb	r3, [r4, #1]
 8004e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e58:	d132      	bne.n	8004ec0 <_vfiprintf_r+0x1ac>
 8004e5a:	9b03      	ldr	r3, [sp, #12]
 8004e5c:	3402      	adds	r4, #2
 8004e5e:	1d1a      	adds	r2, r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	9203      	str	r2, [sp, #12]
 8004e64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e68:	9305      	str	r3, [sp, #20]
 8004e6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004f34 <_vfiprintf_r+0x220>
 8004e6e:	2203      	movs	r2, #3
 8004e70:	4650      	mov	r0, sl
 8004e72:	7821      	ldrb	r1, [r4, #0]
 8004e74:	f7fe fc49 	bl	800370a <memchr>
 8004e78:	b138      	cbz	r0, 8004e8a <_vfiprintf_r+0x176>
 8004e7a:	2240      	movs	r2, #64	@ 0x40
 8004e7c:	9b04      	ldr	r3, [sp, #16]
 8004e7e:	eba0 000a 	sub.w	r0, r0, sl
 8004e82:	4082      	lsls	r2, r0
 8004e84:	4313      	orrs	r3, r2
 8004e86:	3401      	adds	r4, #1
 8004e88:	9304      	str	r3, [sp, #16]
 8004e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e8e:	2206      	movs	r2, #6
 8004e90:	4829      	ldr	r0, [pc, #164]	@ (8004f38 <_vfiprintf_r+0x224>)
 8004e92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e96:	f7fe fc38 	bl	800370a <memchr>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d03f      	beq.n	8004f1e <_vfiprintf_r+0x20a>
 8004e9e:	4b27      	ldr	r3, [pc, #156]	@ (8004f3c <_vfiprintf_r+0x228>)
 8004ea0:	bb1b      	cbnz	r3, 8004eea <_vfiprintf_r+0x1d6>
 8004ea2:	9b03      	ldr	r3, [sp, #12]
 8004ea4:	3307      	adds	r3, #7
 8004ea6:	f023 0307 	bic.w	r3, r3, #7
 8004eaa:	3308      	adds	r3, #8
 8004eac:	9303      	str	r3, [sp, #12]
 8004eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eb0:	443b      	add	r3, r7
 8004eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eb4:	e76a      	b.n	8004d8c <_vfiprintf_r+0x78>
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	2001      	movs	r0, #1
 8004eba:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ebe:	e7a8      	b.n	8004e12 <_vfiprintf_r+0xfe>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f04f 0c0a 	mov.w	ip, #10
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	3401      	adds	r4, #1
 8004eca:	9305      	str	r3, [sp, #20]
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ed2:	3a30      	subs	r2, #48	@ 0x30
 8004ed4:	2a09      	cmp	r2, #9
 8004ed6:	d903      	bls.n	8004ee0 <_vfiprintf_r+0x1cc>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0c6      	beq.n	8004e6a <_vfiprintf_r+0x156>
 8004edc:	9105      	str	r1, [sp, #20]
 8004ede:	e7c4      	b.n	8004e6a <_vfiprintf_r+0x156>
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ee8:	e7f0      	b.n	8004ecc <_vfiprintf_r+0x1b8>
 8004eea:	ab03      	add	r3, sp, #12
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	462a      	mov	r2, r5
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	4b13      	ldr	r3, [pc, #76]	@ (8004f40 <_vfiprintf_r+0x22c>)
 8004ef4:	a904      	add	r1, sp, #16
 8004ef6:	f7fd feb3 	bl	8002c60 <_printf_float>
 8004efa:	4607      	mov	r7, r0
 8004efc:	1c78      	adds	r0, r7, #1
 8004efe:	d1d6      	bne.n	8004eae <_vfiprintf_r+0x19a>
 8004f00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f02:	07d9      	lsls	r1, r3, #31
 8004f04:	d405      	bmi.n	8004f12 <_vfiprintf_r+0x1fe>
 8004f06:	89ab      	ldrh	r3, [r5, #12]
 8004f08:	059a      	lsls	r2, r3, #22
 8004f0a:	d402      	bmi.n	8004f12 <_vfiprintf_r+0x1fe>
 8004f0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f0e:	f7fe fbfb 	bl	8003708 <__retarget_lock_release_recursive>
 8004f12:	89ab      	ldrh	r3, [r5, #12]
 8004f14:	065b      	lsls	r3, r3, #25
 8004f16:	f53f af1f 	bmi.w	8004d58 <_vfiprintf_r+0x44>
 8004f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f1c:	e71e      	b.n	8004d5c <_vfiprintf_r+0x48>
 8004f1e:	ab03      	add	r3, sp, #12
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	462a      	mov	r2, r5
 8004f24:	4630      	mov	r0, r6
 8004f26:	4b06      	ldr	r3, [pc, #24]	@ (8004f40 <_vfiprintf_r+0x22c>)
 8004f28:	a904      	add	r1, sp, #16
 8004f2a:	f7fe f937 	bl	800319c <_printf_i>
 8004f2e:	e7e4      	b.n	8004efa <_vfiprintf_r+0x1e6>
 8004f30:	08005720 	.word	0x08005720
 8004f34:	08005726 	.word	0x08005726
 8004f38:	0800572a 	.word	0x0800572a
 8004f3c:	08002c61 	.word	0x08002c61
 8004f40:	08004cef 	.word	0x08004cef

08004f44 <__sflush_r>:
 8004f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	0716      	lsls	r6, r2, #28
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	d454      	bmi.n	8004ffc <__sflush_r+0xb8>
 8004f52:	684b      	ldr	r3, [r1, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	dc02      	bgt.n	8004f5e <__sflush_r+0x1a>
 8004f58:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	dd48      	ble.n	8004ff0 <__sflush_r+0xac>
 8004f5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f60:	2e00      	cmp	r6, #0
 8004f62:	d045      	beq.n	8004ff0 <__sflush_r+0xac>
 8004f64:	2300      	movs	r3, #0
 8004f66:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f6a:	682f      	ldr	r7, [r5, #0]
 8004f6c:	6a21      	ldr	r1, [r4, #32]
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	d030      	beq.n	8004fd4 <__sflush_r+0x90>
 8004f72:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	0759      	lsls	r1, r3, #29
 8004f78:	d505      	bpl.n	8004f86 <__sflush_r+0x42>
 8004f7a:	6863      	ldr	r3, [r4, #4]
 8004f7c:	1ad2      	subs	r2, r2, r3
 8004f7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f80:	b10b      	cbz	r3, 8004f86 <__sflush_r+0x42>
 8004f82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f84:	1ad2      	subs	r2, r2, r3
 8004f86:	2300      	movs	r3, #0
 8004f88:	4628      	mov	r0, r5
 8004f8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f8c:	6a21      	ldr	r1, [r4, #32]
 8004f8e:	47b0      	blx	r6
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	89a3      	ldrh	r3, [r4, #12]
 8004f94:	d106      	bne.n	8004fa4 <__sflush_r+0x60>
 8004f96:	6829      	ldr	r1, [r5, #0]
 8004f98:	291d      	cmp	r1, #29
 8004f9a:	d82b      	bhi.n	8004ff4 <__sflush_r+0xb0>
 8004f9c:	4a28      	ldr	r2, [pc, #160]	@ (8005040 <__sflush_r+0xfc>)
 8004f9e:	410a      	asrs	r2, r1
 8004fa0:	07d6      	lsls	r6, r2, #31
 8004fa2:	d427      	bmi.n	8004ff4 <__sflush_r+0xb0>
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	6062      	str	r2, [r4, #4]
 8004fa8:	6922      	ldr	r2, [r4, #16]
 8004faa:	04d9      	lsls	r1, r3, #19
 8004fac:	6022      	str	r2, [r4, #0]
 8004fae:	d504      	bpl.n	8004fba <__sflush_r+0x76>
 8004fb0:	1c42      	adds	r2, r0, #1
 8004fb2:	d101      	bne.n	8004fb8 <__sflush_r+0x74>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	b903      	cbnz	r3, 8004fba <__sflush_r+0x76>
 8004fb8:	6560      	str	r0, [r4, #84]	@ 0x54
 8004fba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fbc:	602f      	str	r7, [r5, #0]
 8004fbe:	b1b9      	cbz	r1, 8004ff0 <__sflush_r+0xac>
 8004fc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004fc4:	4299      	cmp	r1, r3
 8004fc6:	d002      	beq.n	8004fce <__sflush_r+0x8a>
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f7ff f9fd 	bl	80043c8 <_free_r>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fd2:	e00d      	b.n	8004ff0 <__sflush_r+0xac>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	47b0      	blx	r6
 8004fda:	4602      	mov	r2, r0
 8004fdc:	1c50      	adds	r0, r2, #1
 8004fde:	d1c9      	bne.n	8004f74 <__sflush_r+0x30>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0c6      	beq.n	8004f74 <__sflush_r+0x30>
 8004fe6:	2b1d      	cmp	r3, #29
 8004fe8:	d001      	beq.n	8004fee <__sflush_r+0xaa>
 8004fea:	2b16      	cmp	r3, #22
 8004fec:	d11d      	bne.n	800502a <__sflush_r+0xe6>
 8004fee:	602f      	str	r7, [r5, #0]
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e021      	b.n	8005038 <__sflush_r+0xf4>
 8004ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ff8:	b21b      	sxth	r3, r3
 8004ffa:	e01a      	b.n	8005032 <__sflush_r+0xee>
 8004ffc:	690f      	ldr	r7, [r1, #16]
 8004ffe:	2f00      	cmp	r7, #0
 8005000:	d0f6      	beq.n	8004ff0 <__sflush_r+0xac>
 8005002:	0793      	lsls	r3, r2, #30
 8005004:	bf18      	it	ne
 8005006:	2300      	movne	r3, #0
 8005008:	680e      	ldr	r6, [r1, #0]
 800500a:	bf08      	it	eq
 800500c:	694b      	ldreq	r3, [r1, #20]
 800500e:	1bf6      	subs	r6, r6, r7
 8005010:	600f      	str	r7, [r1, #0]
 8005012:	608b      	str	r3, [r1, #8]
 8005014:	2e00      	cmp	r6, #0
 8005016:	ddeb      	ble.n	8004ff0 <__sflush_r+0xac>
 8005018:	4633      	mov	r3, r6
 800501a:	463a      	mov	r2, r7
 800501c:	4628      	mov	r0, r5
 800501e:	6a21      	ldr	r1, [r4, #32]
 8005020:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005024:	47e0      	blx	ip
 8005026:	2800      	cmp	r0, #0
 8005028:	dc07      	bgt.n	800503a <__sflush_r+0xf6>
 800502a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800502e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005032:	f04f 30ff 	mov.w	r0, #4294967295
 8005036:	81a3      	strh	r3, [r4, #12]
 8005038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800503a:	4407      	add	r7, r0
 800503c:	1a36      	subs	r6, r6, r0
 800503e:	e7e9      	b.n	8005014 <__sflush_r+0xd0>
 8005040:	dfbffffe 	.word	0xdfbffffe

08005044 <_fflush_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	690b      	ldr	r3, [r1, #16]
 8005048:	4605      	mov	r5, r0
 800504a:	460c      	mov	r4, r1
 800504c:	b913      	cbnz	r3, 8005054 <_fflush_r+0x10>
 800504e:	2500      	movs	r5, #0
 8005050:	4628      	mov	r0, r5
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	b118      	cbz	r0, 800505e <_fflush_r+0x1a>
 8005056:	6a03      	ldr	r3, [r0, #32]
 8005058:	b90b      	cbnz	r3, 800505e <_fflush_r+0x1a>
 800505a:	f7fe fa4b 	bl	80034f4 <__sinit>
 800505e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f3      	beq.n	800504e <_fflush_r+0xa>
 8005066:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005068:	07d0      	lsls	r0, r2, #31
 800506a:	d404      	bmi.n	8005076 <_fflush_r+0x32>
 800506c:	0599      	lsls	r1, r3, #22
 800506e:	d402      	bmi.n	8005076 <_fflush_r+0x32>
 8005070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005072:	f7fe fb48 	bl	8003706 <__retarget_lock_acquire_recursive>
 8005076:	4628      	mov	r0, r5
 8005078:	4621      	mov	r1, r4
 800507a:	f7ff ff63 	bl	8004f44 <__sflush_r>
 800507e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005080:	4605      	mov	r5, r0
 8005082:	07da      	lsls	r2, r3, #31
 8005084:	d4e4      	bmi.n	8005050 <_fflush_r+0xc>
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	059b      	lsls	r3, r3, #22
 800508a:	d4e1      	bmi.n	8005050 <_fflush_r+0xc>
 800508c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800508e:	f7fe fb3b 	bl	8003708 <__retarget_lock_release_recursive>
 8005092:	e7dd      	b.n	8005050 <_fflush_r+0xc>

08005094 <__swbuf_r>:
 8005094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005096:	460e      	mov	r6, r1
 8005098:	4614      	mov	r4, r2
 800509a:	4605      	mov	r5, r0
 800509c:	b118      	cbz	r0, 80050a6 <__swbuf_r+0x12>
 800509e:	6a03      	ldr	r3, [r0, #32]
 80050a0:	b90b      	cbnz	r3, 80050a6 <__swbuf_r+0x12>
 80050a2:	f7fe fa27 	bl	80034f4 <__sinit>
 80050a6:	69a3      	ldr	r3, [r4, #24]
 80050a8:	60a3      	str	r3, [r4, #8]
 80050aa:	89a3      	ldrh	r3, [r4, #12]
 80050ac:	071a      	lsls	r2, r3, #28
 80050ae:	d501      	bpl.n	80050b4 <__swbuf_r+0x20>
 80050b0:	6923      	ldr	r3, [r4, #16]
 80050b2:	b943      	cbnz	r3, 80050c6 <__swbuf_r+0x32>
 80050b4:	4621      	mov	r1, r4
 80050b6:	4628      	mov	r0, r5
 80050b8:	f000 f82a 	bl	8005110 <__swsetup_r>
 80050bc:	b118      	cbz	r0, 80050c6 <__swbuf_r+0x32>
 80050be:	f04f 37ff 	mov.w	r7, #4294967295
 80050c2:	4638      	mov	r0, r7
 80050c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	6922      	ldr	r2, [r4, #16]
 80050ca:	b2f6      	uxtb	r6, r6
 80050cc:	1a98      	subs	r0, r3, r2
 80050ce:	6963      	ldr	r3, [r4, #20]
 80050d0:	4637      	mov	r7, r6
 80050d2:	4283      	cmp	r3, r0
 80050d4:	dc05      	bgt.n	80050e2 <__swbuf_r+0x4e>
 80050d6:	4621      	mov	r1, r4
 80050d8:	4628      	mov	r0, r5
 80050da:	f7ff ffb3 	bl	8005044 <_fflush_r>
 80050de:	2800      	cmp	r0, #0
 80050e0:	d1ed      	bne.n	80050be <__swbuf_r+0x2a>
 80050e2:	68a3      	ldr	r3, [r4, #8]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	60a3      	str	r3, [r4, #8]
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	6022      	str	r2, [r4, #0]
 80050ee:	701e      	strb	r6, [r3, #0]
 80050f0:	6962      	ldr	r2, [r4, #20]
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d004      	beq.n	8005102 <__swbuf_r+0x6e>
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	07db      	lsls	r3, r3, #31
 80050fc:	d5e1      	bpl.n	80050c2 <__swbuf_r+0x2e>
 80050fe:	2e0a      	cmp	r6, #10
 8005100:	d1df      	bne.n	80050c2 <__swbuf_r+0x2e>
 8005102:	4621      	mov	r1, r4
 8005104:	4628      	mov	r0, r5
 8005106:	f7ff ff9d 	bl	8005044 <_fflush_r>
 800510a:	2800      	cmp	r0, #0
 800510c:	d0d9      	beq.n	80050c2 <__swbuf_r+0x2e>
 800510e:	e7d6      	b.n	80050be <__swbuf_r+0x2a>

08005110 <__swsetup_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4b29      	ldr	r3, [pc, #164]	@ (80051b8 <__swsetup_r+0xa8>)
 8005114:	4605      	mov	r5, r0
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	460c      	mov	r4, r1
 800511a:	b118      	cbz	r0, 8005124 <__swsetup_r+0x14>
 800511c:	6a03      	ldr	r3, [r0, #32]
 800511e:	b90b      	cbnz	r3, 8005124 <__swsetup_r+0x14>
 8005120:	f7fe f9e8 	bl	80034f4 <__sinit>
 8005124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005128:	0719      	lsls	r1, r3, #28
 800512a:	d422      	bmi.n	8005172 <__swsetup_r+0x62>
 800512c:	06da      	lsls	r2, r3, #27
 800512e:	d407      	bmi.n	8005140 <__swsetup_r+0x30>
 8005130:	2209      	movs	r2, #9
 8005132:	602a      	str	r2, [r5, #0]
 8005134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005138:	f04f 30ff 	mov.w	r0, #4294967295
 800513c:	81a3      	strh	r3, [r4, #12]
 800513e:	e033      	b.n	80051a8 <__swsetup_r+0x98>
 8005140:	0758      	lsls	r0, r3, #29
 8005142:	d512      	bpl.n	800516a <__swsetup_r+0x5a>
 8005144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005146:	b141      	cbz	r1, 800515a <__swsetup_r+0x4a>
 8005148:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800514c:	4299      	cmp	r1, r3
 800514e:	d002      	beq.n	8005156 <__swsetup_r+0x46>
 8005150:	4628      	mov	r0, r5
 8005152:	f7ff f939 	bl	80043c8 <_free_r>
 8005156:	2300      	movs	r3, #0
 8005158:	6363      	str	r3, [r4, #52]	@ 0x34
 800515a:	89a3      	ldrh	r3, [r4, #12]
 800515c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005160:	81a3      	strh	r3, [r4, #12]
 8005162:	2300      	movs	r3, #0
 8005164:	6063      	str	r3, [r4, #4]
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	f043 0308 	orr.w	r3, r3, #8
 8005170:	81a3      	strh	r3, [r4, #12]
 8005172:	6923      	ldr	r3, [r4, #16]
 8005174:	b94b      	cbnz	r3, 800518a <__swsetup_r+0x7a>
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800517c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005180:	d003      	beq.n	800518a <__swsetup_r+0x7a>
 8005182:	4621      	mov	r1, r4
 8005184:	4628      	mov	r0, r5
 8005186:	f000 f8c0 	bl	800530a <__smakebuf_r>
 800518a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518e:	f013 0201 	ands.w	r2, r3, #1
 8005192:	d00a      	beq.n	80051aa <__swsetup_r+0x9a>
 8005194:	2200      	movs	r2, #0
 8005196:	60a2      	str	r2, [r4, #8]
 8005198:	6962      	ldr	r2, [r4, #20]
 800519a:	4252      	negs	r2, r2
 800519c:	61a2      	str	r2, [r4, #24]
 800519e:	6922      	ldr	r2, [r4, #16]
 80051a0:	b942      	cbnz	r2, 80051b4 <__swsetup_r+0xa4>
 80051a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051a6:	d1c5      	bne.n	8005134 <__swsetup_r+0x24>
 80051a8:	bd38      	pop	{r3, r4, r5, pc}
 80051aa:	0799      	lsls	r1, r3, #30
 80051ac:	bf58      	it	pl
 80051ae:	6962      	ldrpl	r2, [r4, #20]
 80051b0:	60a2      	str	r2, [r4, #8]
 80051b2:	e7f4      	b.n	800519e <__swsetup_r+0x8e>
 80051b4:	2000      	movs	r0, #0
 80051b6:	e7f7      	b.n	80051a8 <__swsetup_r+0x98>
 80051b8:	20000018 	.word	0x20000018

080051bc <_sbrk_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	2300      	movs	r3, #0
 80051c0:	4d05      	ldr	r5, [pc, #20]	@ (80051d8 <_sbrk_r+0x1c>)
 80051c2:	4604      	mov	r4, r0
 80051c4:	4608      	mov	r0, r1
 80051c6:	602b      	str	r3, [r5, #0]
 80051c8:	f7fc fac0 	bl	800174c <_sbrk>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d102      	bne.n	80051d6 <_sbrk_r+0x1a>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	b103      	cbz	r3, 80051d6 <_sbrk_r+0x1a>
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	bd38      	pop	{r3, r4, r5, pc}
 80051d8:	2000037c 	.word	0x2000037c

080051dc <memcpy>:
 80051dc:	440a      	add	r2, r1
 80051de:	4291      	cmp	r1, r2
 80051e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80051e4:	d100      	bne.n	80051e8 <memcpy+0xc>
 80051e6:	4770      	bx	lr
 80051e8:	b510      	push	{r4, lr}
 80051ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ee:	4291      	cmp	r1, r2
 80051f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051f4:	d1f9      	bne.n	80051ea <memcpy+0xe>
 80051f6:	bd10      	pop	{r4, pc}

080051f8 <__assert_func>:
 80051f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051fa:	4614      	mov	r4, r2
 80051fc:	461a      	mov	r2, r3
 80051fe:	4b09      	ldr	r3, [pc, #36]	@ (8005224 <__assert_func+0x2c>)
 8005200:	4605      	mov	r5, r0
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68d8      	ldr	r0, [r3, #12]
 8005206:	b954      	cbnz	r4, 800521e <__assert_func+0x26>
 8005208:	4b07      	ldr	r3, [pc, #28]	@ (8005228 <__assert_func+0x30>)
 800520a:	461c      	mov	r4, r3
 800520c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005210:	9100      	str	r1, [sp, #0]
 8005212:	462b      	mov	r3, r5
 8005214:	4905      	ldr	r1, [pc, #20]	@ (800522c <__assert_func+0x34>)
 8005216:	f000 f841 	bl	800529c <fiprintf>
 800521a:	f000 f8d5 	bl	80053c8 <abort>
 800521e:	4b04      	ldr	r3, [pc, #16]	@ (8005230 <__assert_func+0x38>)
 8005220:	e7f4      	b.n	800520c <__assert_func+0x14>
 8005222:	bf00      	nop
 8005224:	20000018 	.word	0x20000018
 8005228:	08005776 	.word	0x08005776
 800522c:	08005748 	.word	0x08005748
 8005230:	0800573b 	.word	0x0800573b

08005234 <_calloc_r>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	fba1 5402 	umull	r5, r4, r1, r2
 800523a:	b93c      	cbnz	r4, 800524c <_calloc_r+0x18>
 800523c:	4629      	mov	r1, r5
 800523e:	f7ff f935 	bl	80044ac <_malloc_r>
 8005242:	4606      	mov	r6, r0
 8005244:	b928      	cbnz	r0, 8005252 <_calloc_r+0x1e>
 8005246:	2600      	movs	r6, #0
 8005248:	4630      	mov	r0, r6
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	220c      	movs	r2, #12
 800524e:	6002      	str	r2, [r0, #0]
 8005250:	e7f9      	b.n	8005246 <_calloc_r+0x12>
 8005252:	462a      	mov	r2, r5
 8005254:	4621      	mov	r1, r4
 8005256:	f7fe f9d8 	bl	800360a <memset>
 800525a:	e7f5      	b.n	8005248 <_calloc_r+0x14>

0800525c <__ascii_mbtowc>:
 800525c:	b082      	sub	sp, #8
 800525e:	b901      	cbnz	r1, 8005262 <__ascii_mbtowc+0x6>
 8005260:	a901      	add	r1, sp, #4
 8005262:	b142      	cbz	r2, 8005276 <__ascii_mbtowc+0x1a>
 8005264:	b14b      	cbz	r3, 800527a <__ascii_mbtowc+0x1e>
 8005266:	7813      	ldrb	r3, [r2, #0]
 8005268:	600b      	str	r3, [r1, #0]
 800526a:	7812      	ldrb	r2, [r2, #0]
 800526c:	1e10      	subs	r0, r2, #0
 800526e:	bf18      	it	ne
 8005270:	2001      	movne	r0, #1
 8005272:	b002      	add	sp, #8
 8005274:	4770      	bx	lr
 8005276:	4610      	mov	r0, r2
 8005278:	e7fb      	b.n	8005272 <__ascii_mbtowc+0x16>
 800527a:	f06f 0001 	mvn.w	r0, #1
 800527e:	e7f8      	b.n	8005272 <__ascii_mbtowc+0x16>

08005280 <__ascii_wctomb>:
 8005280:	4603      	mov	r3, r0
 8005282:	4608      	mov	r0, r1
 8005284:	b141      	cbz	r1, 8005298 <__ascii_wctomb+0x18>
 8005286:	2aff      	cmp	r2, #255	@ 0xff
 8005288:	d904      	bls.n	8005294 <__ascii_wctomb+0x14>
 800528a:	228a      	movs	r2, #138	@ 0x8a
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	4770      	bx	lr
 8005294:	2001      	movs	r0, #1
 8005296:	700a      	strb	r2, [r1, #0]
 8005298:	4770      	bx	lr
	...

0800529c <fiprintf>:
 800529c:	b40e      	push	{r1, r2, r3}
 800529e:	b503      	push	{r0, r1, lr}
 80052a0:	4601      	mov	r1, r0
 80052a2:	ab03      	add	r3, sp, #12
 80052a4:	4805      	ldr	r0, [pc, #20]	@ (80052bc <fiprintf+0x20>)
 80052a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80052aa:	6800      	ldr	r0, [r0, #0]
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	f7ff fd31 	bl	8004d14 <_vfiprintf_r>
 80052b2:	b002      	add	sp, #8
 80052b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80052b8:	b003      	add	sp, #12
 80052ba:	4770      	bx	lr
 80052bc:	20000018 	.word	0x20000018

080052c0 <__swhatbuf_r>:
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	460c      	mov	r4, r1
 80052c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c8:	4615      	mov	r5, r2
 80052ca:	2900      	cmp	r1, #0
 80052cc:	461e      	mov	r6, r3
 80052ce:	b096      	sub	sp, #88	@ 0x58
 80052d0:	da0c      	bge.n	80052ec <__swhatbuf_r+0x2c>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	2100      	movs	r1, #0
 80052d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052da:	bf14      	ite	ne
 80052dc:	2340      	movne	r3, #64	@ 0x40
 80052de:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052e2:	2000      	movs	r0, #0
 80052e4:	6031      	str	r1, [r6, #0]
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	b016      	add	sp, #88	@ 0x58
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	466a      	mov	r2, sp
 80052ee:	f000 f849 	bl	8005384 <_fstat_r>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	dbed      	blt.n	80052d2 <__swhatbuf_r+0x12>
 80052f6:	9901      	ldr	r1, [sp, #4]
 80052f8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052fc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005300:	4259      	negs	r1, r3
 8005302:	4159      	adcs	r1, r3
 8005304:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005308:	e7eb      	b.n	80052e2 <__swhatbuf_r+0x22>

0800530a <__smakebuf_r>:
 800530a:	898b      	ldrh	r3, [r1, #12]
 800530c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800530e:	079d      	lsls	r5, r3, #30
 8005310:	4606      	mov	r6, r0
 8005312:	460c      	mov	r4, r1
 8005314:	d507      	bpl.n	8005326 <__smakebuf_r+0x1c>
 8005316:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800531a:	6023      	str	r3, [r4, #0]
 800531c:	6123      	str	r3, [r4, #16]
 800531e:	2301      	movs	r3, #1
 8005320:	6163      	str	r3, [r4, #20]
 8005322:	b003      	add	sp, #12
 8005324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005326:	466a      	mov	r2, sp
 8005328:	ab01      	add	r3, sp, #4
 800532a:	f7ff ffc9 	bl	80052c0 <__swhatbuf_r>
 800532e:	9f00      	ldr	r7, [sp, #0]
 8005330:	4605      	mov	r5, r0
 8005332:	4639      	mov	r1, r7
 8005334:	4630      	mov	r0, r6
 8005336:	f7ff f8b9 	bl	80044ac <_malloc_r>
 800533a:	b948      	cbnz	r0, 8005350 <__smakebuf_r+0x46>
 800533c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005340:	059a      	lsls	r2, r3, #22
 8005342:	d4ee      	bmi.n	8005322 <__smakebuf_r+0x18>
 8005344:	f023 0303 	bic.w	r3, r3, #3
 8005348:	f043 0302 	orr.w	r3, r3, #2
 800534c:	81a3      	strh	r3, [r4, #12]
 800534e:	e7e2      	b.n	8005316 <__smakebuf_r+0xc>
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800535a:	81a3      	strh	r3, [r4, #12]
 800535c:	9b01      	ldr	r3, [sp, #4]
 800535e:	6020      	str	r0, [r4, #0]
 8005360:	b15b      	cbz	r3, 800537a <__smakebuf_r+0x70>
 8005362:	4630      	mov	r0, r6
 8005364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005368:	f000 f81e 	bl	80053a8 <_isatty_r>
 800536c:	b128      	cbz	r0, 800537a <__smakebuf_r+0x70>
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	f023 0303 	bic.w	r3, r3, #3
 8005374:	f043 0301 	orr.w	r3, r3, #1
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	431d      	orrs	r5, r3
 800537e:	81a5      	strh	r5, [r4, #12]
 8005380:	e7cf      	b.n	8005322 <__smakebuf_r+0x18>
	...

08005384 <_fstat_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	2300      	movs	r3, #0
 8005388:	4d06      	ldr	r5, [pc, #24]	@ (80053a4 <_fstat_r+0x20>)
 800538a:	4604      	mov	r4, r0
 800538c:	4608      	mov	r0, r1
 800538e:	4611      	mov	r1, r2
 8005390:	602b      	str	r3, [r5, #0]
 8005392:	f7fc f9b5 	bl	8001700 <_fstat>
 8005396:	1c43      	adds	r3, r0, #1
 8005398:	d102      	bne.n	80053a0 <_fstat_r+0x1c>
 800539a:	682b      	ldr	r3, [r5, #0]
 800539c:	b103      	cbz	r3, 80053a0 <_fstat_r+0x1c>
 800539e:	6023      	str	r3, [r4, #0]
 80053a0:	bd38      	pop	{r3, r4, r5, pc}
 80053a2:	bf00      	nop
 80053a4:	2000037c 	.word	0x2000037c

080053a8 <_isatty_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	2300      	movs	r3, #0
 80053ac:	4d05      	ldr	r5, [pc, #20]	@ (80053c4 <_isatty_r+0x1c>)
 80053ae:	4604      	mov	r4, r0
 80053b0:	4608      	mov	r0, r1
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	f7fc f9b3 	bl	800171e <_isatty>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_isatty_r+0x1a>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_isatty_r+0x1a>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	2000037c 	.word	0x2000037c

080053c8 <abort>:
 80053c8:	2006      	movs	r0, #6
 80053ca:	b508      	push	{r3, lr}
 80053cc:	f000 f82c 	bl	8005428 <raise>
 80053d0:	2001      	movs	r0, #1
 80053d2:	f7fc f946 	bl	8001662 <_exit>

080053d6 <_raise_r>:
 80053d6:	291f      	cmp	r1, #31
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4605      	mov	r5, r0
 80053dc:	460c      	mov	r4, r1
 80053de:	d904      	bls.n	80053ea <_raise_r+0x14>
 80053e0:	2316      	movs	r3, #22
 80053e2:	6003      	str	r3, [r0, #0]
 80053e4:	f04f 30ff 	mov.w	r0, #4294967295
 80053e8:	bd38      	pop	{r3, r4, r5, pc}
 80053ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80053ec:	b112      	cbz	r2, 80053f4 <_raise_r+0x1e>
 80053ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80053f2:	b94b      	cbnz	r3, 8005408 <_raise_r+0x32>
 80053f4:	4628      	mov	r0, r5
 80053f6:	f000 f831 	bl	800545c <_getpid_r>
 80053fa:	4622      	mov	r2, r4
 80053fc:	4601      	mov	r1, r0
 80053fe:	4628      	mov	r0, r5
 8005400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005404:	f000 b818 	b.w	8005438 <_kill_r>
 8005408:	2b01      	cmp	r3, #1
 800540a:	d00a      	beq.n	8005422 <_raise_r+0x4c>
 800540c:	1c59      	adds	r1, r3, #1
 800540e:	d103      	bne.n	8005418 <_raise_r+0x42>
 8005410:	2316      	movs	r3, #22
 8005412:	6003      	str	r3, [r0, #0]
 8005414:	2001      	movs	r0, #1
 8005416:	e7e7      	b.n	80053e8 <_raise_r+0x12>
 8005418:	2100      	movs	r1, #0
 800541a:	4620      	mov	r0, r4
 800541c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005420:	4798      	blx	r3
 8005422:	2000      	movs	r0, #0
 8005424:	e7e0      	b.n	80053e8 <_raise_r+0x12>
	...

08005428 <raise>:
 8005428:	4b02      	ldr	r3, [pc, #8]	@ (8005434 <raise+0xc>)
 800542a:	4601      	mov	r1, r0
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	f7ff bfd2 	b.w	80053d6 <_raise_r>
 8005432:	bf00      	nop
 8005434:	20000018 	.word	0x20000018

08005438 <_kill_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	2300      	movs	r3, #0
 800543c:	4d06      	ldr	r5, [pc, #24]	@ (8005458 <_kill_r+0x20>)
 800543e:	4604      	mov	r4, r0
 8005440:	4608      	mov	r0, r1
 8005442:	4611      	mov	r1, r2
 8005444:	602b      	str	r3, [r5, #0]
 8005446:	f7fc f8fc 	bl	8001642 <_kill>
 800544a:	1c43      	adds	r3, r0, #1
 800544c:	d102      	bne.n	8005454 <_kill_r+0x1c>
 800544e:	682b      	ldr	r3, [r5, #0]
 8005450:	b103      	cbz	r3, 8005454 <_kill_r+0x1c>
 8005452:	6023      	str	r3, [r4, #0]
 8005454:	bd38      	pop	{r3, r4, r5, pc}
 8005456:	bf00      	nop
 8005458:	2000037c 	.word	0x2000037c

0800545c <_getpid_r>:
 800545c:	f7fc b8ea 	b.w	8001634 <_getpid>

08005460 <_init>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	bf00      	nop
 8005464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005466:	bc08      	pop	{r3}
 8005468:	469e      	mov	lr, r3
 800546a:	4770      	bx	lr

0800546c <_fini>:
 800546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546e:	bf00      	nop
 8005470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005472:	bc08      	pop	{r3}
 8005474:	469e      	mov	lr, r3
 8005476:	4770      	bx	lr
