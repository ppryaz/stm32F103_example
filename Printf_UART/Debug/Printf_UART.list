
Printf_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fb0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080020bc  080020bc  000030bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020f8  080020f8  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  080020f8  080020f8  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020f8  080020f8  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020f8  080020f8  000030f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020fc  080020fc  000030fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002100  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002168  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002168  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b02  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014bf  00000000  00000000  0000ab93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000518  00000000  00000000  0000c718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001763d  00000000  00000000  0000cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008178  00000000  00000000  0002426d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083a24  00000000  00000000  0002c3e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afe09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000202c  00000000  00000000  000afe4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b1e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080020a4 	.word	0x080020a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080020a4 	.word	0x080020a4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa34 	bl	80005bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f874 	bl	8000244 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f848 	bl	80001f0 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello world!\r\n");
 8000160:	4804      	ldr	r0, [pc, #16]	@ (8000174 <main+0x28>)
 8000162:	f001 fc11 	bl	8001988 <puts>
	  HAL_Delay(1000);
 8000166:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800016a:	f000 fa89 	bl	8000680 <HAL_Delay>
  {
 800016e:	bf00      	nop
 8000170:	e7f6      	b.n	8000160 <main+0x14>
 8000172:	bf00      	nop
 8000174:	080020bc 	.word	0x080020bc

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b090      	sub	sp, #64	@ 0x40
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0318 	add.w	r3, r7, #24
 8000182:	2228      	movs	r2, #40	@ 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f001 fcde 	bl	8001b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800019a:	2302      	movs	r3, #2
 800019c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019e:	2301      	movs	r3, #1
 80001a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a2:	2310      	movs	r3, #16
 80001a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001a6:	2300      	movs	r3, #0
 80001a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 fcf2 	bl	8000b98 <HAL_RCC_OscConfig>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ba:	f000 f883 	bl	80002c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001be:	230f      	movs	r3, #15
 80001c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001c2:	2300      	movs	r3, #0
 80001c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 ff60 	bl	800109c <HAL_RCC_ClockConfig>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001e2:	f000 f86f 	bl	80002c4 <Error_Handler>
  }
}
 80001e6:	bf00      	nop
 80001e8:	3740      	adds	r7, #64	@ 0x40
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
	...

080001f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80001f4:	4b11      	ldr	r3, [pc, #68]	@ (800023c <MX_USART1_UART_Init+0x4c>)
 80001f6:	4a12      	ldr	r2, [pc, #72]	@ (8000240 <MX_USART1_UART_Init+0x50>)
 80001f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80001fa:	4b10      	ldr	r3, [pc, #64]	@ (800023c <MX_USART1_UART_Init+0x4c>)
 80001fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000202:	4b0e      	ldr	r3, [pc, #56]	@ (800023c <MX_USART1_UART_Init+0x4c>)
 8000204:	2200      	movs	r2, #0
 8000206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000208:	4b0c      	ldr	r3, [pc, #48]	@ (800023c <MX_USART1_UART_Init+0x4c>)
 800020a:	2200      	movs	r2, #0
 800020c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800020e:	4b0b      	ldr	r3, [pc, #44]	@ (800023c <MX_USART1_UART_Init+0x4c>)
 8000210:	2200      	movs	r2, #0
 8000212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000214:	4b09      	ldr	r3, [pc, #36]	@ (800023c <MX_USART1_UART_Init+0x4c>)
 8000216:	220c      	movs	r2, #12
 8000218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800021a:	4b08      	ldr	r3, [pc, #32]	@ (800023c <MX_USART1_UART_Init+0x4c>)
 800021c:	2200      	movs	r2, #0
 800021e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <MX_USART1_UART_Init+0x4c>)
 8000222:	2200      	movs	r2, #0
 8000224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000226:	4805      	ldr	r0, [pc, #20]	@ (800023c <MX_USART1_UART_Init+0x4c>)
 8000228:	f001 f8c6 	bl	80013b8 <HAL_UART_Init>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000232:	f000 f847 	bl	80002c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000084 	.word	0x20000084
 8000240:	40013800 	.word	0x40013800

08000244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800024a:	4b14      	ldr	r3, [pc, #80]	@ (800029c <MX_GPIO_Init+0x58>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a13      	ldr	r2, [pc, #76]	@ (800029c <MX_GPIO_Init+0x58>)
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6193      	str	r3, [r2, #24]
 8000256:	4b11      	ldr	r3, [pc, #68]	@ (800029c <MX_GPIO_Init+0x58>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f003 0310 	and.w	r3, r3, #16
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000262:	4b0e      	ldr	r3, [pc, #56]	@ (800029c <MX_GPIO_Init+0x58>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a0d      	ldr	r2, [pc, #52]	@ (800029c <MX_GPIO_Init+0x58>)
 8000268:	f043 0320 	orr.w	r3, r3, #32
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b0b      	ldr	r3, [pc, #44]	@ (800029c <MX_GPIO_Init+0x58>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0320 	and.w	r3, r3, #32
 8000276:	60bb      	str	r3, [r7, #8]
 8000278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027a:	4b08      	ldr	r3, [pc, #32]	@ (800029c <MX_GPIO_Init+0x58>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	4a07      	ldr	r2, [pc, #28]	@ (800029c <MX_GPIO_Init+0x58>)
 8000280:	f043 0304 	orr.w	r3, r3, #4
 8000284:	6193      	str	r3, [r2, #24]
 8000286:	4b05      	ldr	r3, [pc, #20]	@ (800029c <MX_GPIO_Init+0x58>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	f003 0304 	and.w	r3, r3, #4
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000292:	bf00      	nop
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	40021000 	.word	0x40021000

080002a0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80002a8:	1d39      	adds	r1, r7, #4
 80002aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80002ae:	2201      	movs	r2, #1
 80002b0:	4803      	ldr	r0, [pc, #12]	@ (80002c0 <__io_putchar+0x20>)
 80002b2:	f001 f8d1 	bl	8001458 <HAL_UART_Transmit>

  return ch;
 80002b6:	687b      	ldr	r3, [r7, #4]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	20000084 	.word	0x20000084

080002c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c8:	b672      	cpsid	i
}
 80002ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <Error_Handler+0x8>

080002d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002d6:	4b15      	ldr	r3, [pc, #84]	@ (800032c <HAL_MspInit+0x5c>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	4a14      	ldr	r2, [pc, #80]	@ (800032c <HAL_MspInit+0x5c>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6193      	str	r3, [r2, #24]
 80002e2:	4b12      	ldr	r3, [pc, #72]	@ (800032c <HAL_MspInit+0x5c>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ee:	4b0f      	ldr	r3, [pc, #60]	@ (800032c <HAL_MspInit+0x5c>)
 80002f0:	69db      	ldr	r3, [r3, #28]
 80002f2:	4a0e      	ldr	r2, [pc, #56]	@ (800032c <HAL_MspInit+0x5c>)
 80002f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002f8:	61d3      	str	r3, [r2, #28]
 80002fa:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <HAL_MspInit+0x5c>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000306:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <HAL_MspInit+0x60>)
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	4a04      	ldr	r2, [pc, #16]	@ (8000330 <HAL_MspInit+0x60>)
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000
 8000330:	40010000 	.word	0x40010000

08000334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033c:	f107 0310 	add.w	r3, r7, #16
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a1c      	ldr	r2, [pc, #112]	@ (80003c0 <HAL_UART_MspInit+0x8c>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d131      	bne.n	80003b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000354:	4b1b      	ldr	r3, [pc, #108]	@ (80003c4 <HAL_UART_MspInit+0x90>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a1a      	ldr	r2, [pc, #104]	@ (80003c4 <HAL_UART_MspInit+0x90>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b18      	ldr	r3, [pc, #96]	@ (80003c4 <HAL_UART_MspInit+0x90>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800036c:	4b15      	ldr	r3, [pc, #84]	@ (80003c4 <HAL_UART_MspInit+0x90>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a14      	ldr	r2, [pc, #80]	@ (80003c4 <HAL_UART_MspInit+0x90>)
 8000372:	f043 0304 	orr.w	r3, r3, #4
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <HAL_UART_MspInit+0x90>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0304 	and.w	r3, r3, #4
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000384:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000388:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800038a:	2302      	movs	r3, #2
 800038c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038e:	2303      	movs	r3, #3
 8000390:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	480b      	ldr	r0, [pc, #44]	@ (80003c8 <HAL_UART_MspInit+0x94>)
 800039a:	f000 fa79 	bl	8000890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800039e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ac:	f107 0310 	add.w	r3, r7, #16
 80003b0:	4619      	mov	r1, r3
 80003b2:	4805      	ldr	r0, [pc, #20]	@ (80003c8 <HAL_UART_MspInit+0x94>)
 80003b4:	f000 fa6c 	bl	8000890 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80003b8:	bf00      	nop
 80003ba:	3720      	adds	r7, #32
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40013800 	.word	0x40013800
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010800 	.word	0x40010800

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <NMI_Handler+0x4>

080003d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <HardFault_Handler+0x4>

080003dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <MemManage_Handler+0x4>

080003e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <BusFault_Handler+0x4>

080003ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <UsageFault_Handler+0x4>

080003f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr

0800040c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800041c:	f000 f914 	bl	8000648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}

08000424 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
 8000434:	e00a      	b.n	800044c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000436:	f3af 8000 	nop.w
 800043a:	4601      	mov	r1, r0
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	1c5a      	adds	r2, r3, #1
 8000440:	60ba      	str	r2, [r7, #8]
 8000442:	b2ca      	uxtb	r2, r1
 8000444:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	3301      	adds	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	697a      	ldr	r2, [r7, #20]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	429a      	cmp	r2, r3
 8000452:	dbf0      	blt.n	8000436 <_read+0x12>
  }

  return len;
 8000454:	687b      	ldr	r3, [r7, #4]
}
 8000456:	4618      	mov	r0, r3
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	e009      	b.n	8000484 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	60ba      	str	r2, [r7, #8]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff11 	bl	80002a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3301      	adds	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	697a      	ldr	r2, [r7, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	dbf1      	blt.n	8000470 <_write+0x12>
  }
  return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <_close>:

int _close(int file)
{
 8000496:	b480      	push	{r7}
 8000498:	b083      	sub	sp, #12
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800049e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004bc:	605a      	str	r2, [r3, #4]
  return 0;
 80004be:	2300      	movs	r3, #0
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr

080004ca <_isatty>:

int _isatty(int file)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004d2:	2301      	movs	r3, #1
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004de:	b480      	push	{r7}
 80004e0:	b085      	sub	sp, #20
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	60f8      	str	r0, [r7, #12]
 80004e6:	60b9      	str	r1, [r7, #8]
 80004e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004ea:	2300      	movs	r3, #0
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr
	...

080004f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000500:	4a14      	ldr	r2, [pc, #80]	@ (8000554 <_sbrk+0x5c>)
 8000502:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <_sbrk+0x60>)
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800050c:	4b13      	ldr	r3, [pc, #76]	@ (800055c <_sbrk+0x64>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d102      	bne.n	800051a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000514:	4b11      	ldr	r3, [pc, #68]	@ (800055c <_sbrk+0x64>)
 8000516:	4a12      	ldr	r2, [pc, #72]	@ (8000560 <_sbrk+0x68>)
 8000518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800051a:	4b10      	ldr	r3, [pc, #64]	@ (800055c <_sbrk+0x64>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	693a      	ldr	r2, [r7, #16]
 8000524:	429a      	cmp	r2, r3
 8000526:	d207      	bcs.n	8000538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000528:	f001 fb5c 	bl	8001be4 <__errno>
 800052c:	4603      	mov	r3, r0
 800052e:	220c      	movs	r2, #12
 8000530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
 8000536:	e009      	b.n	800054c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <_sbrk+0x64>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800053e:	4b07      	ldr	r3, [pc, #28]	@ (800055c <_sbrk+0x64>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	4a05      	ldr	r2, [pc, #20]	@ (800055c <_sbrk+0x64>)
 8000548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800054a:	68fb      	ldr	r3, [r7, #12]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20005000 	.word	0x20005000
 8000558:	00000400 	.word	0x00000400
 800055c:	200000cc 	.word	0x200000cc
 8000560:	20000220 	.word	0x20000220

08000564 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000570:	f7ff fff8 	bl	8000564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000574:	480b      	ldr	r0, [pc, #44]	@ (80005a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000576:	490c      	ldr	r1, [pc, #48]	@ (80005a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000578:	4a0c      	ldr	r2, [pc, #48]	@ (80005ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058a:	4a09      	ldr	r2, [pc, #36]	@ (80005b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800058c:	4c09      	ldr	r4, [pc, #36]	@ (80005b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059a:	f001 fb29 	bl	8001bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059e:	f7ff fdd5 	bl	800014c <main>
  bx lr
 80005a2:	4770      	bx	lr
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80005ac:	08002100 	.word	0x08002100
  ldr r2, =_sbss
 80005b0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80005b4:	20000220 	.word	0x20000220

080005b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_2_IRQHandler>
	...

080005bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c0:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <HAL_Init+0x28>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a07      	ldr	r2, [pc, #28]	@ (80005e4 <HAL_Init+0x28>)
 80005c6:	f043 0310 	orr.w	r3, r3, #16
 80005ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f92b 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	200f      	movs	r0, #15
 80005d4:	f000 f808 	bl	80005e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d8:	f7ff fe7a 	bl	80002d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40022000 	.word	0x40022000

080005e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <HAL_InitTick+0x54>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <HAL_InitTick+0x58>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000602:	fbb2 f3f3 	udiv	r3, r2, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f935 	bl	8000876 <HAL_SYSTICK_Config>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
 8000614:	e00e      	b.n	8000634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b0f      	cmp	r3, #15
 800061a:	d80a      	bhi.n	8000632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800061c:	2200      	movs	r2, #0
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f000 f90b 	bl	800083e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000628:	4a06      	ldr	r2, [pc, #24]	@ (8000644 <HAL_InitTick+0x5c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062e:	2300      	movs	r3, #0
 8000630:	e000      	b.n	8000634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000632:	2301      	movs	r3, #1
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	20000008 	.word	0x20000008
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <HAL_IncTick+0x1c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <HAL_IncTick+0x20>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4413      	add	r3, r2
 8000658:	4a03      	ldr	r2, [pc, #12]	@ (8000668 <HAL_IncTick+0x20>)
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	20000008 	.word	0x20000008
 8000668:	200000d0 	.word	0x200000d0

0800066c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b02      	ldr	r3, [pc, #8]	@ (800067c <HAL_GetTick+0x10>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	200000d0 	.word	0x200000d0

08000680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff fff0 	bl	800066c <HAL_GetTick>
 800068c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000698:	d005      	beq.n	80006a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <HAL_Delay+0x44>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4413      	add	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006a6:	bf00      	nop
 80006a8:	f7ff ffe0 	bl	800066c <HAL_GetTick>
 80006ac:	4602      	mov	r2, r0
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d8f7      	bhi.n	80006a8 <HAL_Delay+0x28>
  {
  }
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000008 	.word	0x20000008

080006c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	@ (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <__NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	@ (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	@ (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	@ 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	@ 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007f4:	d301      	bcc.n	80007fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00f      	b.n	800081a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <SysTick_Config+0x40>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000802:	210f      	movs	r1, #15
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f7ff ff90 	bl	800072c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <SysTick_Config+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000812:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <SysTick_Config+0x40>)
 8000814:	2207      	movs	r2, #7
 8000816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	e000e010 	.word	0xe000e010

08000828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ff49 	bl	80006c8 <__NVIC_SetPriorityGrouping>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000850:	f7ff ff5e 	bl	8000710 <__NVIC_GetPriorityGrouping>
 8000854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	6978      	ldr	r0, [r7, #20]
 800085c:	f7ff ff90 	bl	8000780 <NVIC_EncodePriority>
 8000860:	4602      	mov	r2, r0
 8000862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff5f 	bl	800072c <__NVIC_SetPriority>
}
 800086e:	bf00      	nop
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ffb0 	bl	80007e4 <SysTick_Config>
 8000884:	4603      	mov	r3, r0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000890:	b480      	push	{r7}
 8000892:	b08b      	sub	sp, #44	@ 0x2c
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a2:	e169      	b.n	8000b78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008a4:	2201      	movs	r2, #1
 80008a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	69fa      	ldr	r2, [r7, #28]
 80008b4:	4013      	ands	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	429a      	cmp	r2, r3
 80008be:	f040 8158 	bne.w	8000b72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	4a9a      	ldr	r2, [pc, #616]	@ (8000b30 <HAL_GPIO_Init+0x2a0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d05e      	beq.n	800098a <HAL_GPIO_Init+0xfa>
 80008cc:	4a98      	ldr	r2, [pc, #608]	@ (8000b30 <HAL_GPIO_Init+0x2a0>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d875      	bhi.n	80009be <HAL_GPIO_Init+0x12e>
 80008d2:	4a98      	ldr	r2, [pc, #608]	@ (8000b34 <HAL_GPIO_Init+0x2a4>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d058      	beq.n	800098a <HAL_GPIO_Init+0xfa>
 80008d8:	4a96      	ldr	r2, [pc, #600]	@ (8000b34 <HAL_GPIO_Init+0x2a4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d86f      	bhi.n	80009be <HAL_GPIO_Init+0x12e>
 80008de:	4a96      	ldr	r2, [pc, #600]	@ (8000b38 <HAL_GPIO_Init+0x2a8>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d052      	beq.n	800098a <HAL_GPIO_Init+0xfa>
 80008e4:	4a94      	ldr	r2, [pc, #592]	@ (8000b38 <HAL_GPIO_Init+0x2a8>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d869      	bhi.n	80009be <HAL_GPIO_Init+0x12e>
 80008ea:	4a94      	ldr	r2, [pc, #592]	@ (8000b3c <HAL_GPIO_Init+0x2ac>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d04c      	beq.n	800098a <HAL_GPIO_Init+0xfa>
 80008f0:	4a92      	ldr	r2, [pc, #584]	@ (8000b3c <HAL_GPIO_Init+0x2ac>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d863      	bhi.n	80009be <HAL_GPIO_Init+0x12e>
 80008f6:	4a92      	ldr	r2, [pc, #584]	@ (8000b40 <HAL_GPIO_Init+0x2b0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d046      	beq.n	800098a <HAL_GPIO_Init+0xfa>
 80008fc:	4a90      	ldr	r2, [pc, #576]	@ (8000b40 <HAL_GPIO_Init+0x2b0>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d85d      	bhi.n	80009be <HAL_GPIO_Init+0x12e>
 8000902:	2b12      	cmp	r3, #18
 8000904:	d82a      	bhi.n	800095c <HAL_GPIO_Init+0xcc>
 8000906:	2b12      	cmp	r3, #18
 8000908:	d859      	bhi.n	80009be <HAL_GPIO_Init+0x12e>
 800090a:	a201      	add	r2, pc, #4	@ (adr r2, 8000910 <HAL_GPIO_Init+0x80>)
 800090c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000910:	0800098b 	.word	0x0800098b
 8000914:	08000965 	.word	0x08000965
 8000918:	08000977 	.word	0x08000977
 800091c:	080009b9 	.word	0x080009b9
 8000920:	080009bf 	.word	0x080009bf
 8000924:	080009bf 	.word	0x080009bf
 8000928:	080009bf 	.word	0x080009bf
 800092c:	080009bf 	.word	0x080009bf
 8000930:	080009bf 	.word	0x080009bf
 8000934:	080009bf 	.word	0x080009bf
 8000938:	080009bf 	.word	0x080009bf
 800093c:	080009bf 	.word	0x080009bf
 8000940:	080009bf 	.word	0x080009bf
 8000944:	080009bf 	.word	0x080009bf
 8000948:	080009bf 	.word	0x080009bf
 800094c:	080009bf 	.word	0x080009bf
 8000950:	080009bf 	.word	0x080009bf
 8000954:	0800096d 	.word	0x0800096d
 8000958:	08000981 	.word	0x08000981
 800095c:	4a79      	ldr	r2, [pc, #484]	@ (8000b44 <HAL_GPIO_Init+0x2b4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d013      	beq.n	800098a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000962:	e02c      	b.n	80009be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	623b      	str	r3, [r7, #32]
          break;
 800096a:	e029      	b.n	80009c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	3304      	adds	r3, #4
 8000972:	623b      	str	r3, [r7, #32]
          break;
 8000974:	e024      	b.n	80009c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	3308      	adds	r3, #8
 800097c:	623b      	str	r3, [r7, #32]
          break;
 800097e:	e01f      	b.n	80009c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	330c      	adds	r3, #12
 8000986:	623b      	str	r3, [r7, #32]
          break;
 8000988:	e01a      	b.n	80009c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d102      	bne.n	8000998 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000992:	2304      	movs	r3, #4
 8000994:	623b      	str	r3, [r7, #32]
          break;
 8000996:	e013      	b.n	80009c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d105      	bne.n	80009ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a0:	2308      	movs	r3, #8
 80009a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	611a      	str	r2, [r3, #16]
          break;
 80009aa:	e009      	b.n	80009c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ac:	2308      	movs	r3, #8
 80009ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	69fa      	ldr	r2, [r7, #28]
 80009b4:	615a      	str	r2, [r3, #20]
          break;
 80009b6:	e003      	b.n	80009c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
          break;
 80009bc:	e000      	b.n	80009c0 <HAL_GPIO_Init+0x130>
          break;
 80009be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	2bff      	cmp	r3, #255	@ 0xff
 80009c4:	d801      	bhi.n	80009ca <HAL_GPIO_Init+0x13a>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	e001      	b.n	80009ce <HAL_GPIO_Init+0x13e>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3304      	adds	r3, #4
 80009ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	2bff      	cmp	r3, #255	@ 0xff
 80009d4:	d802      	bhi.n	80009dc <HAL_GPIO_Init+0x14c>
 80009d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	e002      	b.n	80009e2 <HAL_GPIO_Init+0x152>
 80009dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009de:	3b08      	subs	r3, #8
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	210f      	movs	r1, #15
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	fa01 f303 	lsl.w	r3, r1, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	401a      	ands	r2, r3
 80009f4:	6a39      	ldr	r1, [r7, #32]
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
 80009fc:	431a      	orrs	r2, r3
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f000 80b1 	beq.w	8000b72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a10:	4b4d      	ldr	r3, [pc, #308]	@ (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a4c      	ldr	r2, [pc, #304]	@ (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b4a      	ldr	r3, [pc, #296]	@ (8000b48 <HAL_GPIO_Init+0x2b8>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a28:	4a48      	ldr	r2, [pc, #288]	@ (8000b4c <HAL_GPIO_Init+0x2bc>)
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2c:	089b      	lsrs	r3, r3, #2
 8000a2e:	3302      	adds	r3, #2
 8000a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	220f      	movs	r2, #15
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a40      	ldr	r2, [pc, #256]	@ (8000b50 <HAL_GPIO_Init+0x2c0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d013      	beq.n	8000a7c <HAL_GPIO_Init+0x1ec>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a3f      	ldr	r2, [pc, #252]	@ (8000b54 <HAL_GPIO_Init+0x2c4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d00d      	beq.n	8000a78 <HAL_GPIO_Init+0x1e8>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b58 <HAL_GPIO_Init+0x2c8>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d007      	beq.n	8000a74 <HAL_GPIO_Init+0x1e4>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a3d      	ldr	r2, [pc, #244]	@ (8000b5c <HAL_GPIO_Init+0x2cc>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d101      	bne.n	8000a70 <HAL_GPIO_Init+0x1e0>
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e006      	b.n	8000a7e <HAL_GPIO_Init+0x1ee>
 8000a70:	2304      	movs	r3, #4
 8000a72:	e004      	b.n	8000a7e <HAL_GPIO_Init+0x1ee>
 8000a74:	2302      	movs	r3, #2
 8000a76:	e002      	b.n	8000a7e <HAL_GPIO_Init+0x1ee>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e000      	b.n	8000a7e <HAL_GPIO_Init+0x1ee>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a80:	f002 0203 	and.w	r2, r2, #3
 8000a84:	0092      	lsls	r2, r2, #2
 8000a86:	4093      	lsls	r3, r2
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a8e:	492f      	ldr	r1, [pc, #188]	@ (8000b4c <HAL_GPIO_Init+0x2bc>)
 8000a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a92:	089b      	lsrs	r3, r3, #2
 8000a94:	3302      	adds	r3, #2
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d006      	beq.n	8000ab6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	492c      	ldr	r1, [pc, #176]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	608b      	str	r3, [r1, #8]
 8000ab4:	e006      	b.n	8000ac4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	4928      	ldr	r1, [pc, #160]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d006      	beq.n	8000ade <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ad0:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	4922      	ldr	r1, [pc, #136]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	60cb      	str	r3, [r1, #12]
 8000adc:	e006      	b.n	8000aec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ade:	4b20      	ldr	r3, [pc, #128]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	491e      	ldr	r1, [pc, #120]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d006      	beq.n	8000b06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000af8:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	4918      	ldr	r1, [pc, #96]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	604b      	str	r3, [r1, #4]
 8000b04:	e006      	b.n	8000b14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	4914      	ldr	r1, [pc, #80]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000b10:	4013      	ands	r3, r2
 8000b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d021      	beq.n	8000b64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	490e      	ldr	r1, [pc, #56]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	600b      	str	r3, [r1, #0]
 8000b2c:	e021      	b.n	8000b72 <HAL_GPIO_Init+0x2e2>
 8000b2e:	bf00      	nop
 8000b30:	10320000 	.word	0x10320000
 8000b34:	10310000 	.word	0x10310000
 8000b38:	10220000 	.word	0x10220000
 8000b3c:	10210000 	.word	0x10210000
 8000b40:	10120000 	.word	0x10120000
 8000b44:	10110000 	.word	0x10110000
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010000 	.word	0x40010000
 8000b50:	40010800 	.word	0x40010800
 8000b54:	40010c00 	.word	0x40010c00
 8000b58:	40011000 	.word	0x40011000
 8000b5c:	40011400 	.word	0x40011400
 8000b60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <HAL_GPIO_Init+0x304>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	4909      	ldr	r1, [pc, #36]	@ (8000b94 <HAL_GPIO_Init+0x304>)
 8000b6e:	4013      	ands	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b74:	3301      	adds	r3, #1
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f47f ae8e 	bne.w	80008a4 <HAL_GPIO_Init+0x14>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	372c      	adds	r7, #44	@ 0x2c
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	40010400 	.word	0x40010400

08000b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e272      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 8087 	beq.w	8000cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bb8:	4b92      	ldr	r3, [pc, #584]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 030c 	and.w	r3, r3, #12
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d00c      	beq.n	8000bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc4:	4b8f      	ldr	r3, [pc, #572]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 030c 	and.w	r3, r3, #12
 8000bcc:	2b08      	cmp	r3, #8
 8000bce:	d112      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x5e>
 8000bd0:	4b8c      	ldr	r3, [pc, #560]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bdc:	d10b      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bde:	4b89      	ldr	r3, [pc, #548]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d06c      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x12c>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d168      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e24c      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bfe:	d106      	bne.n	8000c0e <HAL_RCC_OscConfig+0x76>
 8000c00:	4b80      	ldr	r3, [pc, #512]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a7f      	ldr	r2, [pc, #508]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	e02e      	b.n	8000c6c <HAL_RCC_OscConfig+0xd4>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10c      	bne.n	8000c30 <HAL_RCC_OscConfig+0x98>
 8000c16:	4b7b      	ldr	r3, [pc, #492]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a7a      	ldr	r2, [pc, #488]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	4b78      	ldr	r3, [pc, #480]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a77      	ldr	r2, [pc, #476]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	e01d      	b.n	8000c6c <HAL_RCC_OscConfig+0xd4>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c38:	d10c      	bne.n	8000c54 <HAL_RCC_OscConfig+0xbc>
 8000c3a:	4b72      	ldr	r3, [pc, #456]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a71      	ldr	r2, [pc, #452]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	4b6f      	ldr	r3, [pc, #444]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a6e      	ldr	r2, [pc, #440]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e00b      	b.n	8000c6c <HAL_RCC_OscConfig+0xd4>
 8000c54:	4b6b      	ldr	r3, [pc, #428]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a6a      	ldr	r2, [pc, #424]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	4b68      	ldr	r3, [pc, #416]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a67      	ldr	r2, [pc, #412]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d013      	beq.n	8000c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c74:	f7ff fcfa 	bl	800066c <HAL_GetTick>
 8000c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7a:	e008      	b.n	8000c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c7c:	f7ff fcf6 	bl	800066c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b64      	cmp	r3, #100	@ 0x64
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e200      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f0      	beq.n	8000c7c <HAL_RCC_OscConfig+0xe4>
 8000c9a:	e014      	b.n	8000cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fce6 	bl	800066c <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fce2 	bl	800066c <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	@ 0x64
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e1ec      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb6:	4b53      	ldr	r3, [pc, #332]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x10c>
 8000cc2:	e000      	b.n	8000cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d063      	beq.n	8000d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 030c 	and.w	r3, r3, #12
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00b      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cde:	4b49      	ldr	r3, [pc, #292]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d11c      	bne.n	8000d24 <HAL_RCC_OscConfig+0x18c>
 8000cea:	4b46      	ldr	r3, [pc, #280]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d116      	bne.n	8000d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf6:	4b43      	ldr	r3, [pc, #268]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d005      	beq.n	8000d0e <HAL_RCC_OscConfig+0x176>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d001      	beq.n	8000d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e1c0      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	4939      	ldr	r1, [pc, #228]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d22:	e03a      	b.n	8000d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d020      	beq.n	8000d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d2c:	4b36      	ldr	r3, [pc, #216]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d32:	f7ff fc9b 	bl	800066c <HAL_GetTick>
 8000d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d38:	e008      	b.n	8000d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d3a:	f7ff fc97 	bl	800066c <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d901      	bls.n	8000d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e1a1      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f0      	beq.n	8000d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d58:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	4927      	ldr	r1, [pc, #156]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	600b      	str	r3, [r1, #0]
 8000d6c:	e015      	b.n	8000d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d6e:	4b26      	ldr	r3, [pc, #152]	@ (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fc7a 	bl	800066c <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fc76 	bl	800066c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e180      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d03a      	beq.n	8000e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d019      	beq.n	8000de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <HAL_RCC_OscConfig+0x274>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db4:	f7ff fc5a 	bl	800066c <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dbc:	f7ff fc56 	bl	800066c <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e160      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f0      	beq.n	8000dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f000 face 	bl	800137c <RCC_Delay>
 8000de0:	e01c      	b.n	8000e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <HAL_RCC_OscConfig+0x274>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de8:	f7ff fc40 	bl	800066c <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dee:	e00f      	b.n	8000e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df0:	f7ff fc3c 	bl	800066c <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d908      	bls.n	8000e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e146      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	42420000 	.word	0x42420000
 8000e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e10:	4b92      	ldr	r3, [pc, #584]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1e9      	bne.n	8000df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 80a6 	beq.w	8000f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2e:	4b8b      	ldr	r3, [pc, #556]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10d      	bne.n	8000e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b88      	ldr	r3, [pc, #544]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4a87      	ldr	r2, [pc, #540]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	61d3      	str	r3, [r2, #28]
 8000e46:	4b85      	ldr	r3, [pc, #532]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e52:	2301      	movs	r3, #1
 8000e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e56:	4b82      	ldr	r3, [pc, #520]	@ (8001060 <HAL_RCC_OscConfig+0x4c8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d118      	bne.n	8000e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e62:	4b7f      	ldr	r3, [pc, #508]	@ (8001060 <HAL_RCC_OscConfig+0x4c8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7e      	ldr	r2, [pc, #504]	@ (8001060 <HAL_RCC_OscConfig+0x4c8>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fbfd 	bl	800066c <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e76:	f7ff fbf9 	bl	800066c <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b64      	cmp	r3, #100	@ 0x64
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e103      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e88:	4b75      	ldr	r3, [pc, #468]	@ (8001060 <HAL_RCC_OscConfig+0x4c8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f0      	beq.n	8000e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d106      	bne.n	8000eaa <HAL_RCC_OscConfig+0x312>
 8000e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	4a6e      	ldr	r2, [pc, #440]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6213      	str	r3, [r2, #32]
 8000ea8:	e02d      	b.n	8000f06 <HAL_RCC_OscConfig+0x36e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0x334>
 8000eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4a69      	ldr	r2, [pc, #420]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	f023 0301 	bic.w	r3, r3, #1
 8000ebc:	6213      	str	r3, [r2, #32]
 8000ebe:	4b67      	ldr	r3, [pc, #412]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	4a66      	ldr	r2, [pc, #408]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	f023 0304 	bic.w	r3, r3, #4
 8000ec8:	6213      	str	r3, [r2, #32]
 8000eca:	e01c      	b.n	8000f06 <HAL_RCC_OscConfig+0x36e>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	2b05      	cmp	r3, #5
 8000ed2:	d10c      	bne.n	8000eee <HAL_RCC_OscConfig+0x356>
 8000ed4:	4b61      	ldr	r3, [pc, #388]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4a60      	ldr	r2, [pc, #384]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6213      	str	r3, [r2, #32]
 8000ee0:	4b5e      	ldr	r3, [pc, #376]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6213      	str	r3, [r2, #32]
 8000eec:	e00b      	b.n	8000f06 <HAL_RCC_OscConfig+0x36e>
 8000eee:	4b5b      	ldr	r3, [pc, #364]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4a5a      	ldr	r2, [pc, #360]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	6213      	str	r3, [r2, #32]
 8000efa:	4b58      	ldr	r3, [pc, #352]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4a57      	ldr	r2, [pc, #348]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	f023 0304 	bic.w	r3, r3, #4
 8000f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d015      	beq.n	8000f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fbad 	bl	800066c <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f14:	e00a      	b.n	8000f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f16:	f7ff fba9 	bl	800066c <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e0b1      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f2c:	4b4b      	ldr	r3, [pc, #300]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0ee      	beq.n	8000f16 <HAL_RCC_OscConfig+0x37e>
 8000f38:	e014      	b.n	8000f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3a:	f7ff fb97 	bl	800066c <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f40:	e00a      	b.n	8000f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f42:	f7ff fb93 	bl	800066c <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e09b      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f58:	4b40      	ldr	r3, [pc, #256]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1ee      	bne.n	8000f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d105      	bne.n	8000f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8087 	beq.w	800108e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f80:	4b36      	ldr	r3, [pc, #216]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 030c 	and.w	r3, r3, #12
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d061      	beq.n	8001050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d146      	bne.n	8001022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f94:	4b33      	ldr	r3, [pc, #204]	@ (8001064 <HAL_RCC_OscConfig+0x4cc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fb67 	bl	800066c <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fa2:	f7ff fb63 	bl	800066c <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e06d      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb4:	4b29      	ldr	r3, [pc, #164]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f0      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc8:	d108      	bne.n	8000fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fca:	4b24      	ldr	r3, [pc, #144]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	4921      	ldr	r1, [pc, #132]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a19      	ldr	r1, [r3, #32]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fec:	430b      	orrs	r3, r1
 8000fee:	491b      	ldr	r1, [pc, #108]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8001064 <HAL_RCC_OscConfig+0x4cc>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fb37 	bl	800066c <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001002:	f7ff fb33 	bl	800066c <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e03d      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001014:	4b11      	ldr	r3, [pc, #68]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f0      	beq.n	8001002 <HAL_RCC_OscConfig+0x46a>
 8001020:	e035      	b.n	800108e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <HAL_RCC_OscConfig+0x4cc>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fb20 	bl	800066c <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001030:	f7ff fb1c 	bl	800066c <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e026      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_RCC_OscConfig+0x4c4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x498>
 800104e:	e01e      	b.n	800108e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d107      	bne.n	8001068 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e019      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
 800105c:	40021000 	.word	0x40021000
 8001060:	40007000 	.word	0x40007000
 8001064:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001068:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <HAL_RCC_OscConfig+0x500>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	429a      	cmp	r2, r3
 800107a:	d106      	bne.n	800108a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001086:	429a      	cmp	r2, r3
 8001088:	d001      	beq.n	800108e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e0d0      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010b0:	4b6a      	ldr	r3, [pc, #424]	@ (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0307 	and.w	r3, r3, #7
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d910      	bls.n	80010e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010be:	4b67      	ldr	r3, [pc, #412]	@ (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 0207 	bic.w	r2, r3, #7
 80010c6:	4965      	ldr	r1, [pc, #404]	@ (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ce:	4b63      	ldr	r3, [pc, #396]	@ (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d001      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e0b8      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d020      	beq.n	800112e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f8:	4b59      	ldr	r3, [pc, #356]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	4a58      	ldr	r2, [pc, #352]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 80010fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001110:	4b53      	ldr	r3, [pc, #332]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4a52      	ldr	r2, [pc, #328]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800111a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800111c:	4b50      	ldr	r3, [pc, #320]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	494d      	ldr	r1, [pc, #308]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	4313      	orrs	r3, r2
 800112c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d040      	beq.n	80011bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d107      	bne.n	8001152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b47      	ldr	r3, [pc, #284]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d115      	bne.n	800117a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e07f      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d107      	bne.n	800116a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800115a:	4b41      	ldr	r3, [pc, #260]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e073      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116a:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e06b      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800117a:	4b39      	ldr	r3, [pc, #228]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f023 0203 	bic.w	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4936      	ldr	r1, [pc, #216]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800118c:	f7ff fa6e 	bl	800066c <HAL_GetTick>
 8001190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001192:	e00a      	b.n	80011aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001194:	f7ff fa6a 	bl	800066c <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e053      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 020c 	and.w	r2, r3, #12
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d1eb      	bne.n	8001194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011bc:	4b27      	ldr	r3, [pc, #156]	@ (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d210      	bcs.n	80011ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ca:	4b24      	ldr	r3, [pc, #144]	@ (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 0207 	bic.w	r2, r3, #7
 80011d2:	4922      	ldr	r1, [pc, #136]	@ (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d001      	beq.n	80011ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e032      	b.n	8001252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d008      	beq.n	800120a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f8:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	4916      	ldr	r1, [pc, #88]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d009      	beq.n	800122a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	490e      	ldr	r1, [pc, #56]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	4313      	orrs	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800122a:	f000 f821 	bl	8001270 <HAL_RCC_GetSysClockFreq>
 800122e:	4602      	mov	r2, r0
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	490a      	ldr	r1, [pc, #40]	@ (8001264 <HAL_RCC_ClockConfig+0x1c8>)
 800123c:	5ccb      	ldrb	r3, [r1, r3]
 800123e:	fa22 f303 	lsr.w	r3, r2, r3
 8001242:	4a09      	ldr	r2, [pc, #36]	@ (8001268 <HAL_RCC_ClockConfig+0x1cc>)
 8001244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <HAL_RCC_ClockConfig+0x1d0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f9cc 	bl	80005e8 <HAL_InitTick>

  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000
 8001260:	40021000 	.word	0x40021000
 8001264:	080020cc 	.word	0x080020cc
 8001268:	20000000 	.word	0x20000000
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800128a:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <HAL_RCC_GetSysClockFreq+0x94>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b04      	cmp	r3, #4
 8001298:	d002      	beq.n	80012a0 <HAL_RCC_GetSysClockFreq+0x30>
 800129a:	2b08      	cmp	r3, #8
 800129c:	d003      	beq.n	80012a6 <HAL_RCC_GetSysClockFreq+0x36>
 800129e:	e027      	b.n	80012f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <HAL_RCC_GetSysClockFreq+0x98>)
 80012a2:	613b      	str	r3, [r7, #16]
      break;
 80012a4:	e027      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	4a17      	ldr	r2, [pc, #92]	@ (800130c <HAL_RCC_GetSysClockFreq+0x9c>)
 80012b0:	5cd3      	ldrb	r3, [r2, r3]
 80012b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d010      	beq.n	80012e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <HAL_RCC_GetSysClockFreq+0x94>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	0c5b      	lsrs	r3, r3, #17
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	4a11      	ldr	r2, [pc, #68]	@ (8001310 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012ca:	5cd3      	ldrb	r3, [r2, r3]
 80012cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001308 <HAL_RCC_GetSysClockFreq+0x98>)
 80012d2:	fb03 f202 	mul.w	r2, r3, r2
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e004      	b.n	80012ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001314 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	613b      	str	r3, [r7, #16]
      break;
 80012ee:	e002      	b.n	80012f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012f0:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <HAL_RCC_GetSysClockFreq+0x98>)
 80012f2:	613b      	str	r3, [r7, #16]
      break;
 80012f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012f6:	693b      	ldr	r3, [r7, #16]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	007a1200 	.word	0x007a1200
 800130c:	080020e4 	.word	0x080020e4
 8001310:	080020f4 	.word	0x080020f4
 8001314:	003d0900 	.word	0x003d0900

08001318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800131c:	4b02      	ldr	r3, [pc, #8]	@ (8001328 <HAL_RCC_GetHCLKFreq+0x10>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000000 	.word	0x20000000

0800132c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001330:	f7ff fff2 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b05      	ldr	r3, [pc, #20]	@ (800134c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	4903      	ldr	r1, [pc, #12]	@ (8001350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000
 8001350:	080020dc 	.word	0x080020dc

08001354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001358:	f7ff ffde 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 800135c:	4602      	mov	r2, r0
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	0adb      	lsrs	r3, r3, #11
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	4903      	ldr	r1, [pc, #12]	@ (8001378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800136a:	5ccb      	ldrb	r3, [r1, r3]
 800136c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	080020dc 	.word	0x080020dc

0800137c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <RCC_Delay+0x34>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <RCC_Delay+0x38>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	0a5b      	lsrs	r3, r3, #9
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001398:	bf00      	nop
  }
  while (Delay --);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	60fa      	str	r2, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f9      	bne.n	8001398 <RCC_Delay+0x1c>
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000000 	.word	0x20000000
 80013b4:	10624dd3 	.word	0x10624dd3

080013b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e042      	b.n	8001450 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7fe ffa8 	bl	8000334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2224      	movs	r2, #36	@ 0x24
 80013e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80013fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f91d 	bl	800163c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	695a      	ldr	r2, [r3, #20]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001420:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001430:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2220      	movs	r2, #32
 800143c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2220      	movs	r2, #32
 8001444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af02      	add	r7, sp, #8
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	4613      	mov	r3, r2
 8001466:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b20      	cmp	r3, #32
 8001476:	d16d      	bne.n	8001554 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <HAL_UART_Transmit+0x2c>
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e066      	b.n	8001556 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2221      	movs	r2, #33	@ 0x21
 8001492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001496:	f7ff f8e9 	bl	800066c <HAL_GetTick>
 800149a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	88fa      	ldrh	r2, [r7, #6]
 80014a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	88fa      	ldrh	r2, [r7, #6]
 80014a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014b0:	d108      	bne.n	80014c4 <HAL_UART_Transmit+0x6c>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d104      	bne.n	80014c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	e003      	b.n	80014cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80014cc:	e02a      	b.n	8001524 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2200      	movs	r2, #0
 80014d6:	2180      	movs	r1, #128	@ 0x80
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 f840 	bl	800155e <UART_WaitOnFlagUntilTimeout>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e036      	b.n	8001556 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10b      	bne.n	8001506 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	3302      	adds	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	e007      	b.n	8001516 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	3301      	adds	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800151a:	b29b      	uxth	r3, r3
 800151c:	3b01      	subs	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001528:	b29b      	uxth	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1cf      	bne.n	80014ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2200      	movs	r2, #0
 8001536:	2140      	movs	r1, #64	@ 0x40
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 f810 	bl	800155e <UART_WaitOnFlagUntilTimeout>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e006      	b.n	8001556 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2220      	movs	r2, #32
 800154c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	e000      	b.n	8001556 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001554:	2302      	movs	r3, #2
  }
}
 8001556:	4618      	mov	r0, r3
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b090      	sub	sp, #64	@ 0x40
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4613      	mov	r3, r2
 800156c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800156e:	e050      	b.n	8001612 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001576:	d04c      	beq.n	8001612 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001578:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <UART_WaitOnFlagUntilTimeout+0x30>
 800157e:	f7ff f875 	bl	800066c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800158a:	429a      	cmp	r2, r3
 800158c:	d241      	bcs.n	8001612 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	330c      	adds	r3, #12
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001598:	e853 3f00 	ldrex	r3, [r3]
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80015a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	330c      	adds	r3, #12
 80015ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015ae:	637a      	str	r2, [r7, #52]	@ 0x34
 80015b0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80015b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015b6:	e841 2300 	strex	r3, r2, [r1]
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80015bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1e5      	bne.n	800158e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3314      	adds	r3, #20
 80015c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	e853 3f00 	ldrex	r3, [r3]
 80015d0:	613b      	str	r3, [r7, #16]
   return(result);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3314      	adds	r3, #20
 80015e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015e2:	623a      	str	r2, [r7, #32]
 80015e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015e6:	69f9      	ldr	r1, [r7, #28]
 80015e8:	6a3a      	ldr	r2, [r7, #32]
 80015ea:	e841 2300 	strex	r3, r2, [r1]
 80015ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1e5      	bne.n	80015c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2220      	movs	r2, #32
 80015fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2220      	movs	r2, #32
 8001602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e00f      	b.n	8001632 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4013      	ands	r3, r2
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	429a      	cmp	r2, r3
 8001620:	bf0c      	ite	eq
 8001622:	2301      	moveq	r3, #1
 8001624:	2300      	movne	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	429a      	cmp	r2, r3
 800162e:	d09f      	beq.n	8001570 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3740      	adds	r7, #64	@ 0x40
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	4313      	orrs	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001676:	f023 030c 	bic.w	r3, r3, #12
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	430b      	orrs	r3, r1
 8001682:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699a      	ldr	r2, [r3, #24]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a2c      	ldr	r2, [pc, #176]	@ (8001750 <UART_SetConfig+0x114>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d103      	bne.n	80016ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80016a4:	f7ff fe56 	bl	8001354 <HAL_RCC_GetPCLK2Freq>
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	e002      	b.n	80016b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80016ac:	f7ff fe3e 	bl	800132c <HAL_RCC_GetPCLK1Freq>
 80016b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	009a      	lsls	r2, r3, #2
 80016bc:	441a      	add	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c8:	4a22      	ldr	r2, [pc, #136]	@ (8001754 <UART_SetConfig+0x118>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	0119      	lsls	r1, r3, #4
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	009a      	lsls	r2, r3, #2
 80016dc:	441a      	add	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80016e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <UART_SetConfig+0x118>)
 80016ea:	fba3 0302 	umull	r0, r3, r3, r2
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2064      	movs	r0, #100	@ 0x64
 80016f2:	fb00 f303 	mul.w	r3, r0, r3
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	3332      	adds	r3, #50	@ 0x32
 80016fc:	4a15      	ldr	r2, [pc, #84]	@ (8001754 <UART_SetConfig+0x118>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001708:	4419      	add	r1, r3
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	009a      	lsls	r2, r3, #2
 8001714:	441a      	add	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <UART_SetConfig+0x118>)
 8001722:	fba3 0302 	umull	r0, r3, r3, r2
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2064      	movs	r0, #100	@ 0x64
 800172a:	fb00 f303 	mul.w	r3, r0, r3
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	3332      	adds	r3, #50	@ 0x32
 8001734:	4a07      	ldr	r2, [pc, #28]	@ (8001754 <UART_SetConfig+0x118>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	f003 020f 	and.w	r2, r3, #15
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	440a      	add	r2, r1
 8001746:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40013800 	.word	0x40013800
 8001754:	51eb851f 	.word	0x51eb851f

08001758 <std>:
 8001758:	2300      	movs	r3, #0
 800175a:	b510      	push	{r4, lr}
 800175c:	4604      	mov	r4, r0
 800175e:	e9c0 3300 	strd	r3, r3, [r0]
 8001762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001766:	6083      	str	r3, [r0, #8]
 8001768:	8181      	strh	r1, [r0, #12]
 800176a:	6643      	str	r3, [r0, #100]	@ 0x64
 800176c:	81c2      	strh	r2, [r0, #14]
 800176e:	6183      	str	r3, [r0, #24]
 8001770:	4619      	mov	r1, r3
 8001772:	2208      	movs	r2, #8
 8001774:	305c      	adds	r0, #92	@ 0x5c
 8001776:	f000 f9e7 	bl	8001b48 <memset>
 800177a:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <std+0x58>)
 800177c:	6224      	str	r4, [r4, #32]
 800177e:	6263      	str	r3, [r4, #36]	@ 0x24
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <std+0x5c>)
 8001782:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <std+0x60>)
 8001786:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <std+0x64>)
 800178a:	6323      	str	r3, [r4, #48]	@ 0x30
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <std+0x68>)
 800178e:	429c      	cmp	r4, r3
 8001790:	d006      	beq.n	80017a0 <std+0x48>
 8001792:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001796:	4294      	cmp	r4, r2
 8001798:	d002      	beq.n	80017a0 <std+0x48>
 800179a:	33d0      	adds	r3, #208	@ 0xd0
 800179c:	429c      	cmp	r4, r3
 800179e:	d105      	bne.n	80017ac <std+0x54>
 80017a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80017a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017a8:	f000 ba46 	b.w	8001c38 <__retarget_lock_init_recursive>
 80017ac:	bd10      	pop	{r4, pc}
 80017ae:	bf00      	nop
 80017b0:	08001999 	.word	0x08001999
 80017b4:	080019bb 	.word	0x080019bb
 80017b8:	080019f3 	.word	0x080019f3
 80017bc:	08001a17 	.word	0x08001a17
 80017c0:	200000d4 	.word	0x200000d4

080017c4 <stdio_exit_handler>:
 80017c4:	4a02      	ldr	r2, [pc, #8]	@ (80017d0 <stdio_exit_handler+0xc>)
 80017c6:	4903      	ldr	r1, [pc, #12]	@ (80017d4 <stdio_exit_handler+0x10>)
 80017c8:	4803      	ldr	r0, [pc, #12]	@ (80017d8 <stdio_exit_handler+0x14>)
 80017ca:	f000 b869 	b.w	80018a0 <_fwalk_sglue>
 80017ce:	bf00      	nop
 80017d0:	2000000c 	.word	0x2000000c
 80017d4:	08001f2d 	.word	0x08001f2d
 80017d8:	2000001c 	.word	0x2000001c

080017dc <cleanup_stdio>:
 80017dc:	6841      	ldr	r1, [r0, #4]
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <cleanup_stdio+0x34>)
 80017e0:	b510      	push	{r4, lr}
 80017e2:	4299      	cmp	r1, r3
 80017e4:	4604      	mov	r4, r0
 80017e6:	d001      	beq.n	80017ec <cleanup_stdio+0x10>
 80017e8:	f000 fba0 	bl	8001f2c <_fflush_r>
 80017ec:	68a1      	ldr	r1, [r4, #8]
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <cleanup_stdio+0x38>)
 80017f0:	4299      	cmp	r1, r3
 80017f2:	d002      	beq.n	80017fa <cleanup_stdio+0x1e>
 80017f4:	4620      	mov	r0, r4
 80017f6:	f000 fb99 	bl	8001f2c <_fflush_r>
 80017fa:	68e1      	ldr	r1, [r4, #12]
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <cleanup_stdio+0x3c>)
 80017fe:	4299      	cmp	r1, r3
 8001800:	d004      	beq.n	800180c <cleanup_stdio+0x30>
 8001802:	4620      	mov	r0, r4
 8001804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001808:	f000 bb90 	b.w	8001f2c <_fflush_r>
 800180c:	bd10      	pop	{r4, pc}
 800180e:	bf00      	nop
 8001810:	200000d4 	.word	0x200000d4
 8001814:	2000013c 	.word	0x2000013c
 8001818:	200001a4 	.word	0x200001a4

0800181c <global_stdio_init.part.0>:
 800181c:	b510      	push	{r4, lr}
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <global_stdio_init.part.0+0x30>)
 8001820:	4c0b      	ldr	r4, [pc, #44]	@ (8001850 <global_stdio_init.part.0+0x34>)
 8001822:	4a0c      	ldr	r2, [pc, #48]	@ (8001854 <global_stdio_init.part.0+0x38>)
 8001824:	4620      	mov	r0, r4
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	2104      	movs	r1, #4
 800182a:	2200      	movs	r2, #0
 800182c:	f7ff ff94 	bl	8001758 <std>
 8001830:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001834:	2201      	movs	r2, #1
 8001836:	2109      	movs	r1, #9
 8001838:	f7ff ff8e 	bl	8001758 <std>
 800183c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001840:	2202      	movs	r2, #2
 8001842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001846:	2112      	movs	r1, #18
 8001848:	f7ff bf86 	b.w	8001758 <std>
 800184c:	2000020c 	.word	0x2000020c
 8001850:	200000d4 	.word	0x200000d4
 8001854:	080017c5 	.word	0x080017c5

08001858 <__sfp_lock_acquire>:
 8001858:	4801      	ldr	r0, [pc, #4]	@ (8001860 <__sfp_lock_acquire+0x8>)
 800185a:	f000 b9ee 	b.w	8001c3a <__retarget_lock_acquire_recursive>
 800185e:	bf00      	nop
 8001860:	20000215 	.word	0x20000215

08001864 <__sfp_lock_release>:
 8001864:	4801      	ldr	r0, [pc, #4]	@ (800186c <__sfp_lock_release+0x8>)
 8001866:	f000 b9e9 	b.w	8001c3c <__retarget_lock_release_recursive>
 800186a:	bf00      	nop
 800186c:	20000215 	.word	0x20000215

08001870 <__sinit>:
 8001870:	b510      	push	{r4, lr}
 8001872:	4604      	mov	r4, r0
 8001874:	f7ff fff0 	bl	8001858 <__sfp_lock_acquire>
 8001878:	6a23      	ldr	r3, [r4, #32]
 800187a:	b11b      	cbz	r3, 8001884 <__sinit+0x14>
 800187c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001880:	f7ff bff0 	b.w	8001864 <__sfp_lock_release>
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <__sinit+0x28>)
 8001886:	6223      	str	r3, [r4, #32]
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <__sinit+0x2c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f5      	bne.n	800187c <__sinit+0xc>
 8001890:	f7ff ffc4 	bl	800181c <global_stdio_init.part.0>
 8001894:	e7f2      	b.n	800187c <__sinit+0xc>
 8001896:	bf00      	nop
 8001898:	080017dd 	.word	0x080017dd
 800189c:	2000020c 	.word	0x2000020c

080018a0 <_fwalk_sglue>:
 80018a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018a4:	4607      	mov	r7, r0
 80018a6:	4688      	mov	r8, r1
 80018a8:	4614      	mov	r4, r2
 80018aa:	2600      	movs	r6, #0
 80018ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018b0:	f1b9 0901 	subs.w	r9, r9, #1
 80018b4:	d505      	bpl.n	80018c2 <_fwalk_sglue+0x22>
 80018b6:	6824      	ldr	r4, [r4, #0]
 80018b8:	2c00      	cmp	r4, #0
 80018ba:	d1f7      	bne.n	80018ac <_fwalk_sglue+0xc>
 80018bc:	4630      	mov	r0, r6
 80018be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018c2:	89ab      	ldrh	r3, [r5, #12]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d907      	bls.n	80018d8 <_fwalk_sglue+0x38>
 80018c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018cc:	3301      	adds	r3, #1
 80018ce:	d003      	beq.n	80018d8 <_fwalk_sglue+0x38>
 80018d0:	4629      	mov	r1, r5
 80018d2:	4638      	mov	r0, r7
 80018d4:	47c0      	blx	r8
 80018d6:	4306      	orrs	r6, r0
 80018d8:	3568      	adds	r5, #104	@ 0x68
 80018da:	e7e9      	b.n	80018b0 <_fwalk_sglue+0x10>

080018dc <_puts_r>:
 80018dc:	6a03      	ldr	r3, [r0, #32]
 80018de:	b570      	push	{r4, r5, r6, lr}
 80018e0:	4605      	mov	r5, r0
 80018e2:	460e      	mov	r6, r1
 80018e4:	6884      	ldr	r4, [r0, #8]
 80018e6:	b90b      	cbnz	r3, 80018ec <_puts_r+0x10>
 80018e8:	f7ff ffc2 	bl	8001870 <__sinit>
 80018ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018ee:	07db      	lsls	r3, r3, #31
 80018f0:	d405      	bmi.n	80018fe <_puts_r+0x22>
 80018f2:	89a3      	ldrh	r3, [r4, #12]
 80018f4:	0598      	lsls	r0, r3, #22
 80018f6:	d402      	bmi.n	80018fe <_puts_r+0x22>
 80018f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018fa:	f000 f99e 	bl	8001c3a <__retarget_lock_acquire_recursive>
 80018fe:	89a3      	ldrh	r3, [r4, #12]
 8001900:	0719      	lsls	r1, r3, #28
 8001902:	d502      	bpl.n	800190a <_puts_r+0x2e>
 8001904:	6923      	ldr	r3, [r4, #16]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d135      	bne.n	8001976 <_puts_r+0x9a>
 800190a:	4621      	mov	r1, r4
 800190c:	4628      	mov	r0, r5
 800190e:	f000 f8c5 	bl	8001a9c <__swsetup_r>
 8001912:	b380      	cbz	r0, 8001976 <_puts_r+0x9a>
 8001914:	f04f 35ff 	mov.w	r5, #4294967295
 8001918:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800191a:	07da      	lsls	r2, r3, #31
 800191c:	d405      	bmi.n	800192a <_puts_r+0x4e>
 800191e:	89a3      	ldrh	r3, [r4, #12]
 8001920:	059b      	lsls	r3, r3, #22
 8001922:	d402      	bmi.n	800192a <_puts_r+0x4e>
 8001924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001926:	f000 f989 	bl	8001c3c <__retarget_lock_release_recursive>
 800192a:	4628      	mov	r0, r5
 800192c:	bd70      	pop	{r4, r5, r6, pc}
 800192e:	2b00      	cmp	r3, #0
 8001930:	da04      	bge.n	800193c <_puts_r+0x60>
 8001932:	69a2      	ldr	r2, [r4, #24]
 8001934:	429a      	cmp	r2, r3
 8001936:	dc17      	bgt.n	8001968 <_puts_r+0x8c>
 8001938:	290a      	cmp	r1, #10
 800193a:	d015      	beq.n	8001968 <_puts_r+0x8c>
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	6022      	str	r2, [r4, #0]
 8001942:	7019      	strb	r1, [r3, #0]
 8001944:	68a3      	ldr	r3, [r4, #8]
 8001946:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800194a:	3b01      	subs	r3, #1
 800194c:	60a3      	str	r3, [r4, #8]
 800194e:	2900      	cmp	r1, #0
 8001950:	d1ed      	bne.n	800192e <_puts_r+0x52>
 8001952:	2b00      	cmp	r3, #0
 8001954:	da11      	bge.n	800197a <_puts_r+0x9e>
 8001956:	4622      	mov	r2, r4
 8001958:	210a      	movs	r1, #10
 800195a:	4628      	mov	r0, r5
 800195c:	f000 f85f 	bl	8001a1e <__swbuf_r>
 8001960:	3001      	adds	r0, #1
 8001962:	d0d7      	beq.n	8001914 <_puts_r+0x38>
 8001964:	250a      	movs	r5, #10
 8001966:	e7d7      	b.n	8001918 <_puts_r+0x3c>
 8001968:	4622      	mov	r2, r4
 800196a:	4628      	mov	r0, r5
 800196c:	f000 f857 	bl	8001a1e <__swbuf_r>
 8001970:	3001      	adds	r0, #1
 8001972:	d1e7      	bne.n	8001944 <_puts_r+0x68>
 8001974:	e7ce      	b.n	8001914 <_puts_r+0x38>
 8001976:	3e01      	subs	r6, #1
 8001978:	e7e4      	b.n	8001944 <_puts_r+0x68>
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	6022      	str	r2, [r4, #0]
 8001980:	220a      	movs	r2, #10
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	e7ee      	b.n	8001964 <_puts_r+0x88>
	...

08001988 <puts>:
 8001988:	4b02      	ldr	r3, [pc, #8]	@ (8001994 <puts+0xc>)
 800198a:	4601      	mov	r1, r0
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	f7ff bfa5 	b.w	80018dc <_puts_r>
 8001992:	bf00      	nop
 8001994:	20000018 	.word	0x20000018

08001998 <__sread>:
 8001998:	b510      	push	{r4, lr}
 800199a:	460c      	mov	r4, r1
 800199c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019a0:	f000 f8fc 	bl	8001b9c <_read_r>
 80019a4:	2800      	cmp	r0, #0
 80019a6:	bfab      	itete	ge
 80019a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80019aa:	89a3      	ldrhlt	r3, [r4, #12]
 80019ac:	181b      	addge	r3, r3, r0
 80019ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80019b2:	bfac      	ite	ge
 80019b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80019b6:	81a3      	strhlt	r3, [r4, #12]
 80019b8:	bd10      	pop	{r4, pc}

080019ba <__swrite>:
 80019ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019be:	461f      	mov	r7, r3
 80019c0:	898b      	ldrh	r3, [r1, #12]
 80019c2:	4605      	mov	r5, r0
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	460c      	mov	r4, r1
 80019c8:	4616      	mov	r6, r2
 80019ca:	d505      	bpl.n	80019d8 <__swrite+0x1e>
 80019cc:	2302      	movs	r3, #2
 80019ce:	2200      	movs	r2, #0
 80019d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019d4:	f000 f8d0 	bl	8001b78 <_lseek_r>
 80019d8:	89a3      	ldrh	r3, [r4, #12]
 80019da:	4632      	mov	r2, r6
 80019dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019e0:	81a3      	strh	r3, [r4, #12]
 80019e2:	4628      	mov	r0, r5
 80019e4:	463b      	mov	r3, r7
 80019e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019ee:	f000 b8e7 	b.w	8001bc0 <_write_r>

080019f2 <__sseek>:
 80019f2:	b510      	push	{r4, lr}
 80019f4:	460c      	mov	r4, r1
 80019f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019fa:	f000 f8bd 	bl	8001b78 <_lseek_r>
 80019fe:	1c43      	adds	r3, r0, #1
 8001a00:	89a3      	ldrh	r3, [r4, #12]
 8001a02:	bf15      	itete	ne
 8001a04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001a06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001a0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001a0e:	81a3      	strheq	r3, [r4, #12]
 8001a10:	bf18      	it	ne
 8001a12:	81a3      	strhne	r3, [r4, #12]
 8001a14:	bd10      	pop	{r4, pc}

08001a16 <__sclose>:
 8001a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a1a:	f000 b89d 	b.w	8001b58 <_close_r>

08001a1e <__swbuf_r>:
 8001a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a20:	460e      	mov	r6, r1
 8001a22:	4614      	mov	r4, r2
 8001a24:	4605      	mov	r5, r0
 8001a26:	b118      	cbz	r0, 8001a30 <__swbuf_r+0x12>
 8001a28:	6a03      	ldr	r3, [r0, #32]
 8001a2a:	b90b      	cbnz	r3, 8001a30 <__swbuf_r+0x12>
 8001a2c:	f7ff ff20 	bl	8001870 <__sinit>
 8001a30:	69a3      	ldr	r3, [r4, #24]
 8001a32:	60a3      	str	r3, [r4, #8]
 8001a34:	89a3      	ldrh	r3, [r4, #12]
 8001a36:	071a      	lsls	r2, r3, #28
 8001a38:	d501      	bpl.n	8001a3e <__swbuf_r+0x20>
 8001a3a:	6923      	ldr	r3, [r4, #16]
 8001a3c:	b943      	cbnz	r3, 8001a50 <__swbuf_r+0x32>
 8001a3e:	4621      	mov	r1, r4
 8001a40:	4628      	mov	r0, r5
 8001a42:	f000 f82b 	bl	8001a9c <__swsetup_r>
 8001a46:	b118      	cbz	r0, 8001a50 <__swbuf_r+0x32>
 8001a48:	f04f 37ff 	mov.w	r7, #4294967295
 8001a4c:	4638      	mov	r0, r7
 8001a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	6922      	ldr	r2, [r4, #16]
 8001a54:	b2f6      	uxtb	r6, r6
 8001a56:	1a98      	subs	r0, r3, r2
 8001a58:	6963      	ldr	r3, [r4, #20]
 8001a5a:	4637      	mov	r7, r6
 8001a5c:	4283      	cmp	r3, r0
 8001a5e:	dc05      	bgt.n	8001a6c <__swbuf_r+0x4e>
 8001a60:	4621      	mov	r1, r4
 8001a62:	4628      	mov	r0, r5
 8001a64:	f000 fa62 	bl	8001f2c <_fflush_r>
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d1ed      	bne.n	8001a48 <__swbuf_r+0x2a>
 8001a6c:	68a3      	ldr	r3, [r4, #8]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	60a3      	str	r3, [r4, #8]
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	6022      	str	r2, [r4, #0]
 8001a78:	701e      	strb	r6, [r3, #0]
 8001a7a:	6962      	ldr	r2, [r4, #20]
 8001a7c:	1c43      	adds	r3, r0, #1
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d004      	beq.n	8001a8c <__swbuf_r+0x6e>
 8001a82:	89a3      	ldrh	r3, [r4, #12]
 8001a84:	07db      	lsls	r3, r3, #31
 8001a86:	d5e1      	bpl.n	8001a4c <__swbuf_r+0x2e>
 8001a88:	2e0a      	cmp	r6, #10
 8001a8a:	d1df      	bne.n	8001a4c <__swbuf_r+0x2e>
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	4628      	mov	r0, r5
 8001a90:	f000 fa4c 	bl	8001f2c <_fflush_r>
 8001a94:	2800      	cmp	r0, #0
 8001a96:	d0d9      	beq.n	8001a4c <__swbuf_r+0x2e>
 8001a98:	e7d6      	b.n	8001a48 <__swbuf_r+0x2a>
	...

08001a9c <__swsetup_r>:
 8001a9c:	b538      	push	{r3, r4, r5, lr}
 8001a9e:	4b29      	ldr	r3, [pc, #164]	@ (8001b44 <__swsetup_r+0xa8>)
 8001aa0:	4605      	mov	r5, r0
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	460c      	mov	r4, r1
 8001aa6:	b118      	cbz	r0, 8001ab0 <__swsetup_r+0x14>
 8001aa8:	6a03      	ldr	r3, [r0, #32]
 8001aaa:	b90b      	cbnz	r3, 8001ab0 <__swsetup_r+0x14>
 8001aac:	f7ff fee0 	bl	8001870 <__sinit>
 8001ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ab4:	0719      	lsls	r1, r3, #28
 8001ab6:	d422      	bmi.n	8001afe <__swsetup_r+0x62>
 8001ab8:	06da      	lsls	r2, r3, #27
 8001aba:	d407      	bmi.n	8001acc <__swsetup_r+0x30>
 8001abc:	2209      	movs	r2, #9
 8001abe:	602a      	str	r2, [r5, #0]
 8001ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	81a3      	strh	r3, [r4, #12]
 8001aca:	e033      	b.n	8001b34 <__swsetup_r+0x98>
 8001acc:	0758      	lsls	r0, r3, #29
 8001ace:	d512      	bpl.n	8001af6 <__swsetup_r+0x5a>
 8001ad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ad2:	b141      	cbz	r1, 8001ae6 <__swsetup_r+0x4a>
 8001ad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ad8:	4299      	cmp	r1, r3
 8001ada:	d002      	beq.n	8001ae2 <__swsetup_r+0x46>
 8001adc:	4628      	mov	r0, r5
 8001ade:	f000 f8af 	bl	8001c40 <_free_r>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ae6:	89a3      	ldrh	r3, [r4, #12]
 8001ae8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001aec:	81a3      	strh	r3, [r4, #12]
 8001aee:	2300      	movs	r3, #0
 8001af0:	6063      	str	r3, [r4, #4]
 8001af2:	6923      	ldr	r3, [r4, #16]
 8001af4:	6023      	str	r3, [r4, #0]
 8001af6:	89a3      	ldrh	r3, [r4, #12]
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	81a3      	strh	r3, [r4, #12]
 8001afe:	6923      	ldr	r3, [r4, #16]
 8001b00:	b94b      	cbnz	r3, 8001b16 <__swsetup_r+0x7a>
 8001b02:	89a3      	ldrh	r3, [r4, #12]
 8001b04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b0c:	d003      	beq.n	8001b16 <__swsetup_r+0x7a>
 8001b0e:	4621      	mov	r1, r4
 8001b10:	4628      	mov	r0, r5
 8001b12:	f000 fa58 	bl	8001fc6 <__smakebuf_r>
 8001b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b1a:	f013 0201 	ands.w	r2, r3, #1
 8001b1e:	d00a      	beq.n	8001b36 <__swsetup_r+0x9a>
 8001b20:	2200      	movs	r2, #0
 8001b22:	60a2      	str	r2, [r4, #8]
 8001b24:	6962      	ldr	r2, [r4, #20]
 8001b26:	4252      	negs	r2, r2
 8001b28:	61a2      	str	r2, [r4, #24]
 8001b2a:	6922      	ldr	r2, [r4, #16]
 8001b2c:	b942      	cbnz	r2, 8001b40 <__swsetup_r+0xa4>
 8001b2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001b32:	d1c5      	bne.n	8001ac0 <__swsetup_r+0x24>
 8001b34:	bd38      	pop	{r3, r4, r5, pc}
 8001b36:	0799      	lsls	r1, r3, #30
 8001b38:	bf58      	it	pl
 8001b3a:	6962      	ldrpl	r2, [r4, #20]
 8001b3c:	60a2      	str	r2, [r4, #8]
 8001b3e:	e7f4      	b.n	8001b2a <__swsetup_r+0x8e>
 8001b40:	2000      	movs	r0, #0
 8001b42:	e7f7      	b.n	8001b34 <__swsetup_r+0x98>
 8001b44:	20000018 	.word	0x20000018

08001b48 <memset>:
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4402      	add	r2, r0
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d100      	bne.n	8001b52 <memset+0xa>
 8001b50:	4770      	bx	lr
 8001b52:	f803 1b01 	strb.w	r1, [r3], #1
 8001b56:	e7f9      	b.n	8001b4c <memset+0x4>

08001b58 <_close_r>:
 8001b58:	b538      	push	{r3, r4, r5, lr}
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	4d05      	ldr	r5, [pc, #20]	@ (8001b74 <_close_r+0x1c>)
 8001b5e:	4604      	mov	r4, r0
 8001b60:	4608      	mov	r0, r1
 8001b62:	602b      	str	r3, [r5, #0]
 8001b64:	f7fe fc97 	bl	8000496 <_close>
 8001b68:	1c43      	adds	r3, r0, #1
 8001b6a:	d102      	bne.n	8001b72 <_close_r+0x1a>
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	b103      	cbz	r3, 8001b72 <_close_r+0x1a>
 8001b70:	6023      	str	r3, [r4, #0]
 8001b72:	bd38      	pop	{r3, r4, r5, pc}
 8001b74:	20000210 	.word	0x20000210

08001b78 <_lseek_r>:
 8001b78:	b538      	push	{r3, r4, r5, lr}
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	4608      	mov	r0, r1
 8001b7e:	4611      	mov	r1, r2
 8001b80:	2200      	movs	r2, #0
 8001b82:	4d05      	ldr	r5, [pc, #20]	@ (8001b98 <_lseek_r+0x20>)
 8001b84:	602a      	str	r2, [r5, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f7fe fca9 	bl	80004de <_lseek>
 8001b8c:	1c43      	adds	r3, r0, #1
 8001b8e:	d102      	bne.n	8001b96 <_lseek_r+0x1e>
 8001b90:	682b      	ldr	r3, [r5, #0]
 8001b92:	b103      	cbz	r3, 8001b96 <_lseek_r+0x1e>
 8001b94:	6023      	str	r3, [r4, #0]
 8001b96:	bd38      	pop	{r3, r4, r5, pc}
 8001b98:	20000210 	.word	0x20000210

08001b9c <_read_r>:
 8001b9c:	b538      	push	{r3, r4, r5, lr}
 8001b9e:	4604      	mov	r4, r0
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4d05      	ldr	r5, [pc, #20]	@ (8001bbc <_read_r+0x20>)
 8001ba8:	602a      	str	r2, [r5, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	f7fe fc3a 	bl	8000424 <_read>
 8001bb0:	1c43      	adds	r3, r0, #1
 8001bb2:	d102      	bne.n	8001bba <_read_r+0x1e>
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	b103      	cbz	r3, 8001bba <_read_r+0x1e>
 8001bb8:	6023      	str	r3, [r4, #0]
 8001bba:	bd38      	pop	{r3, r4, r5, pc}
 8001bbc:	20000210 	.word	0x20000210

08001bc0 <_write_r>:
 8001bc0:	b538      	push	{r3, r4, r5, lr}
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4d05      	ldr	r5, [pc, #20]	@ (8001be0 <_write_r+0x20>)
 8001bcc:	602a      	str	r2, [r5, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f7fe fc45 	bl	800045e <_write>
 8001bd4:	1c43      	adds	r3, r0, #1
 8001bd6:	d102      	bne.n	8001bde <_write_r+0x1e>
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	b103      	cbz	r3, 8001bde <_write_r+0x1e>
 8001bdc:	6023      	str	r3, [r4, #0]
 8001bde:	bd38      	pop	{r3, r4, r5, pc}
 8001be0:	20000210 	.word	0x20000210

08001be4 <__errno>:
 8001be4:	4b01      	ldr	r3, [pc, #4]	@ (8001bec <__errno+0x8>)
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000018 	.word	0x20000018

08001bf0 <__libc_init_array>:
 8001bf0:	b570      	push	{r4, r5, r6, lr}
 8001bf2:	2600      	movs	r6, #0
 8001bf4:	4d0c      	ldr	r5, [pc, #48]	@ (8001c28 <__libc_init_array+0x38>)
 8001bf6:	4c0d      	ldr	r4, [pc, #52]	@ (8001c2c <__libc_init_array+0x3c>)
 8001bf8:	1b64      	subs	r4, r4, r5
 8001bfa:	10a4      	asrs	r4, r4, #2
 8001bfc:	42a6      	cmp	r6, r4
 8001bfe:	d109      	bne.n	8001c14 <__libc_init_array+0x24>
 8001c00:	f000 fa50 	bl	80020a4 <_init>
 8001c04:	2600      	movs	r6, #0
 8001c06:	4d0a      	ldr	r5, [pc, #40]	@ (8001c30 <__libc_init_array+0x40>)
 8001c08:	4c0a      	ldr	r4, [pc, #40]	@ (8001c34 <__libc_init_array+0x44>)
 8001c0a:	1b64      	subs	r4, r4, r5
 8001c0c:	10a4      	asrs	r4, r4, #2
 8001c0e:	42a6      	cmp	r6, r4
 8001c10:	d105      	bne.n	8001c1e <__libc_init_array+0x2e>
 8001c12:	bd70      	pop	{r4, r5, r6, pc}
 8001c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c18:	4798      	blx	r3
 8001c1a:	3601      	adds	r6, #1
 8001c1c:	e7ee      	b.n	8001bfc <__libc_init_array+0xc>
 8001c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c22:	4798      	blx	r3
 8001c24:	3601      	adds	r6, #1
 8001c26:	e7f2      	b.n	8001c0e <__libc_init_array+0x1e>
 8001c28:	080020f8 	.word	0x080020f8
 8001c2c:	080020f8 	.word	0x080020f8
 8001c30:	080020f8 	.word	0x080020f8
 8001c34:	080020fc 	.word	0x080020fc

08001c38 <__retarget_lock_init_recursive>:
 8001c38:	4770      	bx	lr

08001c3a <__retarget_lock_acquire_recursive>:
 8001c3a:	4770      	bx	lr

08001c3c <__retarget_lock_release_recursive>:
 8001c3c:	4770      	bx	lr
	...

08001c40 <_free_r>:
 8001c40:	b538      	push	{r3, r4, r5, lr}
 8001c42:	4605      	mov	r5, r0
 8001c44:	2900      	cmp	r1, #0
 8001c46:	d040      	beq.n	8001cca <_free_r+0x8a>
 8001c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c4c:	1f0c      	subs	r4, r1, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bfb8      	it	lt
 8001c52:	18e4      	addlt	r4, r4, r3
 8001c54:	f000 f8de 	bl	8001e14 <__malloc_lock>
 8001c58:	4a1c      	ldr	r2, [pc, #112]	@ (8001ccc <_free_r+0x8c>)
 8001c5a:	6813      	ldr	r3, [r2, #0]
 8001c5c:	b933      	cbnz	r3, 8001c6c <_free_r+0x2c>
 8001c5e:	6063      	str	r3, [r4, #4]
 8001c60:	6014      	str	r4, [r2, #0]
 8001c62:	4628      	mov	r0, r5
 8001c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c68:	f000 b8da 	b.w	8001e20 <__malloc_unlock>
 8001c6c:	42a3      	cmp	r3, r4
 8001c6e:	d908      	bls.n	8001c82 <_free_r+0x42>
 8001c70:	6820      	ldr	r0, [r4, #0]
 8001c72:	1821      	adds	r1, r4, r0
 8001c74:	428b      	cmp	r3, r1
 8001c76:	bf01      	itttt	eq
 8001c78:	6819      	ldreq	r1, [r3, #0]
 8001c7a:	685b      	ldreq	r3, [r3, #4]
 8001c7c:	1809      	addeq	r1, r1, r0
 8001c7e:	6021      	streq	r1, [r4, #0]
 8001c80:	e7ed      	b.n	8001c5e <_free_r+0x1e>
 8001c82:	461a      	mov	r2, r3
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	b10b      	cbz	r3, 8001c8c <_free_r+0x4c>
 8001c88:	42a3      	cmp	r3, r4
 8001c8a:	d9fa      	bls.n	8001c82 <_free_r+0x42>
 8001c8c:	6811      	ldr	r1, [r2, #0]
 8001c8e:	1850      	adds	r0, r2, r1
 8001c90:	42a0      	cmp	r0, r4
 8001c92:	d10b      	bne.n	8001cac <_free_r+0x6c>
 8001c94:	6820      	ldr	r0, [r4, #0]
 8001c96:	4401      	add	r1, r0
 8001c98:	1850      	adds	r0, r2, r1
 8001c9a:	4283      	cmp	r3, r0
 8001c9c:	6011      	str	r1, [r2, #0]
 8001c9e:	d1e0      	bne.n	8001c62 <_free_r+0x22>
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4408      	add	r0, r1
 8001ca6:	6010      	str	r0, [r2, #0]
 8001ca8:	6053      	str	r3, [r2, #4]
 8001caa:	e7da      	b.n	8001c62 <_free_r+0x22>
 8001cac:	d902      	bls.n	8001cb4 <_free_r+0x74>
 8001cae:	230c      	movs	r3, #12
 8001cb0:	602b      	str	r3, [r5, #0]
 8001cb2:	e7d6      	b.n	8001c62 <_free_r+0x22>
 8001cb4:	6820      	ldr	r0, [r4, #0]
 8001cb6:	1821      	adds	r1, r4, r0
 8001cb8:	428b      	cmp	r3, r1
 8001cba:	bf01      	itttt	eq
 8001cbc:	6819      	ldreq	r1, [r3, #0]
 8001cbe:	685b      	ldreq	r3, [r3, #4]
 8001cc0:	1809      	addeq	r1, r1, r0
 8001cc2:	6021      	streq	r1, [r4, #0]
 8001cc4:	6063      	str	r3, [r4, #4]
 8001cc6:	6054      	str	r4, [r2, #4]
 8001cc8:	e7cb      	b.n	8001c62 <_free_r+0x22>
 8001cca:	bd38      	pop	{r3, r4, r5, pc}
 8001ccc:	2000021c 	.word	0x2000021c

08001cd0 <sbrk_aligned>:
 8001cd0:	b570      	push	{r4, r5, r6, lr}
 8001cd2:	4e0f      	ldr	r6, [pc, #60]	@ (8001d10 <sbrk_aligned+0x40>)
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	6831      	ldr	r1, [r6, #0]
 8001cd8:	4605      	mov	r5, r0
 8001cda:	b911      	cbnz	r1, 8001ce2 <sbrk_aligned+0x12>
 8001cdc:	f000 f9d2 	bl	8002084 <_sbrk_r>
 8001ce0:	6030      	str	r0, [r6, #0]
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	f000 f9cd 	bl	8002084 <_sbrk_r>
 8001cea:	1c43      	adds	r3, r0, #1
 8001cec:	d103      	bne.n	8001cf6 <sbrk_aligned+0x26>
 8001cee:	f04f 34ff 	mov.w	r4, #4294967295
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	bd70      	pop	{r4, r5, r6, pc}
 8001cf6:	1cc4      	adds	r4, r0, #3
 8001cf8:	f024 0403 	bic.w	r4, r4, #3
 8001cfc:	42a0      	cmp	r0, r4
 8001cfe:	d0f8      	beq.n	8001cf2 <sbrk_aligned+0x22>
 8001d00:	1a21      	subs	r1, r4, r0
 8001d02:	4628      	mov	r0, r5
 8001d04:	f000 f9be 	bl	8002084 <_sbrk_r>
 8001d08:	3001      	adds	r0, #1
 8001d0a:	d1f2      	bne.n	8001cf2 <sbrk_aligned+0x22>
 8001d0c:	e7ef      	b.n	8001cee <sbrk_aligned+0x1e>
 8001d0e:	bf00      	nop
 8001d10:	20000218 	.word	0x20000218

08001d14 <_malloc_r>:
 8001d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d18:	1ccd      	adds	r5, r1, #3
 8001d1a:	f025 0503 	bic.w	r5, r5, #3
 8001d1e:	3508      	adds	r5, #8
 8001d20:	2d0c      	cmp	r5, #12
 8001d22:	bf38      	it	cc
 8001d24:	250c      	movcc	r5, #12
 8001d26:	2d00      	cmp	r5, #0
 8001d28:	4606      	mov	r6, r0
 8001d2a:	db01      	blt.n	8001d30 <_malloc_r+0x1c>
 8001d2c:	42a9      	cmp	r1, r5
 8001d2e:	d904      	bls.n	8001d3a <_malloc_r+0x26>
 8001d30:	230c      	movs	r3, #12
 8001d32:	6033      	str	r3, [r6, #0]
 8001d34:	2000      	movs	r0, #0
 8001d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e10 <_malloc_r+0xfc>
 8001d3e:	f000 f869 	bl	8001e14 <__malloc_lock>
 8001d42:	f8d8 3000 	ldr.w	r3, [r8]
 8001d46:	461c      	mov	r4, r3
 8001d48:	bb44      	cbnz	r4, 8001d9c <_malloc_r+0x88>
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	4630      	mov	r0, r6
 8001d4e:	f7ff ffbf 	bl	8001cd0 <sbrk_aligned>
 8001d52:	1c43      	adds	r3, r0, #1
 8001d54:	4604      	mov	r4, r0
 8001d56:	d158      	bne.n	8001e0a <_malloc_r+0xf6>
 8001d58:	f8d8 4000 	ldr.w	r4, [r8]
 8001d5c:	4627      	mov	r7, r4
 8001d5e:	2f00      	cmp	r7, #0
 8001d60:	d143      	bne.n	8001dea <_malloc_r+0xd6>
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d04b      	beq.n	8001dfe <_malloc_r+0xea>
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	4639      	mov	r1, r7
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	eb04 0903 	add.w	r9, r4, r3
 8001d70:	f000 f988 	bl	8002084 <_sbrk_r>
 8001d74:	4581      	cmp	r9, r0
 8001d76:	d142      	bne.n	8001dfe <_malloc_r+0xea>
 8001d78:	6821      	ldr	r1, [r4, #0]
 8001d7a:	4630      	mov	r0, r6
 8001d7c:	1a6d      	subs	r5, r5, r1
 8001d7e:	4629      	mov	r1, r5
 8001d80:	f7ff ffa6 	bl	8001cd0 <sbrk_aligned>
 8001d84:	3001      	adds	r0, #1
 8001d86:	d03a      	beq.n	8001dfe <_malloc_r+0xea>
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	442b      	add	r3, r5
 8001d8c:	6023      	str	r3, [r4, #0]
 8001d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	bb62      	cbnz	r2, 8001df0 <_malloc_r+0xdc>
 8001d96:	f8c8 7000 	str.w	r7, [r8]
 8001d9a:	e00f      	b.n	8001dbc <_malloc_r+0xa8>
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	1b52      	subs	r2, r2, r5
 8001da0:	d420      	bmi.n	8001de4 <_malloc_r+0xd0>
 8001da2:	2a0b      	cmp	r2, #11
 8001da4:	d917      	bls.n	8001dd6 <_malloc_r+0xc2>
 8001da6:	1961      	adds	r1, r4, r5
 8001da8:	42a3      	cmp	r3, r4
 8001daa:	6025      	str	r5, [r4, #0]
 8001dac:	bf18      	it	ne
 8001dae:	6059      	strne	r1, [r3, #4]
 8001db0:	6863      	ldr	r3, [r4, #4]
 8001db2:	bf08      	it	eq
 8001db4:	f8c8 1000 	streq.w	r1, [r8]
 8001db8:	5162      	str	r2, [r4, r5]
 8001dba:	604b      	str	r3, [r1, #4]
 8001dbc:	4630      	mov	r0, r6
 8001dbe:	f000 f82f 	bl	8001e20 <__malloc_unlock>
 8001dc2:	f104 000b 	add.w	r0, r4, #11
 8001dc6:	1d23      	adds	r3, r4, #4
 8001dc8:	f020 0007 	bic.w	r0, r0, #7
 8001dcc:	1ac2      	subs	r2, r0, r3
 8001dce:	bf1c      	itt	ne
 8001dd0:	1a1b      	subne	r3, r3, r0
 8001dd2:	50a3      	strne	r3, [r4, r2]
 8001dd4:	e7af      	b.n	8001d36 <_malloc_r+0x22>
 8001dd6:	6862      	ldr	r2, [r4, #4]
 8001dd8:	42a3      	cmp	r3, r4
 8001dda:	bf0c      	ite	eq
 8001ddc:	f8c8 2000 	streq.w	r2, [r8]
 8001de0:	605a      	strne	r2, [r3, #4]
 8001de2:	e7eb      	b.n	8001dbc <_malloc_r+0xa8>
 8001de4:	4623      	mov	r3, r4
 8001de6:	6864      	ldr	r4, [r4, #4]
 8001de8:	e7ae      	b.n	8001d48 <_malloc_r+0x34>
 8001dea:	463c      	mov	r4, r7
 8001dec:	687f      	ldr	r7, [r7, #4]
 8001dee:	e7b6      	b.n	8001d5e <_malloc_r+0x4a>
 8001df0:	461a      	mov	r2, r3
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	42a3      	cmp	r3, r4
 8001df6:	d1fb      	bne.n	8001df0 <_malloc_r+0xdc>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	6053      	str	r3, [r2, #4]
 8001dfc:	e7de      	b.n	8001dbc <_malloc_r+0xa8>
 8001dfe:	230c      	movs	r3, #12
 8001e00:	4630      	mov	r0, r6
 8001e02:	6033      	str	r3, [r6, #0]
 8001e04:	f000 f80c 	bl	8001e20 <__malloc_unlock>
 8001e08:	e794      	b.n	8001d34 <_malloc_r+0x20>
 8001e0a:	6005      	str	r5, [r0, #0]
 8001e0c:	e7d6      	b.n	8001dbc <_malloc_r+0xa8>
 8001e0e:	bf00      	nop
 8001e10:	2000021c 	.word	0x2000021c

08001e14 <__malloc_lock>:
 8001e14:	4801      	ldr	r0, [pc, #4]	@ (8001e1c <__malloc_lock+0x8>)
 8001e16:	f7ff bf10 	b.w	8001c3a <__retarget_lock_acquire_recursive>
 8001e1a:	bf00      	nop
 8001e1c:	20000214 	.word	0x20000214

08001e20 <__malloc_unlock>:
 8001e20:	4801      	ldr	r0, [pc, #4]	@ (8001e28 <__malloc_unlock+0x8>)
 8001e22:	f7ff bf0b 	b.w	8001c3c <__retarget_lock_release_recursive>
 8001e26:	bf00      	nop
 8001e28:	20000214 	.word	0x20000214

08001e2c <__sflush_r>:
 8001e2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e32:	0716      	lsls	r6, r2, #28
 8001e34:	4605      	mov	r5, r0
 8001e36:	460c      	mov	r4, r1
 8001e38:	d454      	bmi.n	8001ee4 <__sflush_r+0xb8>
 8001e3a:	684b      	ldr	r3, [r1, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	dc02      	bgt.n	8001e46 <__sflush_r+0x1a>
 8001e40:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	dd48      	ble.n	8001ed8 <__sflush_r+0xac>
 8001e46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e48:	2e00      	cmp	r6, #0
 8001e4a:	d045      	beq.n	8001ed8 <__sflush_r+0xac>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001e52:	682f      	ldr	r7, [r5, #0]
 8001e54:	6a21      	ldr	r1, [r4, #32]
 8001e56:	602b      	str	r3, [r5, #0]
 8001e58:	d030      	beq.n	8001ebc <__sflush_r+0x90>
 8001e5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e5c:	89a3      	ldrh	r3, [r4, #12]
 8001e5e:	0759      	lsls	r1, r3, #29
 8001e60:	d505      	bpl.n	8001e6e <__sflush_r+0x42>
 8001e62:	6863      	ldr	r3, [r4, #4]
 8001e64:	1ad2      	subs	r2, r2, r3
 8001e66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e68:	b10b      	cbz	r3, 8001e6e <__sflush_r+0x42>
 8001e6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e6c:	1ad2      	subs	r2, r2, r3
 8001e6e:	2300      	movs	r3, #0
 8001e70:	4628      	mov	r0, r5
 8001e72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e74:	6a21      	ldr	r1, [r4, #32]
 8001e76:	47b0      	blx	r6
 8001e78:	1c43      	adds	r3, r0, #1
 8001e7a:	89a3      	ldrh	r3, [r4, #12]
 8001e7c:	d106      	bne.n	8001e8c <__sflush_r+0x60>
 8001e7e:	6829      	ldr	r1, [r5, #0]
 8001e80:	291d      	cmp	r1, #29
 8001e82:	d82b      	bhi.n	8001edc <__sflush_r+0xb0>
 8001e84:	4a28      	ldr	r2, [pc, #160]	@ (8001f28 <__sflush_r+0xfc>)
 8001e86:	410a      	asrs	r2, r1
 8001e88:	07d6      	lsls	r6, r2, #31
 8001e8a:	d427      	bmi.n	8001edc <__sflush_r+0xb0>
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	6062      	str	r2, [r4, #4]
 8001e90:	6922      	ldr	r2, [r4, #16]
 8001e92:	04d9      	lsls	r1, r3, #19
 8001e94:	6022      	str	r2, [r4, #0]
 8001e96:	d504      	bpl.n	8001ea2 <__sflush_r+0x76>
 8001e98:	1c42      	adds	r2, r0, #1
 8001e9a:	d101      	bne.n	8001ea0 <__sflush_r+0x74>
 8001e9c:	682b      	ldr	r3, [r5, #0]
 8001e9e:	b903      	cbnz	r3, 8001ea2 <__sflush_r+0x76>
 8001ea0:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ea2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ea4:	602f      	str	r7, [r5, #0]
 8001ea6:	b1b9      	cbz	r1, 8001ed8 <__sflush_r+0xac>
 8001ea8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001eac:	4299      	cmp	r1, r3
 8001eae:	d002      	beq.n	8001eb6 <__sflush_r+0x8a>
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	f7ff fec5 	bl	8001c40 <_free_r>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8001eba:	e00d      	b.n	8001ed8 <__sflush_r+0xac>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	47b0      	blx	r6
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	1c50      	adds	r0, r2, #1
 8001ec6:	d1c9      	bne.n	8001e5c <__sflush_r+0x30>
 8001ec8:	682b      	ldr	r3, [r5, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0c6      	beq.n	8001e5c <__sflush_r+0x30>
 8001ece:	2b1d      	cmp	r3, #29
 8001ed0:	d001      	beq.n	8001ed6 <__sflush_r+0xaa>
 8001ed2:	2b16      	cmp	r3, #22
 8001ed4:	d11d      	bne.n	8001f12 <__sflush_r+0xe6>
 8001ed6:	602f      	str	r7, [r5, #0]
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e021      	b.n	8001f20 <__sflush_r+0xf4>
 8001edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	e01a      	b.n	8001f1a <__sflush_r+0xee>
 8001ee4:	690f      	ldr	r7, [r1, #16]
 8001ee6:	2f00      	cmp	r7, #0
 8001ee8:	d0f6      	beq.n	8001ed8 <__sflush_r+0xac>
 8001eea:	0793      	lsls	r3, r2, #30
 8001eec:	bf18      	it	ne
 8001eee:	2300      	movne	r3, #0
 8001ef0:	680e      	ldr	r6, [r1, #0]
 8001ef2:	bf08      	it	eq
 8001ef4:	694b      	ldreq	r3, [r1, #20]
 8001ef6:	1bf6      	subs	r6, r6, r7
 8001ef8:	600f      	str	r7, [r1, #0]
 8001efa:	608b      	str	r3, [r1, #8]
 8001efc:	2e00      	cmp	r6, #0
 8001efe:	ddeb      	ble.n	8001ed8 <__sflush_r+0xac>
 8001f00:	4633      	mov	r3, r6
 8001f02:	463a      	mov	r2, r7
 8001f04:	4628      	mov	r0, r5
 8001f06:	6a21      	ldr	r1, [r4, #32]
 8001f08:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001f0c:	47e0      	blx	ip
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	dc07      	bgt.n	8001f22 <__sflush_r+0xf6>
 8001f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1e:	81a3      	strh	r3, [r4, #12]
 8001f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f22:	4407      	add	r7, r0
 8001f24:	1a36      	subs	r6, r6, r0
 8001f26:	e7e9      	b.n	8001efc <__sflush_r+0xd0>
 8001f28:	dfbffffe 	.word	0xdfbffffe

08001f2c <_fflush_r>:
 8001f2c:	b538      	push	{r3, r4, r5, lr}
 8001f2e:	690b      	ldr	r3, [r1, #16]
 8001f30:	4605      	mov	r5, r0
 8001f32:	460c      	mov	r4, r1
 8001f34:	b913      	cbnz	r3, 8001f3c <_fflush_r+0x10>
 8001f36:	2500      	movs	r5, #0
 8001f38:	4628      	mov	r0, r5
 8001f3a:	bd38      	pop	{r3, r4, r5, pc}
 8001f3c:	b118      	cbz	r0, 8001f46 <_fflush_r+0x1a>
 8001f3e:	6a03      	ldr	r3, [r0, #32]
 8001f40:	b90b      	cbnz	r3, 8001f46 <_fflush_r+0x1a>
 8001f42:	f7ff fc95 	bl	8001870 <__sinit>
 8001f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f3      	beq.n	8001f36 <_fflush_r+0xa>
 8001f4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f50:	07d0      	lsls	r0, r2, #31
 8001f52:	d404      	bmi.n	8001f5e <_fflush_r+0x32>
 8001f54:	0599      	lsls	r1, r3, #22
 8001f56:	d402      	bmi.n	8001f5e <_fflush_r+0x32>
 8001f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f5a:	f7ff fe6e 	bl	8001c3a <__retarget_lock_acquire_recursive>
 8001f5e:	4628      	mov	r0, r5
 8001f60:	4621      	mov	r1, r4
 8001f62:	f7ff ff63 	bl	8001e2c <__sflush_r>
 8001f66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f68:	4605      	mov	r5, r0
 8001f6a:	07da      	lsls	r2, r3, #31
 8001f6c:	d4e4      	bmi.n	8001f38 <_fflush_r+0xc>
 8001f6e:	89a3      	ldrh	r3, [r4, #12]
 8001f70:	059b      	lsls	r3, r3, #22
 8001f72:	d4e1      	bmi.n	8001f38 <_fflush_r+0xc>
 8001f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f76:	f7ff fe61 	bl	8001c3c <__retarget_lock_release_recursive>
 8001f7a:	e7dd      	b.n	8001f38 <_fflush_r+0xc>

08001f7c <__swhatbuf_r>:
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	460c      	mov	r4, r1
 8001f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f84:	4615      	mov	r5, r2
 8001f86:	2900      	cmp	r1, #0
 8001f88:	461e      	mov	r6, r3
 8001f8a:	b096      	sub	sp, #88	@ 0x58
 8001f8c:	da0c      	bge.n	8001fa8 <__swhatbuf_r+0x2c>
 8001f8e:	89a3      	ldrh	r3, [r4, #12]
 8001f90:	2100      	movs	r1, #0
 8001f92:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f96:	bf14      	ite	ne
 8001f98:	2340      	movne	r3, #64	@ 0x40
 8001f9a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	6031      	str	r1, [r6, #0]
 8001fa2:	602b      	str	r3, [r5, #0]
 8001fa4:	b016      	add	sp, #88	@ 0x58
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
 8001fa8:	466a      	mov	r2, sp
 8001faa:	f000 f849 	bl	8002040 <_fstat_r>
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	dbed      	blt.n	8001f8e <__swhatbuf_r+0x12>
 8001fb2:	9901      	ldr	r1, [sp, #4]
 8001fb4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001fb8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001fbc:	4259      	negs	r1, r3
 8001fbe:	4159      	adcs	r1, r3
 8001fc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fc4:	e7eb      	b.n	8001f9e <__swhatbuf_r+0x22>

08001fc6 <__smakebuf_r>:
 8001fc6:	898b      	ldrh	r3, [r1, #12]
 8001fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fca:	079d      	lsls	r5, r3, #30
 8001fcc:	4606      	mov	r6, r0
 8001fce:	460c      	mov	r4, r1
 8001fd0:	d507      	bpl.n	8001fe2 <__smakebuf_r+0x1c>
 8001fd2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001fd6:	6023      	str	r3, [r4, #0]
 8001fd8:	6123      	str	r3, [r4, #16]
 8001fda:	2301      	movs	r3, #1
 8001fdc:	6163      	str	r3, [r4, #20]
 8001fde:	b003      	add	sp, #12
 8001fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe2:	466a      	mov	r2, sp
 8001fe4:	ab01      	add	r3, sp, #4
 8001fe6:	f7ff ffc9 	bl	8001f7c <__swhatbuf_r>
 8001fea:	9f00      	ldr	r7, [sp, #0]
 8001fec:	4605      	mov	r5, r0
 8001fee:	4639      	mov	r1, r7
 8001ff0:	4630      	mov	r0, r6
 8001ff2:	f7ff fe8f 	bl	8001d14 <_malloc_r>
 8001ff6:	b948      	cbnz	r0, 800200c <__smakebuf_r+0x46>
 8001ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ffc:	059a      	lsls	r2, r3, #22
 8001ffe:	d4ee      	bmi.n	8001fde <__smakebuf_r+0x18>
 8002000:	f023 0303 	bic.w	r3, r3, #3
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	81a3      	strh	r3, [r4, #12]
 800200a:	e7e2      	b.n	8001fd2 <__smakebuf_r+0xc>
 800200c:	89a3      	ldrh	r3, [r4, #12]
 800200e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002016:	81a3      	strh	r3, [r4, #12]
 8002018:	9b01      	ldr	r3, [sp, #4]
 800201a:	6020      	str	r0, [r4, #0]
 800201c:	b15b      	cbz	r3, 8002036 <__smakebuf_r+0x70>
 800201e:	4630      	mov	r0, r6
 8002020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002024:	f000 f81e 	bl	8002064 <_isatty_r>
 8002028:	b128      	cbz	r0, 8002036 <__smakebuf_r+0x70>
 800202a:	89a3      	ldrh	r3, [r4, #12]
 800202c:	f023 0303 	bic.w	r3, r3, #3
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	81a3      	strh	r3, [r4, #12]
 8002036:	89a3      	ldrh	r3, [r4, #12]
 8002038:	431d      	orrs	r5, r3
 800203a:	81a5      	strh	r5, [r4, #12]
 800203c:	e7cf      	b.n	8001fde <__smakebuf_r+0x18>
	...

08002040 <_fstat_r>:
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	2300      	movs	r3, #0
 8002044:	4d06      	ldr	r5, [pc, #24]	@ (8002060 <_fstat_r+0x20>)
 8002046:	4604      	mov	r4, r0
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	602b      	str	r3, [r5, #0]
 800204e:	f7fe fa2d 	bl	80004ac <_fstat>
 8002052:	1c43      	adds	r3, r0, #1
 8002054:	d102      	bne.n	800205c <_fstat_r+0x1c>
 8002056:	682b      	ldr	r3, [r5, #0]
 8002058:	b103      	cbz	r3, 800205c <_fstat_r+0x1c>
 800205a:	6023      	str	r3, [r4, #0]
 800205c:	bd38      	pop	{r3, r4, r5, pc}
 800205e:	bf00      	nop
 8002060:	20000210 	.word	0x20000210

08002064 <_isatty_r>:
 8002064:	b538      	push	{r3, r4, r5, lr}
 8002066:	2300      	movs	r3, #0
 8002068:	4d05      	ldr	r5, [pc, #20]	@ (8002080 <_isatty_r+0x1c>)
 800206a:	4604      	mov	r4, r0
 800206c:	4608      	mov	r0, r1
 800206e:	602b      	str	r3, [r5, #0]
 8002070:	f7fe fa2b 	bl	80004ca <_isatty>
 8002074:	1c43      	adds	r3, r0, #1
 8002076:	d102      	bne.n	800207e <_isatty_r+0x1a>
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	b103      	cbz	r3, 800207e <_isatty_r+0x1a>
 800207c:	6023      	str	r3, [r4, #0]
 800207e:	bd38      	pop	{r3, r4, r5, pc}
 8002080:	20000210 	.word	0x20000210

08002084 <_sbrk_r>:
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	2300      	movs	r3, #0
 8002088:	4d05      	ldr	r5, [pc, #20]	@ (80020a0 <_sbrk_r+0x1c>)
 800208a:	4604      	mov	r4, r0
 800208c:	4608      	mov	r0, r1
 800208e:	602b      	str	r3, [r5, #0]
 8002090:	f7fe fa32 	bl	80004f8 <_sbrk>
 8002094:	1c43      	adds	r3, r0, #1
 8002096:	d102      	bne.n	800209e <_sbrk_r+0x1a>
 8002098:	682b      	ldr	r3, [r5, #0]
 800209a:	b103      	cbz	r3, 800209e <_sbrk_r+0x1a>
 800209c:	6023      	str	r3, [r4, #0]
 800209e:	bd38      	pop	{r3, r4, r5, pc}
 80020a0:	20000210 	.word	0x20000210

080020a4 <_init>:
 80020a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a6:	bf00      	nop
 80020a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020aa:	bc08      	pop	{r3}
 80020ac:	469e      	mov	lr, r3
 80020ae:	4770      	bx	lr

080020b0 <_fini>:
 80020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b2:	bf00      	nop
 80020b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020b6:	bc08      	pop	{r3}
 80020b8:	469e      	mov	lr, r3
 80020ba:	4770      	bx	lr
